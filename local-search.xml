<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python 虚拟环境与包安装</title>
    <link href="/p/0396f8b0c8c0.html"/>
    <url>/p/0396f8b0c8c0.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>随着python项目越来越多很容易出现库的混乱、污染，那么一个隔离的虚拟环境将使不同的项目互不干扰提高开发效率。<br><code>谨以此文作为个人安装笔记方便以后查阅。</code></p><ul><li><strong>本文所使用的环境：</strong><ul><li><strong>host：</strong> Windows 11</li></ul></li></ul><h3 id="0x01-安装虚拟环境"><a href="#0x01-安装虚拟环境" class="headerlink" title="0x01 安装虚拟环境"></a>0x01 安装虚拟环境</h3><p>安装虚拟环境库：<code>virtualenv</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> virtualenv<br></code></pre></td></tr></table></figure><p>在磁盘中创建一个文件夹用于存虚拟环境安装文件: <code>D:\virtualenv</code><br>然后切换到该目录下，安装虚拟环境：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># env 是存放虚拟环境的目录，名字可以任意</span><br>virtualenv <span class="hljs-keyword">env</span><br></code></pre></td></tr></table></figure><p>执行完命令之后，会自动生成一个<code>env</code>文件夹，里面包含了python所需的新解析环境<br><img src="/images/python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8C%85%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt="安装虚拟环境.png"></p><p><img src="/images/python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8C%85%E5%AE%89%E8%A3%85/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9B%AE%E5%BD%95.png" alt="虚拟环境目录.png"><br>注意：</p><blockquote><p>默认生成的虚拟环境是独立，当激活虚拟环境之后只允许到该目录下查找所需库，假如想要访问系统库，则需要使用参数：<code>--system-site-packages</code><br>eg. <code>virtualenv --system-site-packages env</code></p></blockquote><h3 id="0x02-激活虚拟环境"><a href="#0x02-激活虚拟环境" class="headerlink" title="0x02 激活虚拟环境"></a>0x02 激活虚拟环境</h3><p>安装完虚拟环境之后还需要激活才可以使用，进入文件夹：<code>D:\virtualenv\env\Scripts</code><br>命令行下直接输入：activate 或者 activate.bat</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">activate</span><br></code></pre></td></tr></table></figure><p>激活成功之后可以看到命令行多了一个 <code>(env)</code>的前缀<br><img src="/images/python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8C%85%E5%AE%89%E8%A3%85/%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt="激活虚拟环境.png"><br>然后在此环境下安装的所有库被安装到虚拟环境下，并保存到：<code>D:\virtualenv\env\Lib\site-packages</code></p><h3 id="0x03-关闭虚拟环境"><a href="#0x03-关闭虚拟环境" class="headerlink" title="0x03 关闭虚拟环境"></a>0x03 关闭虚拟环境</h3><p>关闭虚拟环境同样需要进入文件夹：<code>D:\virtualenv\env\Scripts</code><br>命令行下直接输入：deactivate 或者 deactivate.bat</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">deactivate</span><br></code></pre></td></tr></table></figure><p>关闭之后可以看到命令行 <code>(env)</code>的前缀取消了<br><img src="/images/python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8C%85%E5%AE%89%E8%A3%85/%E5%85%B3%E9%97%AD%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt="关闭虚拟环境.png"></p><h3 id="0x04-从文件安装库"><a href="#0x04-从文件安装库" class="headerlink" title="0x04 从文件安装库"></a>0x04 从文件安装库</h3><p>为了便于在另一台电脑复刻当前python的库环境，可以使用pip的<code>freeze</code>的选项导出当前使用的所有库信息到<code>requirements.txt</code>中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure><p><img src="/images/python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8C%85%E5%AE%89%E8%A3%85/%E5%AF%BC%E5%87%BA%E5%BA%93%E4%BF%A1%E6%81%AF%E5%88%B0%E6%96%87%E4%BB%B6.png" alt="导出库信息到文件.png"></p><p>切换电脑时只需重新按文件安装库即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p><img src="/images/python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%8C%85%E5%AE%89%E8%A3%85/%E4%BB%8E%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E5%BA%93.png" alt="从文件安装库.png"></p><p>注意：<br>安装时需要确认当前所属环境的。假如是虚拟环境，则需要确保已激活。</p><p>【参考资料】</p><ul><li>virtualenv 官方手册：<a href="https://virtualenv.pypa.io/en/latest/user_guide.html">virtualenv user_guide</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多系统引导 —— rEFInd手动安装记录</title>
    <link href="/p/dd4589f11ca9.html"/>
    <url>/p/dd4589f11ca9.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>rEFInd对于UEFI下的多系统引导非常有优势，可以自动的识别所有不同系统下的引导文件，并生成启动条目。<br>rEFInd有多种安装方式，其中比较方便的是使用自带的脚本命令<code>refind-install</code>即可一键安装。也可以使用手动方式一步步安装所需文件，本文采用手动安装方式。<br><code>谨以此文作为个人安装笔记方便以后查阅。</code></p><ul><li><p><strong>本文所使用的环境：</strong></p><ul><li><p><strong>VMware：</strong> Workstation 16 Pro &amp; 16.2.0 build-18760230</p></li><li><p><strong>host：</strong> Windows 11 Pro &amp; 22000.282</p></li><li><p><strong>guest：</strong> Windows10 &amp;&amp; ArchLinux 5.15.2-arch1-1</p></li></ul></li><li><p><strong>guest 中的分区情况：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ lsblk<br>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>sda           8:0    0   300G  0 disk<br>├─sda1        8:1    0   100G  0 part /<br>├─sda2        8:2    0   300M  0 part /boot/efi<br>├─sda3        8:3    0   190G  0 part /home<br>└─sda4        8:4    0   9.7G  0 part [SWAP]<br>nvme0n1     259:0    0   200G  0 disk<br>├─nvme0n1p1 259:1    0   529M  0 part<br>├─nvme0n1p2 259:2    0    99M  0 part<br>├─nvme0n1p3 259:3    0    16M  0 part<br>└─nvme0n1p4 259:4    0 199.4G  0 part<br></code></pre></td></tr></table></figure><p>注意：nvme0n1p1 是 Win10 的EFI分区，虚拟机系统引导类型：UEFI，磁盘分区表：GPT</p></li></ul><h3 id="0x01-安装rEFInd"><a href="#0x01-安装rEFInd" class="headerlink" title="0x01 安装rEFInd"></a>0x01 安装rEFInd</h3><p>rEFInd需要配合 <a href="https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface#efibootmgr">efibootmgr</a> 创建一个引导入口，因此安装时需要一同安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S refind efibootmgr<br></code></pre></td></tr></table></figure><p>EFI 分区下创建 refind 目录，并将 efi 引导文件复制到EFI分区下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/boot/</span>efi<span class="hljs-regexp">/EFI/</span>refind<br>cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/refind/</span>refind_x64.efi <span class="hljs-regexp">/boot/</span>efi<span class="hljs-regexp">/EFI/</span>refind/<br></code></pre></td></tr></table></figure><p>然后使用<a href="https://wiki.archlinux.org/title/Efibootmgr">efibootmgr</a>在UEFI NVRAM中创建一个引导条目，其中 <em>/dev/sda –part 2</em> 是指EFI系统分区所在的磁盘与分区号（即 <code>refind_x64.efi</code> 引导文件所在的磁盘与分区号）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">efibootmgr --create --disk /dev/sda --part 2 --loader /EFI/refind/refind_x64.efi --label <span class="hljs-string">&quot;rEFInd Boot Manager&quot;</span> --verbose<br></code></pre></td></tr></table></figure><p>将支持其它系统的相关 efi 引导文件复制到EFI系统分区中的rEFInd安装目录下的 <strong>drivers_x64</strong> 文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /boot/efi/EFI/refind/drivers_x64<br>cp /usr/share/refind/drivers_x64/* /boot/efi/EFI/refind/drivers_x64/<br></code></pre></td></tr></table></figure><p>复制 rEFInd 的配置文件、图标文件、字体文件到EFI系统分区中的rEFInd安装目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp /usr/share/refind/refind.conf-sample /boot/efi/EFI/refind/refind.conf<br>cp -r /usr/share/refind/icons /boot/efi/EFI/refind/<br>cp -r /usr/share/refind/ifonts /boot/efi/EFI/refind/<br></code></pre></td></tr></table></figure><h3 id="0x02-配置rEFInd"><a href="#0x02-配置rEFInd" class="headerlink" title="0x02 配置rEFInd"></a>0x02 配置rEFInd</h3><p>以root用户运行 <code>mkrlconf</code>。它会尝试在 <code>/boot</code> 中找到你的内核，并自动生成 <code>refind_linux.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkrlconf<br></code></pre></td></tr></table></figure><p>运行之后会在 <code>/boot</code> 下自动生成的引导配置文件 <code>refind_linux.conf</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;Boot with standard options&quot;</span>     <span class="hljs-string">&quot;archisobasedir=arch archisolabel=Arch_20211101&quot;</span><br><span class="hljs-string">&quot;Boot to single-user mode&quot;</span>      <span class="hljs-string">&quot;archisobasedir=arch archisolabel=Arch_20211101 single&quot;</span><br><span class="hljs-string">&quot;Boot with minimal options&quot;</span>      <span class="hljs-string">&quot;ro root=/dev/sda1&quot;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>如果是以启动盘或者挂载镜像文件来安装的系统，那么此时 <code>mkrlconf</code> 找到的内核是启动盘或者挂载镜像文件的内核，一旦移除启动盘或者挂载镜像文件之后，除了最后一行外，其余引导将不起作用。</li></ul><p>因此我们应该手动地修改引导参数，并且传递相关的参数给内核；<br>修改后的引导文件 <code>/boot/refind_linux.conf</code> 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;Boot using default options&quot;</span>        <span class="hljs-string">&quot;root=/dev/sda1 rw add_efi_memmap initrd=\boot\intel-ucode.img initrd=\boot\initramfs-%v.img&quot;</span><br><span class="hljs-string">&quot;Boot using fallback initramfs&quot;</span>     <span class="hljs-string">&quot;root=/dev/sda1 rw add_efi_memmap initrd=\boot\intel-ucode.img initrd=\boot\initramfs-%v-fallback.img&quot;</span><br><span class="hljs-string">&quot;Boot to terminal&quot;</span>                  <span class="hljs-string">&quot;root=/dev/sda1 rw add_efi_memmap initrd=\boot\intel-ucode.img initrd=\boot\initramfs-%v.img systemd.unit=multi-user.target&quot;</span><br></code></pre></td></tr></table></figure><p><code>refind_linux.conf</code> 文件内容解析：</p><blockquote><ol><li><p><code>root=/dev/sda1</code> 指定用于启动系统的内核所在的分区。因为 <code>/dev/sda2</code> 挂载在 <code>/boot/efi</code>，而内核文件又放在 <code>/boot</code> 目录下，其中 <code>boot</code>目录是在 <code>/</code> 下，而 <code>/dev/sda1</code> 挂载在 <code>/</code>，所以这里应该设置 <code>root=/dev/sda1</code></p></li><li><p><code>intel-ucode.img</code> 是 针对 Intel的CPU，如果是AMD，则改成 <code>amd-ucode.img</code></p></li><li><p>变量 <code>%v</code> 需要在 <code>/boot/efi/EFI/refind/refind.conf</code> 中取消 <code>extra_kernel_version_strings</code>的注释，否则会引导失败（如果不使用变量 <code>%v</code> 可以直接改成具体的文件名）。</p></li></ol></blockquote><h3 id="0x03-使用主题"><a href="#0x03-使用主题" class="headerlink" title="0x03 使用主题"></a>0x03 使用主题</h3><p>rEFInd的<a href="https://github.com/topics/refind-theme">主题</a>文件一般都放在<code>/boot/efi/EFI/refind/themes</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /boot/efi/EFI/refind/themes<br><span class="hljs-built_in">cd</span> themes<br>git <span class="hljs-built_in">clone</span> https://github.com/kgoettler/ursamajor-rEFInd.git<br></code></pre></td></tr></table></figure><p>在rEFInd 配置文件 <code>refind.conf</code> 最末尾添加一行包含主题参数文件的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;include themes/ursamajor-rEFInd/theme.conf&quot;</span> &gt;&gt; /boot/efi/EFI/refind/refind.conf<br></code></pre></td></tr></table></figure><p>附上一张效果图</p><p><img src="/images/%E5%A4%9A%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%20%E2%80%94%E2%80%94%20rEFInd%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/rEFInd.png" alt="rEFInd.png"></p><p>【参考资料】</p><ul><li>rEFInd 官方手册：<a href="https://www.rodsbooks.com/refind/using.html">The rEFInd Boot Manager: Using rEFInd</a></li><li>Arch Linux Wiki：<a href="https://wiki.archlinux.org/title/REFInd#Manual_installation">rEFInd</a></li><li>rEFInd 主题: <a href="https://github.com/kgoettler/ursamajor-rEFInd.git">ursamajor-rEFInd</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>rEFInd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>rEFInd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建 VMware 共享文件夹</title>
    <link href="/p/d69e0eb05c7c.html"/>
    <url>/p/d69e0eb05c7c.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>趁有时间整理一下关于搭建 VMware 共享文件夹的相关步骤</p><p>本文所使用的环境：</p><ul><li><p>  <strong>VMware：</strong> Workstation 16 Pro &amp; 16.2.0 build-18760230</p></li><li><p>  <strong>host：</strong> Windows 11 Pro &amp; 22000.282</p></li><li><p>  <strong>guest：</strong> ArchLinux &amp; 5.14.14-arch1-1</p></li></ul><h3 id="0x01-开启-host-共享文件夹"><a href="#0x01-开启-host-共享文件夹" class="headerlink" title="0x01 开启 host 共享文件夹"></a>0x01 开启 host 共享文件夹</h3><ul><li><p>在Win11上创建一个空文件夹(名字随意)，例如：</p><p>  <strong>E:\hostshare</strong></p></li><li><p>开启 VMware host共享文件夹:</p><p>  <strong>settings &gt; Options &gt; Shared Folders &gt; Always enabled</strong></p><p>  <strong>Folders &gt; add &gt; select “E:\hostshare”</strong><br><img src="/images/%E6%90%AD%E5%BB%BA%20VMware%20%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/sharefolder-enable.png" alt="sharefolder-enable"><br><img src="/images/%E6%90%AD%E5%BB%BA%20VMware%20%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/select-sharefolder.png" alt="select-sharefolder"><br>最后确认即可。<br><code>注意：后面涉及的 &quot;.host:/&quot; 指的并不是绝对路径，而单纯就是 host 共享文件夹的名字，不管它上层有多少个文件夹。</code></p></li></ul><h3 id="0x02-在-guest-中安装并配置相关软件"><a href="#0x02-在-guest-中安装并配置相关软件" class="headerlink" title="0x02 在 guest 中安装并配置相关软件"></a>0x02 在 guest 中安装并配置相关软件</h3><h4 id="In-kernel-drivers"><a href="#In-kernel-drivers" class="headerlink" title="In-kernel drivers"></a>In-kernel drivers</h4><ol><li> 添加内核模块</li></ol><p>/etc/mkinitcpio.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MODULES=(... vmw_balloon vmw_pvscsi vsock vmw_vsock_vmci_transport ...)<br></code></pre></td></tr></table></figure><ol start="2"><li><p> 重新编译内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkinitcpio -P<br></code></pre></td></tr></table></figure><h4 id="Open-VM-Tools"><a href="#Open-VM-Tools" class="headerlink" title="Open-VM-Tools"></a>Open-VM-Tools</h4></li><li><p> 安装 open-vm-tools</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S --noconfirm open-vm-tools<br></code></pre></td></tr></table></figure></li><li><p> start &amp; enable service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## Service responsible for the Virtual Machine status report.</span><br>systemctl start vmtoolsd.service<br>systemctl <span class="hljs-built_in">enable</span> vmtoolsd.service<br><span class="hljs-comment">## Filesystem utility. Enables drag &amp; drop functionality between host and guest through FUSE (Filesystem in Userspace).</span><br>systemctl start vmware-vmblock-fuse.service<br>systemctl <span class="hljs-built_in">enable</span> vmware-vmblock-fuse.service<br></code></pre></td></tr></table></figure></li><li><p> 安装 gtkmm3 (To enable copy and paste between host and guest gtkmm3 is required.)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S --noconfirm gtkmm3<br></code></pre></td></tr></table></figure></li><li><p> 检查共享文件夹是否启用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vmware-hgfsclient<br></code></pre></td></tr></table></figure><p>如果有输出：<strong>hostshare</strong>，则表示已启用，否则回到 <strong>步骤0x01</strong> 检查是否有误。</p></li></ol><h4 id="Xorg-configuration"><a href="#Xorg-configuration" class="headerlink" title="Xorg configuration"></a>Xorg configuration</h4><ol><li><p> 安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S --noconfirm xf86-input-vmmouse xf86-video-vmware mesa<br></code></pre></td></tr></table></figure></li><li><p>if booting into multi-user.target or using an uncommon setup (e.g. multiple monitors)</p><p> to give permission for loading drivers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;needs_root_rights=yes&quot;</span> &gt; /etc/X11/Xwrapper.config<br></code></pre></td></tr></table></figure><h4 id="Shared-Folders-with-vmhgfs-fuse-utility"><a href="#Shared-Folders-with-vmhgfs-fuse-utility" class="headerlink" title="Shared Folders with vmhgfs-fuse utility"></a>Shared Folders with <code>vmhgfs-fuse</code> utility</h4></li><li><p> 在ArchLinux的家目录下创建一个guest共享文件夹（路径与名字随意）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /home/skillf/guestshare<br></code></pre></td></tr></table></figure></li><li><p> 在<code>/etc/fuse.conf</code>中取消下面一行的注释，表示允许其他用户访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">user_allow_other<br></code></pre></td></tr></table></figure></li><li><p> 将host共享文件夹挂载到guest共享文件夹(临时挂载)，如果guest共享文件夹是非空文件夹，则要加参数 <strong>-o nonempty</strong>，另外挂载之后guest共享文件夹里的东西将被隐藏一直到卸载，所以<strong>guest共享文件夹最好在未挂载时，保持为空文件夹</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vmhgfs-fuse -o allow_other -o auto_unmount .host:/hostshare /home/skillf/guestshare<br></code></pre></td></tr></table></figure></li></ol><p><em>注意：</em>第3步为临时挂载，在重启后需要再次手动挂载，所以我们应该让它一开机自动挂载</p><p>这里推荐两种开机自动挂载方式：</p><ul><li><p>  方法一：在 <strong>/etc/fstab</strong> 在最后添加一行即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.host:/hostshare /home/skillf/guestshare fuse.vmhgfs-fuse nofail,allow_other 0 0<br></code></pre></td></tr></table></figure></li><li><p>  方法二：使用<strong>Systemd</strong>，创建一个开机自启服务(名字随意，但必须.service结尾) 例如：<strong>hostshare-guestshare.service</strong>，将挂载命令丢入服务中即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=Load VMware shared folders<br>Requires=vmware-vmblock-fuse.service<br>After=vmware-vmblock-fuse.service<br>ConditionPathExists=.host:/hostshare<br>ConditionVirtualization=vmware<br><br>[Service]<br>Type=oneshot<br>RemainAfterExit=yes<br>ExecStart=/usr/bin/vmhgfs-fuse -o allow_other -o auto_unmount .host:/hostshare /home/skillf/guestshare<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>最后将 <strong>hostshare-guestshare.service</strong> 复制到 **/etc/systemd/system/**，并启用服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp hostshare-guestshare.service /etc/systemd/system/<br>systemctl start hostshare-guestshare.service<br>systemctl <span class="hljs-built_in">enable</span> hostshare-guestshare.service<br></code></pre></td></tr></table></figure><h4 id="Time-synchronization"><a href="#Time-synchronization" class="headerlink" title="Time synchronization"></a>Time synchronization</h4></li><li><p>  guest中时间常常与host中的时间不一致，所以需要以host作为同步时间源，进行同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vmware-toolbox-cmd timesync <span class="hljs-built_in">enable</span><br>hwclock --hctosys --localtime<br></code></pre></td></tr></table></figure><p>至此手动开启共享文件的步骤已整理完毕，再进一步写成名为 <strong>vmwareshare.sh</strong> 的脚本吧：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">###</span><br> <span class="hljs-comment"># @Author: skillf</span><br> <span class="hljs-comment"># @Date: 2021-11-02 21:20:10</span><br> <span class="hljs-comment"># @LastEditTime: 2021-11-03 09:45:18</span><br> <span class="hljs-comment"># @FilePath: \archlinuxInstall\vmware.sh</span><br><span class="hljs-comment">###</span><br><br><span class="hljs-comment"># Print the command. The script ends when the command fails.</span><br><span class="hljs-comment"># -o pipefail : As soon as a subcommand fails, the entire pipeline command fails and the script terminates.</span><br><span class="hljs-built_in">set</span> -euo pipefail<br><span class="hljs-comment"># Please uncomment it to see how it works</span><br><span class="hljs-comment">#set -x</span><br><br><span class="hljs-comment"># The shared folder in host</span><br>hostshare=<span class="hljs-string">&quot;host&quot;</span><br><span class="hljs-comment"># The shared folder in guest</span><br>guestshare=<span class="hljs-string">&quot;/home/skillf/guest&quot;</span><br><span class="hljs-comment"># ##*/ Cut the string after the last &#x27;/&#x27; from left to right</span><br>service=<span class="hljs-variable">$hostshare</span>-$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;guestshare##*/&#125;</span>).service<br><br><span class="hljs-comment"># Check VMware share folder</span><br>pacman -Sy<br>pacman -S --noconfirm open-vm-tools<br><span class="hljs-keyword">if</span> ! vmware-hgfsclient | grep <span class="hljs-variable">$hostshare</span> &gt; /dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[031mERROR: The VMware shared folder \&quot;<span class="hljs-variable">$hostshare</span>\&quot; is not enabled !\033[0m&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># In-kernel drivers</span><br>sed -i <span class="hljs-string">&#x27;s/^MODULES=()/MODULES=(vmw_balloon vmw_pvscsi vsock vmw_vsock_vmci_transport)/&#x27;</span> /etc/mkinitcpio.conf<br>mkinitcpio -P<br><br><span class="hljs-comment"># Open-VM-Tools</span><br>pacman -S --noconfirm gtkmm3<br><span class="hljs-comment">## Service responsible for the Virtual Machine status report.</span><br>systemctl start vmtoolsd.service<br>systemctl <span class="hljs-built_in">enable</span> vmtoolsd.service<br><span class="hljs-comment">## Filesystem utility. Enables drag &amp; drop functionality between host and guest through FUSE (Filesystem in Userspace).</span><br>systemctl start vmware-vmblock-fuse.service<br>systemctl <span class="hljs-built_in">enable</span> vmware-vmblock-fuse.service<br><br><span class="hljs-comment"># Xorg configuration</span><br>pacman -S --noconfirm xf86-input-vmmouse xf86-video-vmware mesa<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;needs_root_rights=yes&quot;</span> &gt; /etc/X11/Xwrapper.config<br><br><span class="hljs-keyword">if</span> df | grep $guestshare$ | grep vmhgfs-fuse &gt; /dev/null; <span class="hljs-keyword">then</span><br>systemctl stop <span class="hljs-variable">$service</span><br>systemctl <span class="hljs-built_in">disable</span> <span class="hljs-variable">$service</span><br>rm -rf  /etc/systemd/system/<span class="hljs-variable">$service</span><br>rm -rf <span class="hljs-variable">$guestshare</span><br><span class="hljs-keyword">fi</span><br>mkdir -p <span class="hljs-variable">$guestshare</span><br><span class="hljs-comment"># Change the owner permission of a shared folder</span><br>chown -R skillf:skillf <span class="hljs-variable">$guestshare</span><br><br>sed -i <span class="hljs-string">&#x27;s/^#user_allow_other/user_allow_other/&#x27;</span> /etc/fuse.conf<br>cat &gt; /etc/systemd/system/<span class="hljs-variable">$service</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Load VMware shared folders</span><br><span class="hljs-string">Requires=vmware-vmblock-fuse.service</span><br><span class="hljs-string">After=vmware-vmblock-fuse.service</span><br><span class="hljs-string">ConditionPathExists=.host:/$hostshare</span><br><span class="hljs-string">ConditionVirtualization=vmware</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=oneshot</span><br><span class="hljs-string">RemainAfterExit=yes</span><br><span class="hljs-string">ExecStart=/usr/bin/vmhgfs-fuse -o allow_other -o auto_unmount .host:/$hostshare $guestshare</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br>systemctl start <span class="hljs-variable">$service</span><br>systemctl <span class="hljs-built_in">enable</span> <span class="hljs-variable">$service</span><br><br><span class="hljs-comment"># Time synchronization</span><br><span class="hljs-comment"># Host machine as time source</span><br>vmware-toolbox-cmd timesync <span class="hljs-built_in">enable</span><br>hwclock --hctosys --localtime<br></code></pre></td></tr></table></figure><p>然后在 <code>$HOME/.xinitrc</code> 文件中添加：<br><code>注意：如果是使用的是WM，比如：dwm 那么应该在其之前的行添加</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##  Tool to enable clipboard sharing (copy/paste) between host and guest.</span><br>vmware-user &amp;<br></code></pre></td></tr></table></figure><p>最后使用脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chmod a+x vmwareshare.sh<br>sudo ./vmwareshare.sh<br></code></pre></td></tr></table></figure><p>注意：如果是在Windows下编辑的代码，那么在Linux运行之前需要转换一下格式，否则会报错：<br><code>-bash: xxx: /bin/bash^M: bad interpreter: No such file or directory</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S --noconfirm dos2unix<br>dos2unix vmwareshare.sh<br></code></pre></td></tr></table></figure><p>Tips:</p><ul><li>卸载 guest 共享文件夹：<ul><li>如果是在命令行直接挂载，则可以使用 <strong>umount</strong> 卸载：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo umount -l /home/skillf/guestshare<br></code></pre></td></tr></table></figure></li><li>如果是使用 <strong>Systemd</strong> 启用服务的方式挂载，则移除服务之后自动卸载：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop hostshare-guestshare.service<br>systemctl <span class="hljs-built_in">disable</span> hostshare-guestshare.service<br></code></pre></td></tr></table></figure></li></ul></li><li>往虚拟机中拖拽文件，将被保存在目录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/.cache/vmware/drag_and_drop/<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>VMware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装win10前的diskpart手动分区</title>
    <link href="/p/c951a769a08f.html"/>
    <url>/p/c951a769a08f.html</url>
    
    <content type="html"><![CDATA[<p>win10 1909更新之时，提示<code>我们无法更新系统保留的分区</code><br><img src="/images/%E5%AE%89%E8%A3%85win10%E5%89%8D%E7%9A%84diskpart%E6%89%8B%E5%8A%A8%E5%88%86%E5%8C%BA/%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E4%BF%9D%E7%95%99%E7%9A%84%E5%88%86%E5%8C%BA.png" alt="无法更新系统保留的分区"><br>细查之下发现，之前安装的时候默认使用了win10的分区方案：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">EFI</span> <span class="hljs-number">100</span>MB<br><span class="hljs-attribute">MSR</span> <span class="hljs-number">16</span>MB<br><span class="hljs-attribute">Recovery</span> <span class="hljs-number">529</span>MB<br></code></pre></td></tr></table></figure><p>因此导致没有足够的空间进行更新。所以才有了接下来安装win10系统前的手动分区操作。可以把之前的默认分区方案适当的扩大一些，如图所示：<br><img src="/images/%E5%AE%89%E8%A3%85win10%E5%89%8D%E7%9A%84diskpart%E6%89%8B%E5%8A%A8%E5%88%86%E5%8C%BA/diskpart%E6%89%8B%E5%8A%A8%E5%88%86%E5%8C%BA%E7%BB%93%E6%9E%9C.png" alt="diskpart手动分区结果"></p><p>首先，下载win10镜像，制作启动优盘，在win10安装界面出来之后，按快捷键 <code>SHIFT+F10</code>，进入cmd命令行中，然后输入<code>diskpart</code>回车，具体的分区过程如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 从cmd进入diskpart分区工具命令行中</span><br><span class="hljs-attribute">diskpart</span><br><span class="hljs-comment"># 列出当前所有存在的硬盘</span><br><span class="hljs-attribute">list</span> disk<br><span class="hljs-comment"># 这里选择0号硬盘作为操作系统所在的硬盘</span><br><span class="hljs-attribute">select</span> disk <span class="hljs-number">0</span><br><span class="hljs-comment"># 删除所有分区，在此之前需要确保已经备份好整个硬盘的资料</span><br><span class="hljs-attribute">clean</span><br><span class="hljs-comment"># 转换硬盘为GPT格式（如果已经是GPT格式，则跳过此操作）</span><br><span class="hljs-attribute">convert</span> gpt<br><br><span class="hljs-comment"># 进入正题</span><br><br><span class="hljs-comment"># EFI</span><br><span class="hljs-attribute">create</span> partition efi size=<span class="hljs-number">512</span> # 创建一个EFI分区，大小为<span class="hljs-number">512</span>MB<br><span class="hljs-comment"># assign letter=b # 设置分区盘符，安装系统时可省略这一步</span><br><span class="hljs-attribute">format</span> quick fs=fat<span class="hljs-number">32</span> label=<span class="hljs-string">&quot;EFI&quot;</span> # 格式化EFI分区文件系统为FAT<span class="hljs-number">32</span>，标签为EFI<br><br><span class="hljs-comment"># MSR</span><br><span class="hljs-comment"># 对于小于 16 GB 的磁盘，MSR 分区为 32 MB。对于大于 16 GB 的磁盘，MSR 分区为 128 MB。</span><br><span class="hljs-comment"># 对于在GPT磁盘上的Windows操作系统，MSR分区不是必须的，可以删除不受影响。</span><br><span class="hljs-attribute">create</span> partition msr size=<span class="hljs-number">128</span>  # 创建一个MSR分区，大小为<span class="hljs-number">128</span>MB，Win<span class="hljs-number">10</span> <span class="hljs-number">1909</span> 默认是<span class="hljs-number">16</span>M<br><br><span class="hljs-comment"># Recovery</span><br><span class="hljs-comment"># recovery 是系统还原分区，删除掉这个分区你将无法还原初始系统；</span><br><span class="hljs-attribute">create</span> partition primary size=<span class="hljs-number">650</span> # 创建一个主分区，大小为<span class="hljs-number">650</span>MB Win<span class="hljs-number">10</span> <span class="hljs-number">1909</span> 默认是<span class="hljs-number">529</span>M<br><span class="hljs-attribute">format</span> quick fs=ntfs label=<span class="hljs-string">&quot;Recovery&quot;</span> # 格式化Recovery分区文件系统为NTFS，标签为Recovery<br><span class="hljs-comment"># assign letter=&quot;R&quot; # 设置分区盘符，安装系统时可省略这一步</span><br><span class="hljs-attribute">set</span> id=<span class="hljs-string">&quot;de94bba4-06d1-4d40-a16a-bfd50179d6ac&quot;</span>  # 设置主分区类型为恢复分区<br><span class="hljs-attribute">gpt</span> attributes=<span class="hljs-number">0</span>x<span class="hljs-number">8000000000000001</span>   #修改主分区属性为“受保护”，<span class="hljs-number">8</span> 和 <span class="hljs-number">1</span> 之间有<span class="hljs-number">14</span>个<span class="hljs-number">0</span><br><br><span class="hljs-comment"># 上述全部设置完成之后，退出即可</span><br><span class="hljs-attribute">exit</span><br></code></pre></td></tr></table></figure><p>所有的操作记录：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Microsoft Windows [版本 <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">18362</span>.<span class="hljs-number">592</span>]<br>(c) <span class="hljs-number">2019</span> Microsoft Corporation。保留所有权利。<br>X:\Sources&gt;<span class="hljs-keyword">diskpart</span><br><span class="hljs-keyword">Microsoft </span>Windows 版本 <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">18362</span>.<span class="hljs-number">1</span><br><br>Copyright (c) Microsoft Corporation.<br>在计算机上：MINWINPC<br><br><span class="hljs-keyword">DISKPART&gt; </span>list <span class="hljs-keyword">disk</span><br><span class="hljs-keyword"> </span>磁盘 <span class="hljs-comment">###  状态             大小       可用      Dyn      Gpt</span><br> -------- ---------------- ---------  -------- -------- -----<br> 磁盘 <span class="hljs-number">0</span>    联机               <span class="hljs-number">931</span> GB      <span class="hljs-number">930</span> GB             *<br> 磁盘 <span class="hljs-number">1</span>    联机               <span class="hljs-number">953</span> GB      <span class="hljs-number">953</span> GB             *<br> 磁盘 <span class="hljs-number">2</span>    联机                <span class="hljs-number">14</span> GB        <span class="hljs-number">0</span> GB             *<br><br><span class="hljs-keyword">DISKPART&gt; </span>select <span class="hljs-keyword">disk </span><span class="hljs-number">0</span><br>磁盘 <span class="hljs-number">0</span> 现在是所选磁盘。<br><span class="hljs-keyword">DISKPART&gt; </span>clean<br><span class="hljs-keyword">Diskpart </span>成功地清除了磁盘。<br><span class="hljs-keyword">DISKPART&gt; </span>convert gpt<br><span class="hljs-keyword">Diskpart </span>已将所选磁盘成功地转更换为 GPT 格式。<br><span class="hljs-keyword">DISKPART&gt; </span>create partition efi size=<span class="hljs-number">512</span><br><span class="hljs-keyword">Diskpart </span>成功地创建了指定分区。<br><span class="hljs-keyword">DISKPART&gt; </span>format quick fs=fat32 label=<span class="hljs-string">&quot;EFI&quot;</span><br> <span class="hljs-number">100</span> 百分比已完成<br><span class="hljs-keyword">Diskpart </span>成功格式化该卷。<br><span class="hljs-keyword">DISKPART&gt; </span>create partition msr size=<span class="hljs-number">128</span><br><span class="hljs-keyword">Diskpart </span>成功地创建了指定分区。<br><span class="hljs-keyword">DISKPART&gt; </span>create partition primary size=<span class="hljs-number">650</span><br><span class="hljs-keyword">Diskpart </span>成功地创建了指定分区。<br><span class="hljs-keyword">DISKPART&gt; </span>format quick fs=ntfs label=<span class="hljs-string">&quot;Recovery&quot;</span><br> <span class="hljs-number">100</span> 百分比已完成<br><span class="hljs-keyword">Diskpart </span>成功格式化该卷。<br><span class="hljs-keyword">DISKPART&gt; </span>set id=<span class="hljs-string">&quot;de94bba4-06d1-4d40-a16a-bfd50179d6ac&quot;</span><br><span class="hljs-keyword">Diskpart </span>成功设置了分区 ID。<br><span class="hljs-keyword">DISKPART&gt; </span>gpt attributes=<span class="hljs-number">0x8000000000000001</span><br><span class="hljs-keyword">Diskpart </span>成功地将属性分配给选择的 GPT 分区。<br><span class="hljs-keyword">DISKPART&gt; </span>exit<br><br></code></pre></td></tr></table></figure><p>退出后，Windows安装程序中刷新一下磁盘列表，然后即可正常安装win10啦！<br>安装完之后更新一切正常！</p>]]></content>
    
    
    <categories>
      
      <category>Win10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git同步项目到Github的完整流程——Windows篇</title>
    <link href="/p/b3e6f171cd81.html"/>
    <url>/p/b3e6f171cd81.html</url>
    
    <content type="html"><![CDATA[<p>最近在写一个archlinux的自动安装脚本，由于需要在不同电脑上切换非常麻烦，所以使用github做版本管理，网上查了很多资料，做一下笔记捋一下git与github的简单使用流程：</p><p><code>测试平台：Windows7 + ArchLinux</code></p><p>首先要理解的是：</p><pre><code class="hljs">    每一个文件夹都可以当成是一个本地仓库（只要包含有 .git）    每一个本地仓库都有一个 .git 包含该仓库的基本设置</code></pre><h4 id="1-安装-git"><a href="#1-安装-git" class="headerlink" title="1. 安装 git"></a>1. 安装 git</h4><p>直接在<a href="https://git-scm.com/">git官网</a>下载对应安装包即可<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/git%20%E5%AE%98%E7%BD%91.png" alt="git 官网"><br>下载完之后按提示安装，一般默认设置就够用了（简单的上传同步功能）。</p><h4 id="2-生成公钥"><a href="#2-生成公钥" class="headerlink" title="2. 生成公钥"></a>2. 生成公钥</h4><p>Git 软件安装完之后，找到并双击打开软件 <code>Git Bash</code>，在打开的命令行中输入命令生成密钥:<br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;xxxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p>一路按回车即可！<br>生成之后按提示路径找到<code>id_rsa.pub</code>这个文件，即是我们要添加的公钥文件。<br>而<code>id_rsa</code>文件则不用理会，它是根据本地电脑生成的私钥，用来配对github上的公钥。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5.png" alt="生成密钥"></p><p>接下来找到公钥路径，打开 <code>id_rsa.pub</code>文件，并全选文件里面的内容复制出来，以做备用。</p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E5%85%AC%E9%92%A5%E8%B7%AF%E5%BE%84.png" alt="公钥路径"></p><h4 id="3-添加公钥到-Github"><a href="#3-添加公钥到-Github" class="headerlink" title="3. 添加公钥到 Github"></a>3. 添加公钥到 Github</h4><p>首先当然是要去<a href="https://github.com/">github官</a>网注册一个账号啦~<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%B3%A8%E5%86%8Cgithub%E8%B4%A6%E5%8F%B7.png" alt="注册github账号"><br>按提示注册完之后，登录账号按提示添加公钥：</p><p> <strong><code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key</code></strong></p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.png" alt="添加公钥"><br>进入 <code>SSH keys</code> 添加页面后，按提示将复制出来的公钥内容粘贴到Key栏，最后点击添加按钮，输入登录密码确认添加，到此个人电脑与 Github 的公钥添加已完成。</p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E7%B2%98%E8%B4%B4%E5%85%AC%E9%92%A5%E5%86%85%E5%AE%B9.png" alt="粘贴公钥内容"><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/SSH%20keys%E6%B7%BB%E5%8A%A0%E5%AE%8C%E6%88%90.png" alt="SSH keys添加完成"></p><p>最后验证是否添加成功，输入命令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>回车后按提示输入 <code>yes</code> 回车即可。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E9%AA%8C%E8%AF%81.png" alt="验证"></p><h4 id="4-创建Github远程仓库"><a href="#4-创建Github远程仓库" class="headerlink" title="4. 创建Github远程仓库"></a>4. 创建Github远程仓库</h4><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/setting.png" alt="setting"></p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/New.png" alt="New"><br>根据自己的需求创建相应的远程仓库：<br><code>eg: archlinuxScript</code><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="创建远程仓库"><br>复制远程仓库地址备用<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="复制远程仓库地址"></p><h4 id="5-配置本地git"><a href="#5-配置本地git" class="headerlink" title="5. 配置本地git"></a>5. 配置本地git</h4><p>打开Git Bash，随意创建一文件夹(eg: d:\github)，进入该文件夹并输入命令设置github 账号名和邮箱地址：<br><code>&quot;githubname&quot;：注册的Github账号名称 </code><br><code> &quot;xxxx@xxx.com&quot;：注册Github用的邮箱地址</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;githubname&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;xxxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0git.png" alt="配置本地git"></p><h4 id="6-推送项目到github"><a href="#6-推送项目到github" class="headerlink" title="6. 推送项目到github"></a>6. 推送项目到github</h4><p>推送之前先看一下远程仓库的内容，只有个<code>README.md</code>文件：</p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E5%86%85%E5%AE%B9.png" alt="查看远程仓库的内容"></p><p>推送文件到 步骤4 中所创建的远程仓库<code>archlinuxScript</code>完整流程：<br>a. 首先初始化本地仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>b. 然后添加远程仓库，并查看远程仓库是否添加成功</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">#  git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:yourName/yourRepo.git<br>git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:skillf-qf/archlinuxScript.git<br>git remote -v<br></code></pre></td></tr></table></figure><p>c. 拉取远程仓库到本地仓库，目的让本地仓库和远程仓库保持一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>d. 进入本地仓库（创建的文件夹 d:\github）  并添加一个文件 <code>test.c</code>，模拟修改本地仓库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">touch <span class="hljs-keyword">test</span>.c<br></code></pre></td></tr></table></figure><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="本地仓库文件夹"></p><p>e. 将文件添加到暂存区：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">文件多的话，可以使用 git <span class="hljs-builtin-name">add</span> .  表示当前目录下的所有文件<br>git <span class="hljs-builtin-name">add</span> test.c<br></code></pre></td></tr></table></figure><p>f. 添加提交说明：<br>提交说明类似于代码注释，方便我们记忆项目做了哪些修改。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;update 20210126&quot;</span><br></code></pre></td></tr></table></figure><p>g. 推送之前需要统一本地仓库和远程仓库的分支名，不然会推送出错<br>先看github 远程仓库的默认分支名： <code>main</code><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%90%8D.png" alt="查看远程仓库默认分支名"><br>在看本地仓库的分支名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%90%8D.png" alt="查看本地仓库默认分支名"><br>很明显不一致，原因是以前的 Git 和 Github 的默认分支都叫 master，后来 Github上改为了main，而 Git 没有做修改，此时我们需要手动修改分支名：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git branch -m <span class="hljs-keyword">master</span> <span class="hljs-title">main</span><br></code></pre></td></tr></table></figure><p>i. 推送本地仓库到远程仓库：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure><p>注意：<br><code>origin</code> 是关联的远程仓库的标签，可以使用 <code>git remote -v</code> 查看当前本地已关联的远程仓库，<br><code>main</code> 是 Github 上的默认分支名。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4%E4%B8%80.png" alt="完整步骤一"><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4%E4%BA%8C.png" alt="完整步骤二"></p><p>git本地仓库推送之后，github远程仓库多了个<code>test.c</code>文件<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/%E6%9F%A5%E7%9C%8B%E6%8E%A8%E9%80%81%E5%90%8E%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9.png" alt="查看推送后的远程仓库内容"></p><p><em><strong>谢谢阅读！</strong></em></p><p>【完】</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Github网页打不开与图片无法加载解决方法</title>
    <link href="/p/9c7c3dc6fed9.html"/>
    <url>/p/9c7c3dc6fed9.html</url>
    
    <content type="html"><![CDATA[<p>出现这种情况的原因是因为：<code>DNS投毒</code> 或者叫 <code>DNS污染</code>。</p><p><code>从客户端向DNS服务器发出查询IP的请求，到响应返回到客户端的这段时间里，如果有黑客或者其他一些不可说的设施伪造返回了一个错误的DNS应答，那么用户将不能访问到真正的资源。</code></p><p><code>所以有两种解决方式：1、短期处理方法 2、从根源解决问题</code></p><h5 id="1-短期处理方法-1"><a href="#1-短期处理方法-1" class="headerlink" title="1. 短期处理方法 [1]"></a>1. 短期处理方法 [1]</h5><p>网上绝大部分的回答，都是修改 host 文件，已到达手动指定DNS解析的目的，此方法只能临时解决该问题，等过一段时间之后，会发现又开始打不开网页、图片无法加载、访问很慢等问题。<br>步骤如下</p><h6 id="1-1-获得真实ip地址："><a href="#1-1-获得真实ip地址：" class="headerlink" title="1.1 获得真实ip地址："></a>1.1 获得真实ip地址：</h6><p>打开<a href="https://www.ipaddress.com/">ipaddress.com</a> 的网页，输入想要解析的网址信息，这里输入 <code>github.com</code> 与   <code>avatars.githubusercontent.com</code><br>红色方框地址就是我们想要的目标IP<br><img src="/images/%E5%85%B3%E4%BA%8EGithub%E7%BD%91%E9%A1%B5%E6%89%93%E4%B8%8D%E5%BC%80%E4%B8%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90github.com.png" alt="解析github.com"></p><p><img src="/images/%E5%85%B3%E4%BA%8EGithub%E7%BD%91%E9%A1%B5%E6%89%93%E4%B8%8D%E5%BC%80%E4%B8%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/%E8%A7%A3%E6%9E%90avatars.githubusercontent.com.png" alt="解析avatars.githubusercontent.com"></p><h6 id="1-2-修改host文件"><a href="#1-2-修改host文件" class="headerlink" title="1.2 修改host文件"></a>1.2 修改host文件</h6><p>获得IP之后，找到host文件，<code>C:\Windows\System32\drivers\etc\host</code><br>在文件末尾按如下格式添加即可</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">#  GitHub Host Start<br><span class="hljs-number">140.82.113.3</span>github.com<br><span class="hljs-number">185.199.108.133</span>avatars.githubusercontent.com<br><span class="hljs-number">185.199.109.133</span>avatars.githubusercontent.com<br><span class="hljs-number">185.199.110.133</span>avatars.githubusercontent.com<br><span class="hljs-number">185.199.111.133</span>avatars.githubusercontent.com<br></code></pre></td></tr></table></figure><p>这种方式需要每隔一段时间就去获取一次IP，不然会重新出现打不开网页、无法加载、打开慢等问题。</p><h5 id="2-从根源解决问题-2"><a href="#2-从根源解决问题-2" class="headerlink" title="2. 从根源解决问题 [2]"></a>2. 从根源解决问题 [2]</h5><p>因为国内的DNS很容易被劫持污染无法直接指向目标地址，那么可以尝试直接使用Google提供的DNS服务器地址 <code>8.8.8.8; 8.8.4.4</code>，直接指向目标地址<br><img src="/images/%E5%85%B3%E4%BA%8EGithub%E7%BD%91%E9%A1%B5%E6%89%93%E4%B8%8D%E5%BC%80%E4%B8%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/Google%20DNS.png" alt="Google DNS"><br>但是这种方法会引出新的问题：当访问国内网页时，会出现访问Github时的情况：打不开网页、无法加载、打开慢等问题。</p><p>那么问题回到了起点，有没有两种都适用的方法？<br>很明显是有的！</p><p>在这之前先要弄明白什么是首选(Preferred)DNS服务器与备选(Alternate)DNS服务器：<br>首选DNS和备用DNS都是一种域名系统，正常情况下都是使用首选DNS服务器，只有当首选DNS服务器无法正常解析时，才会使用备选DNS服务器。</p><p><img src="/images/%E5%85%B3%E4%BA%8EGithub%E7%BD%91%E9%A1%B5%E6%89%93%E4%B8%8D%E5%BC%80%E4%B8%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/%E6%B7%B7%E5%90%88DNS%E4%BD%BF%E7%94%A8.png" alt="混合DNS使用"><br>所以我们可以将首选DNS服务器填写国内常用DNS地址[3]：<code>114.114.114.114</code><br>备选DNS服务器填写Google提供的DNS地址：<code>8.8.8.8 或者 8.8.4.4</code></p><blockquote><p>114.114.114.114是国内移动、电信和联通通用的DNS，手机和电脑端都可以使用，干净无广告，解析成功率相对来说更高，国内用户使用的比较多，而且速度相对快、稳定，是国内用户上网常用的DNS。<br>8.8.8.8是Google提供的DNS，该地址是全球通用的，相对来说，更适合国外以及访问国外网站的用户使用。</p></blockquote><p>【参考资料】<br>[1]<a href="https://blog.csdn.net/qq_38132105/article/details/107137558">https://blog.csdn.net/qq_38132105/article/details/107137558</a><br>[2]<a href="https://blog.csdn.net/lr157/article/details/105665798/">https://blog.csdn.net/lr157/article/details/105665798/</a><br>[3]<a href="https://baike.baidu.com/item/114DNS?fr=aladdin#2">https://baike.baidu.com/item/114DNS?fr=aladdin#2</a></p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git同步项目到Github的完整流程——Linux篇</title>
    <link href="/p/1e0af35fd706.html"/>
    <url>/p/1e0af35fd706.html</url>
    
    <content type="html"><![CDATA[<p>最近在写一个archlinux的自动安装脚本，由于需要在不同电脑上切换非常麻烦，所以使用github做版本管理，网上查了很多资料，做一下笔记捋一下git与github的简单使用流程：</p><p><code>测试平台：Windows7 + ArchLinux</code></p><p>首先要理解的是：</p><pre><code class="hljs">    每一个文件夹都可以当成是一个本地仓库（只要包含有 .git）    每一个本地仓库都有一个 .git 包含该仓库的基本设置</code></pre><h4 id="1-安装-git"><a href="#1-安装-git" class="headerlink" title="1. 安装 git"></a>1. 安装 git</h4><p>我这里使用archlinux发行版，直接使用<code>pacman</code>命令安装：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -S git openssh</span><br></code></pre></td></tr></table></figure><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/archlinux%20%E5%AE%89%E8%A3%85git.png" alt="archlinux 安装git"></p><h4 id="2-生成公钥"><a href="#2-生成公钥" class="headerlink" title="2.  生成公钥"></a>2.  生成公钥</h4><p>首先打开你自己的 terminal，然后一样输入命令：<br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;xxxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p>一路按回车即可！<br>生成之后按提示路径找到<code>id_rsa.pub</code>这个文件，即是我们要添加的公钥文件。<br>而<code>id_rsa</code>文件则不用理会，它是根据本地电脑生成的私钥，用来配对github上的公钥。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%85%AC%E9%92%A5%E8%B7%AF%E5%BE%84.png" alt="公钥路径"><br>接下来找到公钥路径，打开 <code>id_rsa.pub</code>文件，并全选文件里面的内容复制出来，以做备用。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%A4%8D%E5%88%B6%E5%85%AC%E9%92%A5%E5%86%85%E5%AE%B9.png" alt="复制公钥内容"></p><h4 id="3-添加公钥到-Github"><a href="#3-添加公钥到-Github" class="headerlink" title="3.  添加公钥到 Github"></a>3.  添加公钥到 Github</h4><p>首先当然是要去<a href="https://github.com/">github官</a>网注册一个账号啦~<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E6%B3%A8%E5%86%8Cgithub%E8%B4%A6%E5%8F%B7.png" alt="注册github账号"><br>按提示注册完之后，登录账号按提示添加公钥：</p><p> <strong><code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key</code></strong></p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.png" alt="添加公钥"><br>进入 <code>SSH keys</code> 添加页面后，按提示将复制出来的公钥内容粘贴到Key栏，最后点击添加按钮，输入登录密码确认添加，到此个人电脑与 Github 的公钥添加已完成。</p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E7%B2%98%E8%B4%B4%E5%85%AC%E9%92%A5%E5%86%85%E5%AE%B9.png" alt="粘贴公钥内容"><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/SSH%20keys%E6%B7%BB%E5%8A%A0%E5%AE%8C%E6%88%90.png" alt="SSH keys添加完成"></p><p>最后验证是否添加成功，输入命令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>回车后按提示输入 <code>yes</code> 回车即可。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E9%AA%8C%E8%AF%81.png" alt="验证"></p><h4 id="4-创建Github远程仓库"><a href="#4-创建Github远程仓库" class="headerlink" title="4.  创建Github远程仓库"></a>4.  创建Github远程仓库</h4><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/setting.png" alt="setting"></p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/New.png" alt="New"><br>根据自己的需求创建相应的远程仓库：<br><code>eg: archlinuxScript</code><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="创建远程仓库"><br>复制远程仓库地址备用<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/a%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="复制远程仓库地址"></p><h4 id="5-配置git"><a href="#5-配置git" class="headerlink" title="5.  配置git"></a>5.  配置git</h4><p>打开 terminal，随意创建一文件夹(eg: /home/skilfl/github)，进入该文件夹并输入命令设置github 账号名和邮箱地址：<br><code>&quot;githubname&quot;：注册的Github账号名称 </code><br><code> &quot;xxxx@xxx.com&quot;：注册Github用的邮箱地址</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;githubname&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;xxxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0git.png" alt="配置本地git"></p><p><em><strong>现在可以随意拉取推送远程仓库了！</strong></em></p><h4 id="6-推送项目到github"><a href="#6-推送项目到github" class="headerlink" title="6.  推送项目到github"></a>6.  推送项目到github</h4><p>推送之前先看一下远程仓库的内容，只有个<code>README.md</code>文件：</p><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9.png" alt="查看远程仓库内容"></p><p>推送文件到 步骤4 中所创建的远程仓库<code>archlinuxScript</code>完整流程：<br>a. 首先初始化本地仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>b. 然后添加远程仓库，并查看远程仓库是否添加成功</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">#  git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:yourName/yourRepo.git<br>git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:skillf-qf/archlinuxScript.git<br>git remote -v<br></code></pre></td></tr></table></figure><p>c. 拉取远程仓库到本地仓库，目的让本地仓库和远程仓库保持一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>d. 进入本地仓库（创建的文件夹 /home/skillf/github）  并添加一个文件 <code>test.c</code>，模拟修改本地仓库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">touch <span class="hljs-keyword">test</span>.c<br></code></pre></td></tr></table></figure><p>e. 将文件添加到暂存区：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">文件多的话，可以使用 git <span class="hljs-builtin-name">add</span> .  表示当前目录下的所有文件<br>git <span class="hljs-builtin-name">add</span> test.c<br></code></pre></td></tr></table></figure><p>f. 添加提交说明：<br>提交说明类似于代码注释，方便我们记忆项目做了哪些修改，也可为空。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;update 20210126&quot;</span><br></code></pre></td></tr></table></figure><p>g. 推送之前需要统一本地仓库和远程仓库的分支名，不然会推送出错<br>先看github 远程仓库的默认分支名： <code>main</code><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%90%8D.png" alt="查看远程仓库默认分支名"><br>在看本地仓库的分支名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%90%8D.png" alt="查看本地仓库默认分支名"><br>很明显不一致，原因是以前的git和github的默认分支都叫 master，后来github上改为了main，而git没有做修改，此时我们需要手动修改分支名：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git branch -m <span class="hljs-keyword">master</span> <span class="hljs-title">main</span><br></code></pre></td></tr></table></figure><p>i. 推送本地仓库到远程仓库：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure><p>注意：<br><code>origin</code> 是关联的远程仓库的标签，可以使用 <code>git remote -v</code> 查看当前本地已关联的远程仓库，<br><code>main</code> 是 Github 上的默认分支名。<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4%E4%B8%80.png" alt="完整步骤一"><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4%E4%BA%8C.png" alt="完整步骤二"><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4%E4%B8%89.png" alt="完整步骤三"><br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4%E5%9B%9B.png" alt="完整步骤四"></p><p>git本地仓库推送之后，github远程仓库多了个<code>test.c</code>文件<br><img src="/images/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/%E6%9F%A5%E7%9C%8B%E6%8E%A8%E9%80%81%E5%90%8E%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9.png" alt="查看推送后的远程仓库内容"></p><p><em><strong>谢谢阅读！</strong></em></p><p>【完】</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AD10 输出Gerber Files</title>
    <link href="/p/18b2cf5bddf2.html"/>
    <url>/p/18b2cf5bddf2.html</url>
    
    <content type="html"><![CDATA[<h1 id="输出-Gerber-Files-需要设置-Gerber-Files-两次，NC-Drill-Files-一次。"><a href="#输出-Gerber-Files-需要设置-Gerber-Files-两次，NC-Drill-Files-一次。" class="headerlink" title="输出 Gerber Files 需要设置 Gerber Files 两次，NC Drill Files 一次。"></a><code>输出 Gerber Files 需要设置 Gerber Files 两次，NC Drill Files 一次。</code></h1><h3 id="第一轮设置"><a href="#第一轮设置" class="headerlink" title="第一轮设置"></a>第一轮设置</h3><h4 id="1-打开Gerber-Files设置"><a href="#1-打开Gerber-Files设置" class="headerlink" title="1. 打开Gerber Files设置"></a>1. 打开Gerber Files设置</h4><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E6%89%93%E5%BC%80Gerber%20Files%E8%AE%BE%E7%BD%AE%E4%B8%80.png" alt="打开Gerber Files设置一"></p><h4 id="1-1-通用"><a href="#1-1-通用" class="headerlink" title="1.1 通用"></a>1.1 通用</h4><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%80%9A%E7%94%A8%E4%B8%80.png" alt="通用一"></p><p>1.2 层</p><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E5%B1%82%E4%B8%80.png" alt="层一"></p><p>1.3 钻孔图层</p><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%92%BB%E5%AD%94%E5%9B%BE%E5%B1%82%E4%B8%80.png" alt="钻孔图层一"></p><p>1.4 光圈</p><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E5%85%89%E5%9C%88%E4%B8%80.png" alt="光圈一"></p><p>1.5 高级<br><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%AB%98%E7%BA%A7%E4%B8%80.png" alt="高级一"></p><p>确定之后会打开一个Cam后缀文件，右键上方文件名<strong>关闭不保存</strong>即可。</p><h3 id="第二轮设置："><a href="#第二轮设置：" class="headerlink" title="第二轮设置："></a>第二轮设置：</h3><h4 id="2-打开Gerber-Files设置"><a href="#2-打开Gerber-Files设置" class="headerlink" title="2. 打开Gerber Files设置"></a>2. 打开Gerber Files设置</h4><p>![打开Gerber Files设置二](/images/AD10%20输出Gerber%20Files/打开Gerber Files设置二.png)</p><p>2.1 通用<br><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%80%9A%E7%94%A8%E4%BA%8C.png" alt="通用二"></p><p>2.2 层</p><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E5%B1%82%E4%BA%8C.png" alt="层二"></p><p>2.3 钻孔图层<br><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%92%BB%E5%AD%94%E5%9B%BE%E5%B1%82%E4%BA%8C.png" alt="钻孔图层二"></p><p>2.4 光圈<br><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E5%85%89%E5%9C%88%E4%BA%8C.png" alt="光圈二"></p><p>2.5 高级<br><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%AB%98%E7%BA%A7%E4%BA%8C.png" alt="高级二"></p><p>确定之后依旧会自动打开一个Cam文件，右键上方文件名<strong>关闭不保存</strong>即可。</p><h3 id="第三轮设置："><a href="#第三轮设置：" class="headerlink" title="第三轮设置："></a>第三轮设置：</h3><h4 id="3-打开-NC-Drill-Files-设置"><a href="#3-打开-NC-Drill-Files-设置" class="headerlink" title="3. 打开 NC Drill Files 设置"></a>3. 打开 NC Drill Files 设置</h4><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E6%89%93%E5%BC%80%20NC%20Drill%20Files%20%E8%AE%BE%E7%BD%AE.png" alt="打开 NC Drill Files 设置"></p><p>3.1 选项</p><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E9%80%89%E9%A1%B9.png" alt="选项"></p><p>点击确定之后需要再次确认两次：<br><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E7%A1%AE%E5%AE%9A%E4%B8%80.png" alt="确定一"></p><p><img src="/images/AD10%20%E8%BE%93%E5%87%BAGerber%20Files/%E7%A1%AE%E5%AE%9A%E4%BA%8C.png" alt="确定二"></p><p>点击确定之后，自动生成Cam文件，依旧<strong>关闭不保存</strong>即可。</p><p>最终会在PCB工程文件夹里生成一个 <strong><code>&quot; Project Outputs for xxx &quot;</code></strong> ，这个文件夹即是光绘文件的内容，打包发送给PCB厂商即可打板。<br>完~<br>谢谢阅读~</p>]]></content>
    
    
    <categories>
      
      <category>AD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据Gentoo handbook安装——KDE桌面+NVIDIA显卡</title>
    <link href="/p/852977a19e28.html"/>
    <url>/p/852977a19e28.html</url>
    
    <content type="html"><![CDATA[<p>在上一篇中<a href="https://www.jianshu.com/p/27564e1d860b">根据Gentoo handbook安装——gentoo基本系统+UEFI引导</a>，已经装好了gentoo基本系统，这一篇开始安装KDE桌面，同时安装NVIDIA的显卡驱动。</p><ul><li>切换语言<br>因为在命令行下，中文有可能会乱码，所以先临时切换回英文方便安装软件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LANG=en_US.UTF-8<br></code></pre></td></tr></table></figure></li><li>配置网络<br>根据上一篇中的内容，如果是台式机那么此时已经可以联网了则跳过此步骤，如果是笔记本则需要配置无线网络<br>步骤如下：<br><code>创建 WIFI配置文件 /etc/wpa_supplicant/wpa_supplicant.conf 内容如下</code><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#  The below line not be changed otherwise wpa_supplicant refuses to work</span><br><span class="hljs-attr">ctrl_interface</span>=<span class="hljs-string">/var/run/wpa_supplicant</span><br><br><span class="hljs-comment">#  Ensure that only root can read the WPA configuration</span><br><span class="hljs-attr">ctrl_interface_group</span>=<span class="hljs-string">0</span><br><br><span class="hljs-comment">#  Let wpa_supplicant take care of scanning and AP selection</span><br><span class="hljs-attr">ap_scan</span>=<span class="hljs-string">1</span><br><br><span class="hljs-comment">#  Simple case: WPA-PSK, PSK as an ASCII passphrase, allow all valid ciphers</span><br><span class="hljs-attr">network</span>=<span class="hljs-string">&#123;</span><br>  <span class="hljs-attr">ssid</span>=<span class="hljs-string">&quot;这里填写WIFI名称&quot;</span><br>  <span class="hljs-attr">psk</span>=<span class="hljs-string">&quot;这里填写WIFI密码&quot;</span><br><span class="hljs-comment">  # The higher the priority the sooner we are matched</span><br>  <span class="hljs-attr">priority</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><code>解锁WIFI并启用WIFI</code><br><code>注意：wlp0s20f3为本机wifi端口，具体名称以自己的笔记本为主，查看 ls /sys/class/net</code><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rfkill</span> unblock <span class="hljs-literal">all</span><br><span class="hljs-attribute">ip</span> link set dev wlp<span class="hljs-number">0</span>s<span class="hljs-number">20</span>f<span class="hljs-number">3</span> up<br></code></pre></td></tr></table></figure><code>连接 WIFI 并自动分配 IP</code><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wpa_supplicant</span> -B -i wlp<span class="hljs-number">0</span>s<span class="hljs-number">20</span>f<span class="hljs-number">3</span> -c /etc/wpa_supplicant/wpa_supplicant.conf<br><span class="hljs-attribute">dhcpcd</span> wlp<span class="hljs-number">0</span>s<span class="hljs-number">20</span>f<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><code>检测网络连接</code><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span> www.baidu.com<br></code></pre></td></tr></table></figure></li></ul><ul><li>安装编辑软件<br>开始之前先装一个 <strong><code>vim</code></strong> ，方便后续修改配置(当然用 <strong><code>nano</code></strong> 也是一样的，看个人喜好)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge app-editors/vim<br></code></pre></td></tr></table></figure></li><li>创一个普通用户：<br>登录kde(sddm)时不能用root帐号<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -m -G users,wheel,audio,lp,cdrom,portage,cron -s /bin/bash skillf<br>passwd skillf　＃设置用户密码<br></code></pre></td></tr></table></figure><h4 id="1-选择桌面配置文件"><a href="#1-选择桌面配置文件" class="headerlink" title="1. 选择桌面配置文件"></a>1. 选择桌面配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eselect profile list<br></code></pre></td></tr></table></figure><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/%E6%A1%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8.png" alt="桌面配置文件列表"><br>选择kde的配置文件，即后面带有 <strong><code>plasma</code></strong> 的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eselect profile <span class="hljs-built_in">set</span> 19<br></code></pre></td></tr></table></figure><h4 id="2-启用相关服务"><a href="#2-启用相关服务" class="headerlink" title="2. 启用相关服务"></a>2. 启用相关服务</h4>如果使用桌面等 <a href="https://wiki.gentoo.org/wiki/Profile_(Portage)" title="简介（Portage）">配置文件</a>，则会自动安装其中一部分，但仍需要正确设置。这些服务基本信息是：</li></ul><ul><li><p>  <a href="https://wiki.gentoo.org/wiki/D-Bus" title="d总线">D-Bus</a>：允许使用D-Bus消息总线系统。</p></li><li><p>  <a href="https://wiki.gentoo.org/wiki/Polkit" title="Polkit">polkit</a>：启用polkit框架以控制系统范围服务的权限。</p></li><li><p>  <a href="https://wiki.gentoo.org/wiki/Udisks" title="Udisks">udisks</a>：支持某些与存储相关的服务。</p></li><li><p>  <a href="https://wiki.gentoo.org/wiki/Eudev" title="Eudev">eudev</a>：Gentoo的udev分支，旨在获得更好的兼容性。它是桌面/等离子配置文件的默认设置。</p></li><li><p>  <a href="https://wiki.gentoo.org/wiki/ConsoleKit" title="ConsoleKit的">ConsoleKit</a>：用于定义和跟踪用户，登录会话和席位的框架。它是桌面/等离子配置文件的默认设置。</p></li></ul><p><code>至于怎么启用上述服务，请接着往下看！</code></p><h5 id="2-1-修改-USE-flags"><a href="#2-1-修改-USE-flags" class="headerlink" title="2.1 修改 USE flags"></a>2.1 修改 USE flags</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/portage/make.conf<br>＃打开make.conf文件之后，找到 USE 变量，<br>＃如果没有USE，则在最后一行添加USE，并添加以下标志<br>USE=<span class="hljs-string">&quot;dbus policykit udisks  eudev consolekit&quot;</span><br></code></pre></td></tr></table></figure><p>顺便确认一下编译时用的cpu核心数，根据个人电脑修改： <strong><code>CPU核心数+1</code></strong> ，<br>我这里是：  <strong><code>MAKEOPTS=&quot;-j9&quot;</code></strong><br>如果文件<code> /etc/portage/make.conf</code> 中不存在该变量，则需要手动输入。</p><h5 id="2-2-确保内核开启了对udisks的支持"><a href="#2-2-确保内核开启了对udisks的支持" class="headerlink" title="2.2 确保内核开启了对udisks的支持"></a>2.2 确保内核开启了对udisks的支持</h5><ul><li>查看并修改内核的方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/src/linux<br>make menuconfig<br></code></pre></td></tr></table></figure>执行完上述命令后，此时将出现一个kernel图形界面，按照下面的格式进行启用内核服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  KERNEL udisks2</span><br>General setup  ---&gt;<br>    [*] Support <span class="hljs-keyword">for</span> paging of anonymous memory (swap)<br>Device Drivers  ---&gt;<br>    &lt; &gt; ATA/ATAPI/MFM/RLL support (DEPRECATED)  ---&gt;<br>File Systems --&gt;<br>    Native Language Support --&gt;<br>        &lt;*&gt; NLS UTF8<br>    Pseudo filesystems  ---&gt;<br>        -*- Tmpfs virtual memory file system support (former shm fs)<br>        [*]   Tmpfs POSIX Access Control Lists<br></code></pre></td></tr></table></figure></li><li>修改完成并退出之后，需要重新编译内核：<br><code>make -j9 加快编译速度，9为CPU核心数+1</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j9 &amp;&amp; make modules_install<br></code></pre></td></tr></table></figure></li><li>内核完成编译后，将内核映像复制到 /boot/。这由<code>make install</code>命令自动处理：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make install<br></code></pre></td></tr></table></figure></li><li>重新引导一下：<br><code>注意： 在此之前需要确保引导分区挂载成功，上一篇文章中，引导分区挂载在 /boot/efi 目录，执行 mount 命令查看 /boot/efi 是否被挂载，如果不存在挂载，则需要重新挂载引导分区。</code></li></ul><p>确保引导分区已成功挂载之后，重新配置引导：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-mkconfig -o /boot/efi/grub/grub.cfg<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/%E7%A1%AE%E8%AE%A4%E6%8C%82%E8%BD%BD%E5%BC%95%E5%AF%BC%E5%88%86%E5%8C%BA.png" alt="确认挂载引导分区"></p><p>一切都确认好了之后，开始更新系统以使更改生效，这需要点时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet --changed-use --deep @world<br></code></pre></td></tr></table></figure><h5 id="2-3-设置相关服务默认启动"><a href="#2-3-设置相关服务默认启动" class="headerlink" title="2.3 设置相关服务默认启动"></a>2.3 设置相关服务默认启动</h5><p>至此相关系统服务已安装完，接下来需要设置默认启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rc-update add dbus default<br>rc-update add udev default<br>rc-update add consolekit default<br></code></pre></td></tr></table></figure><h4 id="3-安装X-server"><a href="#3-安装X-server" class="headerlink" title="3. 安装X server"></a>3. 安装X server</h4><p>添加USE flags</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/portage/make.conf<br>＃在USE最后面添加一个 X<br>USE=<span class="hljs-string">&quot;X&quot;</span><br>＃ 鼠标键盘触摸板标志<br>INPUT_DEVICES=<span class="hljs-string">&quot;libinput&quot;</span>  ＃ 笔记本用户需添加：synaptics<br>＃NVIDIA显卡：将安装正确版本的驱动 x11-drivers/nvidia-drivers<br>VIDEO_CARDS=<span class="hljs-string">&quot;nvidia&quot;</span><br></code></pre></td></tr></table></figure><p>检查kernel：</p><ul><li>输入驱动支持<br>需要通过更改内核配置来激活对事件接口（CONFIG_INPUT_EVDEV）的支持。如果您不知道如何设置内核，请阅读“ <a href="https://wiki.gentoo.org/wiki/Kernel/Gentoo_Kernel_Configuration_Guide" title="内核/ Gentoo内核配置指南">内核配置指南”</a>。<br>进入内核界面： <strong><code>cd /usr/src/linux</code></strong>   -&gt;  <strong><code>make menuconfig</code></strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃Enabling evdev <span class="hljs-keyword">in</span> the kernel<br>Device Drivers ---&gt;<br>  Input device support ---&gt;<br>  &lt;*&gt;  Event interface<br></code></pre></td></tr></table></figure></li><li>内核模式设置<br>现代开源视频驱动程序依赖于内核模式设置（KMS）。KMS提供了改进的图形启动，闪烁更少，用户切换速度更快，内置帧缓冲控制台，从控制台到Xorg的无缝切换以及其他功能。</li></ul><p> <strong><code>注意：KMS与传统帧缓冲驱动程序冲突，必须在内核配置中保持禁用状态。</code></strong><br>首先为KMS准备内核。无论使用哪个Xorg视频驱动程序，此步骤均为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Device Drivers ---&gt;<br>   Graphics support ---&gt;<br>      Frame Buffer Devices ---&gt;<br>         &lt;*&gt; Support <span class="hljs-keyword">for</span> frame buffer devices ---&gt;<br>         <span class="hljs-comment">## (Disable all drivers, including VGA, Intel, nVidia, and ATI, except EFI-based Framebuffer Support, only if you are using UEFI)</span><br><br>    <span class="hljs-comment">## (Further down, enable basic console support. KMS uses this.)</span><br>    Console display driver support ---&gt;<br>      &lt;*&gt;  Framebuffer Console Support<br></code></pre></td></tr></table></figure><p>接下来，配置内核以使用适当的视频卡KMS驱动程序。英特尔，nVidia和AMD / ATI是最常用的卡，因此请按照以下每张卡的代码列表进行操作。</p><p>对于Intel卡，请参阅<a href="https://wiki.gentoo.org/wiki/Intel#Kernel" title="英特尔">Intel文章</a>的<a href="https://wiki.gentoo.org/wiki/Intel#Kernel" title="英特尔">内核部分</a>。</p><p><strong>对于nVidia卡：</strong><br>这里用的闭源驱动nvidia<br>进入内核界面： <strong><code>cd /usr/src/linux</code></strong>   -&gt;  <strong><code>make menuconfig</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[*] Enable loadable module support ---&gt; ＃开启可加载模块支持<br>Processor <span class="hljs-built_in">type</span> and features ---&gt;　＃开启 MTRR 支持<br>    [*] MTRR (Memory Type Range Register) support<br>Device Drivers ---&gt;<br>   Graphics support ---&gt;　<br>　　　 -*- /dev/agpgart (AGP Support) ---&gt;　＃启用agpgart支持<br>      &lt; &gt; Nouveau (nVidia) cards　＃确保禁用nouveau驱动程序：<br>      Frame buffer Devices ---&gt; ＃禁用对内核驱动程序的支持<br>            &lt;*&gt; Support <span class="hljs-keyword">for</span> frame buffer devices ---&gt;<br>            &lt; &gt;   nVidia Framebuffer Support<br>            &lt; &gt;   nVidia Riva support<br></code></pre></td></tr></table></figure><ul><li>修改之后的内核需要重新编译！<br>退出配置并开始编译过程：<br><code>make -j9 加快编译速度，9为CPU核心数+1</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j9 &amp;&amp; make modules_install<br></code></pre></td></tr></table></figure></li><li>内核完成编译后，将内核映像复制到 /boot/。这由<code>make install</code>命令自动处理：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make install<br></code></pre></td></tr></table></figure></li><li>重新引导一下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-mkconfig -o /boot/efi/grub/grub.cfg<br></code></pre></td></tr></table></figure></li></ul><p><strong>一切就绪，开始安装 X server</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet x11-base/xorg-server<br></code></pre></td></tr></table></figure><p>安装完成后，需要重新初始化一些环境变量才能继续。使用此命令获取配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">env-update<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ul><li>NVidia用户：<br>NVidia驱动程序仅在重新启动后才能工作，因此请确保在运行nvidia-xconfig后重新启动系统：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-xconfig<br></code></pre></td></tr></table></figure></li><li>可以并且建议将OpenGL渲染器设置为硬件渲染器而不是软件渲染器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eselect opengl <span class="hljs-built_in">set</span> nvidia<br></code></pre></td></tr></table></figure></li><li>将需要访问视频卡的用户skillf(开始前创建的用户)添加到视频组：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpasswd -a skillf video<br></code></pre></td></tr></table></figure></li><li>为防止nouveau 与 nvidia冲突，需要将nouveau禁止加载，将nouveau模块列入黑名单：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/modprobe.d/nouveau-blacklist.conf<br>＃在文件中加入以下语句即可<br>blacklist nouveau<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-安装kde"><a href="#4-安装kde" class="headerlink" title="4. 安装kde"></a>4. 安装kde</h4><p>这将安全全部plasma套件，会需要相当长的时间，可以休息一下，或者放到睡觉前操作~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet kde-plasma/plasma-meta<br></code></pre></td></tr></table></figure><h4 id="5-配置桌面显示管理器SDDM"><a href="#5-配置桌面显示管理器SDDM" class="headerlink" title="5. 配置桌面显示管理器SDDM"></a>5. 配置桌面显示管理器SDDM</h4><p>sddm已经包含在plasma套件里面了，但需要指定一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/conf.d/xdm<br>DISPLAYMANAGER=<span class="hljs-string">&quot;sddm&quot;</span><br></code></pre></td></tr></table></figure><p>修改完之后，需要设置开机默认开启sddm，否则会直接进入命令行ttys，然后需要手动打开登录界面，才能进入KDE。<br>这并不是我们想要的，此时需要自动打开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rc-update add xdm default<br></code></pre></td></tr></table></figure><h4 id="6-KDE工具包"><a href="#6-KDE工具包" class="headerlink" title="6.KDE工具包"></a>6.KDE工具包</h4><p><a href="https://packages.gentoo.org/packages/kde-apps/kde-apps-meta">KDE-应用/ KDE的应用程式的元</a>包提供了完整的应用程序包：</p><p>如果对于KDE比较了解，则可以装一些常用的工具即可，这里了为方便，使用懒人法全套安装啦~<br>温馨提示：<br>如果手头上没事做的话，这里建议不要使用 <code>--quiet</code>选项，或者放在睡前执行，否则会让你的觉得卡半天都没有动静，事实上它在疯狂编译中！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet kde-apps/kde-apps-meta<br></code></pre></td></tr></table></figure><h4 id="7-安装字体"><a href="#7-安装字体" class="headerlink" title="7. 安装字体"></a>7. 安装字体</h4><p>默认的字体会导致中文乱码，此时应该装支持中文的字体即可解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask media-fonts/wqy-zenhei wqy-bitmapfont wqy-microhei wqy-unibit<br></code></pre></td></tr></table></figure><p>获取安装所有字体的配置文件列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eselect fontconfig list<br></code></pre></td></tr></table></figure><p>选择刚才安装的带有 <strong><code>wqy</code></strong> 的字体左边的序号（以自己电脑为准）启用它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eselect fontconfig <span class="hljs-built_in">enable</span> 23 24 43<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/%E5%AD%97%E4%BD%93%E5%88%97%E8%A1%A8.png" alt="字体列表"></p><h4 id="8-安装-fcitx-输入法"><a href="#8-安装-fcitx-输入法" class="headerlink" title="8. 安装 fcitx 输入法"></a>8. 安装 fcitx 输入法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask app-i18n/fcitx kcm-fcitx<br>＃前者是软件，后者是桌面配置工具，不安装配置工具，则在桌面环境下不能使用输入法图形化设置。<br></code></pre></td></tr></table></figure><p>配置输入法，在用户目录下添加 <strong><code>.xprofile</code></strong> 文件，并添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /home/skillf/.xprofile<br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dbus-launch --sh-syntax --exit-with-session)</span>&quot;</span><br><span class="hljs-built_in">export</span> XMODIFIERS=<span class="hljs-string">&quot;@im=fcitx&quot;</span><br><span class="hljs-built_in">export</span> QT_IM_MODULE=<span class="hljs-string">&quot;fcitx&quot;</span><br><span class="hljs-built_in">export</span> GTK_IM_MODULE=<span class="hljs-string">&quot;fcitx&quot;</span><br></code></pre></td></tr></table></figure><h4 id="9-重启之后的一些设置与检查"><a href="#9-重启之后的一些设置与检查" class="headerlink" title="9. 重启之后的一些设置与检查"></a>9. 重启之后的一些设置与检查</h4><p>完成之后重启，即可进入KDE啦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><p>重启后，输入开头新创建的用户密码登录系统，打开konsole终端并安装一个<code>sudo</code>，方便以后获取管理员权限：<br><code>su</code>进入root用户（管理员用户）<br><code>exit</code>退出root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su<br></code></pre></td></tr></table></figure><ul><li>安装 sudo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask sudo<br></code></pre></td></tr></table></figure></li><li>配置sudo<br>sudo的配置文件是 <code>/etc/sudoers</code>，但是该文件规定必须在root下使用<code>visudo</code>命令编辑：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">visudo<br></code></pre></td></tr></table></figure>这里会打开/etc/sudoers文件，找到下面这行<br><code># %wheel ALL=(ALL) ALL</code><br>去掉开头的<code>#</code>保存文件退出即可！<br>意思是：<code>允许wheel用户组中的用户执行所有命令  </code>（我们开头新建的用户skillf是属于wheel组的），但是需要输入密码。</li></ul><blockquote><p>当然也可以设置不需要输入密码：<code># %wheel ALL=(ALL) NOPASSWD: ALL</code>，只是为了安全起见不建议使<br>用！<br>具体更多的配置内容可以去看：<code>/etc/sudoers</code></p></blockquote><p>设置完之后就退出root用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><ul><li>显示系统信息：<br>需要安装<code>screenfetch</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo emerge --ask screenfetch<br>screenfetch<br></code></pre></td></tr></table></figure><code>sudo提示的密码是指当前用户的密码，例如我在skillf用户下运行的sudo，那么密码就是skillf用户的密码，输入并回车即可。在输入密码之后，短时间内不需要再次输入密码，可直接运行sudo。</code><br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/%E9%85%8D%E7%BD%AE%E5%9B%BE.png" alt="配置图"></li><li>显卡测试<br>检查OpenGL渲染器设置为硬件渲染器是否成功：<br>需要安装 <code>x11-apps/mesa-progs</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo emerge --ask x11-apps/mesa-progs<br>glxinfo | grep rendering<br></code></pre></td></tr></table></figure><code>提示：direct rendering: Yes 表明启动正常</code><br>显卡FPS测试  <strong><code>glxgears</code></strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo glxgears<br></code></pre></td></tr></table></figure><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/%E6%98%BE%E5%8D%A1%E6%B5%8B%E8%AF%95.png" alt="显卡测试"><br>最后来一张KDE桌面图～</li></ul><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/KDE%E6%A1%8C%E9%9D%A2.png" alt="KDE桌面"></p><p>至此，gentoo的KDE桌面+nvidia显卡已安装完成！</p><p> <strong><code>温馨提示：如果出现 kde 登录界面输入密码之后重新回到登录界面，此时不要慌，可以按快捷键 Ctrl+Alt+F1 进入tty1 命令行界面</code></strong></p><p>在tty1下会提示登录，直接用 <code>root</code> 用户登录，之后先查看一下 sddm 的登录历史：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">vim /<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/sddm.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p>或者直接用 <code>grep</code>查看带<code>(EE)</code>的行即可明白哪里出现了错误。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/sddm.<span class="hljs-keyword">log</span> |grep <span class="hljs-string">&quot;(EE)&quot;</span><br></code></pre></td></tr></table></figure><p>错误提示例如：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">...<br>[<span class="hljs-number">03</span>:<span class="hljs-number">36</span>:<span class="hljs-number">24.762</span>] (<span class="hljs-symbol">EE</span>) <span class="hljs-symbol">HELPER</span>: chdir( /home/skillf ) failed for user: <span class="hljs-string">&quot;skillf&quot;</span><br>[<span class="hljs-number">03</span>:<span class="hljs-number">36</span>:<span class="hljs-number">24.762</span>] (<span class="hljs-symbol">EE</span>) <span class="hljs-symbol">HELPER</span>: verify directory exist and has sufficient permissions<br>...<br></code></pre></td></tr></table></figure><p>这里提示的是切换skillf用户的家目录时出现了问题，<br>那么我们可以直接去到家目录的上一级目录并查看情况</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/home</span><br><span class="hljs-keyword">ls</span> -al<br></code></pre></td></tr></table></figure><p>此时可能出现的情况：</p><p>1、skillf的家目录不存在，自然切换失败</p><p>查看家用户的名字：<code>cat /etc/passwd |grep &quot;skillf&quot;</code>，找到 /home 后面的目录既是家目录，<br>例如 ：/home/skillf</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">&quot;# 此时可以切换到skilf用户，并创建家目录，这样的好处是，创建的目录拥有者就是skillf用户<br><span class="hljs-keyword">su</span> skillf<br><span class="hljs-keyword">mkdir</span> ./skillf<br></code></pre></td></tr></table></figure><p>2、家目录的权限不是skillf用户，所以没有权限进去家目录</p><p>因此可以直接更改家目录的拥有者</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;# skillf:skillf 拥有者和群体的使用者均设为 skillf，最后的 skillf 是家目录</span><br>chown skillf:skillf skillf<br></code></pre></td></tr></table></figure><p>最后切换回root用户重启即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">su root</span><br><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><p>重启完成之后，输入密码，此时即可进入熟悉的kde桌面啦~</p><p>遇事不慌，多去 /var/log目录下，查看各种问题的历史慢慢分析~</p><p>谢谢阅读～</p><p>上一篇：<a href="https://www.jianshu.com/p/27564e1d860b">根据Gentoo handbook安装——gentoo基本系统+UEFI引导</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Gentoo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gentoo</tag>
      
      <tag>KDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据Gentoo handbook安装——gentoo基本系统+UEFI引导</title>
    <link href="/p/2f73d7ce288e.html"/>
    <url>/p/2f73d7ce288e.html</url>
    
    <content type="html"><![CDATA[<ul><li>折腾gentoo有段时间， 趁着放假，做做笔记；根据官网的 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64">Gentoo Handbook</a> 来一步步记录装gentoo的详细过程。<h4 id="A-安装前的一些准备"><a href="#A-安装前的一些准备" class="headerlink" title="A.安装前的一些准备"></a>A.安装前的一些准备</h4></li></ul><p> <strong><code>注意：最小CD镜像的安装，必须要在联网下进行！！！</code></strong><br> <strong><code>另外：安装过程中提示 需要添加 USE 时，请按照提示在 /etc/protage/make.conf 文件中添加 USE=“ 提示的USE关键字 ” 即可。</code></strong></p><p>如果提示 <strong><code>needs updating</code></strong><br>则运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">etc-update<br></code></pre></td></tr></table></figure><p>然后输入 <strong><code>-3</code></strong>  -&gt; 回车 -&gt; yes ,之后在重新装一次即可。</p><h6 id="1-本次安装使用台式机电脑"><a href="#1-本次安装使用台式机电脑" class="headerlink" title="1.本次安装使用台式机电脑"></a>1.本次安装使用台式机电脑</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CPU</span>: Intel Core i<span class="hljs-number">7</span>-<span class="hljs-number">7700</span> @ <span class="hljs-number">8</span>x <span class="hljs-number">4</span>.<span class="hljs-number">2</span>GHz<br><span class="hljs-attribute">GPU</span>: GeForce GTX <span class="hljs-number">1060</span> <span class="hljs-number">6</span>GB<br></code></pre></td></tr></table></figure><h6 id="2-下载镜像-amd64"><a href="#2-下载镜像-amd64" class="headerlink" title="2.下载镜像(amd64)"></a>2.下载镜像(amd64)</h6><p><strong>gentoo的安装使用了最小镜像+stage3的方式</strong><br>这里只下载最小镜像 <a href="http://distfiles.gentoo.org/releases/amd64/autobuilds/20180920T214502Z/install-amd64-minimal-20180920T214502Z.iso">install-amd64-minimal-20180920T214502Z.iso</a> 即可，文件网址可能失效，建议去<a href="https://gentoo.org/">Gentoo官网</a><br>下载。<br> <strong><code>最小CD镜像：Minimal Installation CD 2018-09-20</code></strong><br> <strong><code>stage archives: Stage3 2018-09-20</code></strong></p><p>默认镜像源是国外的服务器，所以下载镜像时，需要选择国内镜像源来下载，否则奇慢无比！</p><ul><li>进入官网下载页面<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E8%BF%9B%E5%85%A5%E4%B8%8B%E8%BD%BD%E9%A1%B5%E9%9D%A2.png" alt="进入下载页面.png"></li><li>选择国内镜像源目录<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%95%9C%E5%83%8F%E6%BA%90%E7%9B%AE%E5%BD%95.png" alt="镜像源目录.png"></li><li>选择镜像源<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F%E6%BA%90.png" alt="选择镜像源.png"><br>点击镜像源之后进入文件下载网站。然后依次点击：</li></ul><p> <strong><code>releases -&gt; amd64 -&gt; autobuilds -&gt; current-install-amd64-minimal </code></strong><br>最后来到下面这个页面，点击如图所示文件，即可下载最新镜像文件：<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD.png" alt="镜像下载"></p><h6 id="3-刻录优盘"><a href="#3-刻录优盘" class="headerlink" title="3.刻录优盘"></a>3.刻录优盘</h6><p>下载完镜像文件后，在linux下可以采用dd镜像写入方式，在win下可以使用一些常见的优盘启动制作软件，比如：rufus等。</p><ul><li><p>Linux下使用 <strong><code>dd</code></strong> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃linux 下<br>$ sudo <span class="hljs-keyword">if</span>=iospath of=usb<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/dd.png" alt="dd"></p></li><li><p>windows下使用 rufus 软件：<br>选择分区方案： <code>&#39;用于UEFI 计算机的GPT分区方案&#39;</code></p><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%89%E6%8B%A9%E5%88%86%E5%8C%BA%E6%96%B9%E6%A1%88.png" alt="选择分区方案"></p></li></ul><p>选择下载好的镜像文件</p><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6.png" alt="选择镜像文件"><br>底部会提示使用的镜像文件，然后点击 开始<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C.png" alt="开始制作"><br>选择镜像写入方式<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F.png" alt="选择镜像写入方式"><br>写入中<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="写入中"><br>写入完成后提示准备就绪，关闭软件即可<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E5%86%99%E5%85%A5%E5%AE%8C%E6%88%90.png" alt="写入完成"></p><h4 id="B-开始安装"><a href="#B-开始安装" class="headerlink" title="B. 开始安装"></a>B. 开始安装</h4><p>将刻录的优盘插入待安装的电脑，然后使用默认gentoo内核启动，<code>由于版本更新，启动方式可能不同。</code><br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/gentoo%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8.png" alt="gentoo内核启动"><br>启动之后<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E5%90%AF%E5%8A%A8%E4%B9%8B%E5%90%8E.png" alt="启动之后"></p><h6 id="1-检查网络"><a href="#1-检查网络" class="headerlink" title="1.检查网络"></a>1.检查网络</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com<br></code></pre></td></tr></table></figure><p>执行之后，能ping通的话，说明可以正常连上网络：<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/ping.png" alt="ping"></p><p>如果是台式机用的有线网，所有基本上不用怎么配置，<br>但如果是笔记本的话，则要配置一下无线网络，具体的配置方式请看 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64">Gentoo Handbook</a> ，这里仅作参考：<br><code>系统安装优盘启动之后默认是锁定wifi的，以我的笔记本为例：</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">rfkill list <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/wifi%E9%94%81%E5%AE%9A.png" alt="wifi锁定"></p><p><code>此时需要解锁:</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">rfkill unblock <span class="hljs-keyword">all</span><br>rfkill list <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/wifi%E8%A7%A3%E9%94%81.png" alt="wifi解锁"></p><p><code>然后启用wifi端口:</code><br><code>注意：wlp0s20f3 为本机WiFi网卡名称，具体的名称以自己的为主，查看网卡名称的命令： ls /sys/class/net</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span> link set dev wlp<span class="hljs-number">0</span>s<span class="hljs-number">20</span>f<span class="hljs-number">3</span> up<br></code></pre></td></tr></table></figure><p><code>最后连接wifi：</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">net</span>-setup wlp<span class="hljs-number">0</span>s<span class="hljs-number">20</span>f<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><code>根据提示输入wifi 名称和密码即可。</code><br><code>检查是否连上wifi:</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iw</span> dev wlp<span class="hljs-number">0</span>s<span class="hljs-number">20</span>f<span class="hljs-number">3</span> link<br></code></pre></td></tr></table></figure><p><code>如果没连上会提示 No connect,否则会出现连上的wifi信息。</code></p><h6 id="2-磁盘分区"><a href="#2-磁盘分区" class="headerlink" title="2.磁盘分区"></a>2.磁盘分区</h6><p><strong>关于磁盘分区，需要根据自己的硬盘做出调整，以下的分区方式仅供参考！</strong><br>此时的电脑上有一个M.2的固态，和两个机械硬盘，一个优盘<br>  磁盘               |说明|分区列表<br> —                   |:-:|:-:|<br>/dev/nvme0n1 |   M.2固态    | /grub、/boot、/<br>/dev/sda          |机械硬盘1    | /home、swap<br>/dev/sdb          | 机械硬盘2   |未分区<br>/dev/sdc          | 优盘            |未分区</p><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA.png" alt="磁盘分区"></p><p><strong>2.1 针对 /dev/nvme0n1 固态的分区(分区工具有fdisk、cfdisk、parted等)：</strong></p><ul><li> <strong><code>使用 UEFI 做引导时，可以同时识别 MBR 和 GPT 分区</code></strong></li><li> <strong><code>但是在 Windows 系统下只能使用 GPT 分区类型</code></strong></li><li> <strong><code>为方便以后装双系统，这里使用 GPT 分区类型</code></strong></li></ul><p>分区数量：/grub、/boot、/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃使用 parted 分区工具<br>parted /dev/nvme0n1<br></code></pre></td></tr></table></figure><p><em><strong>parted基本操作</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃查看操作说明<br>(parted) <span class="hljs-built_in">help</span><br>＃设置 gpt 分区类型 注意：这个设置会格式化整个磁盘<br>(parted) mklabe gpt<br>＃容量查看 MB<br>(parted) unit mib<br>＃分区大小 start：起始容量 end：结束容量，分区大小：end - start<br>(parted) mkpart primary start end<br>＃打印整个磁盘分区<br>(parted) <span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><h6 id="a-启动分区：10MB"><a href="#a-启动分区：10MB" class="headerlink" title="a. 启动分区：10MB"></a>a. 启动分区：10MB</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) mkpart primary 1 11<br>(parted) name 1 grub<br>(parted) <span class="hljs-built_in">set</span> 1 bios_grub on<br></code></pre></td></tr></table></figure><h6 id="b-引导分区：128MB"><a href="#b-引导分区：128MB" class="headerlink" title="b. 引导分区：128MB"></a>b. 引导分区：128MB</h6><p> <strong><code>注意：如果你是在 win10（举例） 下安装的 gentoo ,想组双系统的话，那么你需要保证已有一个 EFI分区（这个分区在你安装 win10 时会自动生成），此时直接跳过 ‘引导分区’ 这一步。</code></strong><br>使用UEFI接口引导系统（而不是BIOS）时，将引导分区标记为EFI系统分区。当在分区上设置引导选项时，Parted会自动执行此操作，完成后会有一个esp标志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) mkpart primary 11 139<br>(parted) name 2 boot<br>(parted) <span class="hljs-built_in">set</span> 2 boot on<br></code></pre></td></tr></table></figure><h6 id="c-根分区：110GB"><a href="#c-根分区：110GB" class="headerlink" title="c. 根分区：110GB"></a>c. 根分区：110GB</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) mkpart primary 139 112779<br>(parted) name 3 root<br></code></pre></td></tr></table></figure><h6 id="d-M-2固态分区过程图"><a href="#d-M-2固态分区过程图" class="headerlink" title="d. M.2固态分区过程图"></a>d. M.2固态分区过程图</h6><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/M.2%E5%9B%BA%E6%80%81%E5%88%86%E5%8C%BA.png" alt="M.2固态分区"><br><strong>2.2 针对 /dev/sda机械硬盘1的分区(分区工具有fdisk、cfdisk、parted等)：</strong></p><p>分区数量：/home、swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃使用 parted 分区工具<br>parted /dev/sda<br></code></pre></td></tr></table></figure><p><em><strong>parted基本操作</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃查看操作说明<br>(parted) <span class="hljs-built_in">help</span><br>＃容量查看 GB<br>(parted) unit Gib<br>＃分区大小 start：起始容量 end：结束容量，分区大小：end - start<br>(parted) mkpart primary start end<br>＃打印整个磁盘空闲分区<br>(parted) <span class="hljs-built_in">print</span> free<br></code></pre></td></tr></table></figure><h6 id="a-swap分区：10GB"><a href="#a-swap分区：10GB" class="headerlink" title="a. swap分区：10GB"></a>a. swap分区：10GB</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) mkpart primary 0 10<br></code></pre></td></tr></table></figure><h6 id="b-home分区：290GB"><a href="#b-home分区：290GB" class="headerlink" title="b. home分区：290GB"></a>b. home分区：290GB</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) mkpart primary 10 300<br></code></pre></td></tr></table></figure><h6 id="c-机械硬盘1分区过程图"><a href="#c-机械硬盘1分区过程图" class="headerlink" title="c. 机械硬盘1分区过程图"></a>c. 机械硬盘1分区过程图</h6><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%981%E5%88%86%E5%8C%BA.png" alt="机械硬盘1分区"></p><h5 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3. 格式化分区"></a>3. 格式化分区</h5><table><thead><tr><th>分区</th><th align="center">格式</th></tr></thead><tbody><tr><td>/boot</td><td align="center">fat32</td></tr><tr><td>/</td><td align="center">ext4</td></tr><tr><td>/home</td><td align="center">ext4</td></tr><tr><td>swap</td><td align="center">none</td></tr></tbody></table><h6 id="a-格式化启动分区"><a href="#a-格式化启动分区" class="headerlink" title="a. 格式化启动分区"></a>a. 格式化启动分区</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext2 /dev/nvme0n1p<br></code></pre></td></tr></table></figure><h6 id="b-格式化引导分区"><a href="#b-格式化引导分区" class="headerlink" title="b. 格式化引导分区"></a>b. 格式化引导分区</h6><p>官方<a href="http://www.uefi.org/sites/default/files/resources/UEFI%202_5.pdf">UEFI规范</a>表示UEFI固件将识别FAT12,16或32文件系统，但建议ESP使用FAT32。继续将ESP格式化为FAT32：<br> <strong><code>注意：如果你是在 win10（举例） 下安装的 gentoo ,想组双系统的话，那么你需要保证已有一个 EFI分区（这个分区在你安装 win10 时会自动生成），此时直接跳过 ‘格式化引导分区’ 这一步。</code></strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkfs</span>.fat -F <span class="hljs-number">32</span> /dev/nvme<span class="hljs-number">0</span>n<span class="hljs-number">1</span>p<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h6 id="c-格式化根分区"><a href="#c-格式化根分区" class="headerlink" title="c. 格式化根分区"></a>c. 格式化根分区</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/nvme0n1p3<br></code></pre></td></tr></table></figure><h6 id="d-格式化home分区"><a href="#d-格式化home分区" class="headerlink" title="d. 格式化home分区"></a>d. 格式化home分区</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/sda3<br></code></pre></td></tr></table></figure><h6 id="e-格式化并启用swap"><a href="#e-格式化并启用swap" class="headerlink" title="e. 格式化并启用swap"></a>e. 格式化并启用swap</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkswap /dev/sda2<br>swapon /dev/sda2<br></code></pre></td></tr></table></figure><h5 id="4-挂载分区"><a href="#4-挂载分区" class="headerlink" title="4. 挂载分区"></a>4. 挂载分区</h5><p>所有分区格式化完成之后，挂载分区到/mnt/gentoo下：<br> <strong><code>注意：EFI 引导需要在 boot 下创建一个 efi 目录</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃创建boot home目录<br>mkdir -p /mnt/gentoo/boot/efi<br>mkdir /mnt/gentoo/home<br>mount /dev/nvme0n1p3 /mnt/gentoo<br>mount /dev/nvme0n1p2 /mnt/gentoo/boot/efi<br>mount /dev/sda3 /mnt/gentoo/home<br></code></pre></td></tr></table></figure><p>挂载完之后可以使用<code>mount 命令</code>检查一下挂载是否成功，没有挂载成功的需要重新挂载一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount<br></code></pre></td></tr></table></figure><h5 id="5-下载stage3"><a href="#5-下载stage3" class="headerlink" title="5.下载stage3"></a>5.下载stage3</h5><h6 id="a-验证时间"><a href="#a-验证时间" class="headerlink" title="a. 验证时间"></a>a. 验证时间</h6><p>当前时间：9月22日 17:08 2018</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">date<br>＃Sat Sep 22 09:12:08 UTC 2018<br></code></pre></td></tr></table></figure><p>时间显示应与当前日期为准<br>举例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">＃本地时间：9月22日 17:08 2018<br>＃设置时间： 9月22日 17:08 2018<br>date 092217082018<br></code></pre></td></tr></table></figure><h6 id="b-下载stage3"><a href="#b-下载stage3" class="headerlink" title="b. 下载stage3"></a>b. 下载stage3</h6><p>官方源默认是国外服务器，所以需要在国内源中下载stage3文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mnt/gentoo<br>links https://mirrors.163.com/gentoo/releases/amd64/autobuilds/current-install-amd64-minimal/<br></code></pre></td></tr></table></figure><p>此时出现一个命令行网页浏览器，选择stage3下载即可。<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E4%B8%8B%E8%BD%BDstage3.png" alt="下载stage3"><br>下载完之后，按  <strong><code>ESC -&gt; 回车 -&gt; Exit -&gt; 回车</code></strong>  退出<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%80%E5%87%BA.png" alt="退出">)</p><h6 id="c-解压stage3"><a href="#c-解压stage3" class="headerlink" title="c. 解压stage3"></a>c. 解压stage3</h6><p>文件名按自己下载的为准</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time tar xvf stage3-amd64-20180920T214502Z.tar.xz<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E8%A7%A3%E5%8E%8Bstage3.png" alt="解压stage3"></p><h6 id="d-配置-etc-portage-make-conf"><a href="#d-配置-etc-portage-make-conf" class="headerlink" title="d. 配置 /etc/portage/make.conf"></a>d. 配置 /etc/portage/make.conf</h6><p>首先，要知道自己的电脑cpu核心数<br><strong>然后设置变量 ：MAKEOPTS=”-j核心数+1”</strong><br>检查电脑核心数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /proc/cpuinfo | grep processor<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/cpu%E6%A0%B8%E5%BF%83%E6%95%B0.png" alt="cpu核心数"><br>还有一种比较简单的方法，使用 <strong><code>top</code></strong> 命令，然后按数字键 1，就会出现所有cpu的数量 :  <strong><code>%Cpu0 - %Cpun 核心数就是 n+1</code></strong><br>所以我的电脑设置是： <strong><code>MAKEOPTS=&quot;-j9&quot;</code></strong><br>执行以下命令在最后一行添加配置变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;MAKEOPTS=&quot;-j9&quot;&#x27;</span> &gt;&gt; /etc/portage/make.conf<br></code></pre></td></tr></table></figure><h6 id="e-选择镜像"><a href="#e-选择镜像" class="headerlink" title="e. 选择镜像"></a>e. 选择镜像</h6><p>将光标移至所有国内镜像地址，然后按 <strong><code>空格键</code></strong> 确认，所有选完后，按 <strong><code>回车</code></strong> 即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/portage/make.conf<br></code></pre></td></tr></table></figure><p>配置Gentoo ebuild存储库：此文件包含更新软件包存储库所需的同步信息（包含Portage下载和安装软件包所需的所有信息的ebuild和相关文件的集合）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir --parents /mnt/gentoo/etc/portage/repos.conf<br></code></pre></td></tr></table></figure><p>接下来，将Portage提供的Gentoo存储库配置文件复制到（新创建的）repos.conf目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf<br></code></pre></td></tr></table></figure><h6 id="f-复制DNS信息"><a href="#f-复制DNS信息" class="headerlink" title="f. 复制DNS信息"></a>f. 复制DNS信息</h6><p>确保在接下来chroot之后依然能连上网络<br> <strong><code>--dereference</code></strong> ：确保复制的是文件本身而不是符号链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp --dereference /etc/resolv.conf /mnt/gentoo/etc/<br></code></pre></td></tr></table></figure><h6 id="g-挂载文件系统"><a href="#g-挂载文件系统" class="headerlink" title="g. 挂载文件系统"></a>g. 挂载文件系统</h6><p>gentoo默认的init系统是OpenRC类型，所有要挂载相关系统文件，不然有些命令无法使用，在以后修复系统的时候，也要记得挂载一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount --types proc /proc /mnt/gentoo/proc<br>mount --rbind /sys /mnt/gentoo/sys<br>mount --rbind /dev /mnt/gentoo/dev<br></code></pre></td></tr></table></figure><p>如果是安装init系统为systemd的，则需要加  <strong><code>--make-rslave</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount --types proc /proc /mnt/gentoo/proc<br>mount --rbind /sys /mnt/gentoo/sys<br>mount --make-rslave /mnt/gentoo/sys<br>mount --rbind /dev /mnt/gentoo/dev<br>mount --make-rslave /mnt/gentoo/dev<br></code></pre></td></tr></table></figure><h6 id="h-进入新环境"><a href="#h-进入新环境" class="headerlink" title="h. 进入新环境"></a>h. 进入新环境</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">chroot /mnt/gentoo /bin/bash<br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&quot;(chroot) <span class="hljs-variable">$&#123;PS1&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h6 id="i-从Web安装ebuild存储库快照"><a href="#i-从Web安装ebuild存储库快照" class="headerlink" title="i. 从Web安装ebuild存储库快照"></a>i. 从Web安装ebuild存储库快照</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge-webrsync<br></code></pre></td></tr></table></figure><p>注意：这一步跟上面的选择镜像有关，如果发现一直处于执行状态，那么检查一下文件   <strong><code>/mnt/gentoo/etc/portage/make.conf</code></strong>  是否正确。</p><h6 id="j-选择配置"><a href="#j-选择配置" class="headerlink" title="j. 选择配置"></a>j. 选择配置</h6><p>配置列表是实时更新的，所以需要根据实际做出选择，这里选择默认12即可，如果是systemd，则需要选择带systemd字样的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">eselect profile list<br>eselect profile <span class="hljs-built_in">set</span> 12<br></code></pre></td></tr></table></figure><p>配置列表<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%89%E6%8B%A9%E9%85%8D%E7%BD%AE.png" alt="选择配置"></p><h6 id="k-更新-world集"><a href="#k-更新-world集" class="headerlink" title="k. 更新@world集"></a>k. 更新@world集</h6><p>因为没有选择桌面环境，所有更新时间会短一些。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet --update --deep --newuse @world<br></code></pre></td></tr></table></figure><p>这里使用了 <strong>–quiet</strong> 静默安装，不会输出安装过程。<br>安装过程图<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E6%9B%B4%E6%96%B0@world%E9%9B%86.png" alt="更新@world集"></p><h6 id="l-时区"><a href="#l-时区" class="headerlink" title="l. 时区"></a>l. 时区</h6><p>选择本地时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls /usr/share/zoneinfo/Asia<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone<br></code></pre></td></tr></table></figure><p>更新时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --config sys-libs/timezone-data<br></code></pre></td></tr></table></figure><h6 id="m-配置语言环境"><a href="#m-配置语言环境" class="headerlink" title="m. 配置语言环境"></a>m. 配置语言环境</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/locale.gen<br></code></pre></td></tr></table></figure><p>根据如下修改，这里需要注意，gentoo默认不支持zh_CN.UTF-8，需要<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%85%8D%E7%BD%AE%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83.png" alt="配置语言环境"></p><p>下一步是运行locale-gen。它将生成/etc/locale.gen文件中指定的所有语言环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">locale-gen<br>eselect locale list<br>eselect locale <span class="hljs-built_in">set</span> 8<br></code></pre></td></tr></table></figure><p>这里设置中文语言<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%80%89%E6%8B%A9%E8%AF%AD%E8%A8%80.png" alt="选择语言.png"></p><p>确保设置了区域设置，否则系统会在内核构建期间以及安装后期的其他软件部署中显示警告和错误。</p><h6 id="n-重新加载环境："><a href="#n-重新加载环境：" class="headerlink" title="n. 重新加载环境："></a>n. 重新加载环境：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">env-update &amp;&amp; <span class="hljs-built_in">source</span> /etc/profile &amp;&amp; <span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&quot;(chroot) <span class="hljs-variable">$PS1</span>&quot;</span><br></code></pre></td></tr></table></figure><h6 id="o-安装内核源码"><a href="#o-安装内核源码" class="headerlink" title="o. 安装内核源码"></a>o. 安装内核源码</h6><p>对于基于amd64的系统，Gentoo推荐使用<a href="https://packages.gentoo.org/packages/sys-kernel/gentoo-sources">sys-kernel / gentoo-sources</a>包。</p><p>选择适当的内核源并使用emerge安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask sys-kernel/gentoo-sources<br></code></pre></td></tr></table></figure><p>如果提示 <strong><code>needs updating</code></strong><br>则运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">etc-update<br></code></pre></td></tr></table></figure><p>然后输入 <strong><code>-3</code></strong>  -&gt; 回车 -&gt; yes ,之后在重新装一次即可。</p><h6 id="p-配置kernel"><a href="#p-配置kernel" class="headerlink" title="p. 配置kernel"></a>p. 配置kernel</h6><p>这里使用自动配置方式，需要手动配置的请看Gentoo Wiki。</p><p>安装kernel自动配置工具genkernel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet sys-kernel/genkernel<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E5%AE%89%E8%A3%85genkernel.png" alt="安装genkernel"><br>安装时如果提示  <strong><code>USE changes</code></strong> ，则运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">etc-update<br></code></pre></td></tr></table></figure><p>然后输入 <strong><code>-3</code></strong>  -&gt; 回车 -&gt; yes ,之后在重新执行  <strong><code>time emerge --ask --quiet sys-kernel/genkernel</code></strong> 即可。</p><p>安装完成之后，编辑  <strong><code>/etc/fstab</code></strong>  系统的挂载点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/fstab<br></code></pre></td></tr></table></figure><p>添加如下挂载点：<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E6%8C%82%E8%BD%BD%E7%82%B9.png" alt="挂载点"></p><p>然后开始编译kernel：<br>这需要不少的时间，可以喝杯茶放松一下~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time genkernel all<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8.png" alt="编译内核"><br>编译完成之后，检查一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls /boot/kernel* /boot/initramfs*<br>＃会显示两个文件　　<br></code></pre></td></tr></table></figure><h6 id="q-安装固件"><a href="#q-安装固件" class="headerlink" title="q. 安装固件"></a>q. 安装固件</h6><p>某些驱动程序在工作之前需要在系统上安装其他固件。这通常是网络接口的情况，尤其是无线网络接口。此外，在使用开源驱动程序时，来自AMD，Nvidia和Intel等供应商的现代视频芯片通常需要外部固件文件。大多数固件都封装在<a href="https://packages.gentoo.org/packages/sys-kernel/linux-firmware">sys-kernel / linux-firmware</a>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask --quiet sys-kernel/linux-firmware<br></code></pre></td></tr></table></figure><h6 id="r-修改主机名"><a href="#r-修改主机名" class="headerlink" title="r. 修改主机名"></a>r. 修改主机名</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/conf.d/hostname<br>＃将hostname变量设置为自己取的主机名字<br>hostname =“Guard”<br></code></pre></td></tr></table></figure><p>其次，如果需要域名，请在/etc/conf.d/net中设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/conf.d/net<br>＃将dns_domain_lo变量设置为所选域名<br>dns_domain_lo =“homenetwork”<br></code></pre></td></tr></table></figure><p>如果设置域名，登录屏幕会显示 <strong><code>This is hostname.(none)</code></strong><br>想要将它去掉，只需要修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/issue<br>＃将 .\O 删掉即可<br></code></pre></td></tr></table></figure><h6 id="s-配置网络"><a href="#s-配置网络" class="headerlink" title="s. 配置网络"></a>s. 配置网络</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time emerge --ask  --quiet --noreplace net-misc/netifrc<br></code></pre></td></tr></table></figure><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C.png" alt="配置网络"></p><h6 id="t-设置启动时自动启动网络"><a href="#t-设置启动时自动启动网络" class="headerlink" title="t. 设置启动时自动启动网络"></a>t. 设置启动时自动启动网络</h6><p>要在引导时激活网络接口，需要将它们添加到默认运行级别。<br>首先需要知道网络接口名称：<br>使用  <strong><code>ifconfig</code></strong> 查看是  <strong><code>eth0</code></strong> ，还是  <strong><code>enp3s0</code></strong><br>这里使用 enp3s0：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/init.d<br>ln -s net.lo net.enp3s0<br>rc-update add net.enp3s0 default<br></code></pre></td></tr></table></figure><p>如果在启动系统后我们发现有关网络接口名称（当前记录为eth0）的假设是错误的，那么执行以下步骤来纠正这个问题：</p><ul><li>使用正确的接口名称更新/etc/conf.d/net文件（enp3s0而不是eth0）。</li><li>创建新的符号链接（如/etc/init.d/net.enp3s0）。</li><li>删除旧的符号链接（rm /etc/init.d/net.eth0）。</li><li>将新的添加到默认运行级别。</li><li>使用rc-update del net.eth0 default删除旧的。</li></ul><h6 id="u-设置主机hosts"><a href="#u-设置主机hosts" class="headerlink" title="u. 设置主机hosts"></a>u. 设置主机hosts</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/hosts<br></code></pre></td></tr></table></figure><p>按如下设置hosts文件，这里以 <strong><code>Guard</code></strong> 为主机名<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/hosts.png" alt="hosts"></p><h6 id="v-设置root密码"><a href="#v-设置root密码" class="headerlink" title="v. 设置root密码"></a>v. 设置root密码</h6><p>使用passwd命令设置root密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><h6 id="w-设置时钟"><a href="#w-设置时钟" class="headerlink" title="w. 设置时钟"></a>w. 设置时钟</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/conf.d/hwclock<br>＃修改：clock=<span class="hljs-string">&quot;local&quot;</span><br></code></pre></td></tr></table></figure><p>如果硬件时钟未使用UTC，则必须 <strong><code>clock=&quot;local&quot;</code></strong> 在文件中进行设置。否则系统可能会显示时钟偏差行为。</p><h6 id="x-安装工具"><a href="#x-安装工具" class="headerlink" title="x. 安装工具"></a>x. 安装工具</h6><ol><li>系统日志记录<br>提供传统的系统日志记录守护程序集。默认的日志记录配置可以很好地开箱即用，这使得这个软件包成为初学者的一个很好的选择。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask app-admin/sysklogd<br>rc-update add sysklogd default<br></code></pre></td></tr></table></figure></li><li>Cron守护程序<br>cron守护程序执行计划的命令。如果需要定期执行某些命令（例如每天，每周或每月），则非常方便。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask sys-process/cronie<br>rc-update add cronie default<br></code></pre></td></tr></table></figure></li><li>文件索引<br>要索引文件系统以提供更快的文件位置功能，请安装<a href="https://packages.gentoo.org/packages/sys-apps/mlocate">sys-apps / mlocate</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask sys-apps/mlocate<br></code></pre></td></tr></table></figure><ol start="4"><li>远程访问<br>要在安装后远程访问系统，请将sshd init脚本添加到默认运行级别：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rc-update add sshd default<br></code></pre></td></tr></table></figure></li><li>如果需要串行控制台访问（在远程服务器的情况下可以访问），请取消注释/ etc / inittab中的串行控制台部分：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano -w /etc/inittab<br>＃SERIAL CONSOLES<br>s0：12345：respawn：/ sbin / agetty 9600 ttyS0 vt100<br>s1：12345：respawn：/ sbin / agetty 9600 ttyS1 vt100<br></code></pre></td></tr></table></figure></li><li>网络工具</li></ol><ul><li>6.1 安装DHCP客户端<br>为了使系统能够使用netifrc脚本自动获取一个或多个网络接口的IP地址，必须安装DHCP客户端。我们建议使用<a href="https://packages.gentoo.org/packages/net-misc/dhcpcd">net-misc / dhcpcd，</a>尽管通过Gentoo存储库可以获得许多其他DHCP客户端：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask net-misc/dhcpcd<br></code></pre></td></tr></table></figure><ul><li>6.2安装无线网络工具<br><code>如果不需要无线可以跳过此步骤</code><br>如果系统将连接到无线网络，请为Open或WEP网络安装：<a href="https://packages.gentoo.org/packages/net-wireless/iw">net-wireless / iw</a>；<br>WPA或WPA2网络安装：<a href="https://packages.gentoo.org/packages/net-wireless/wpa_supplicant">net-wireless / wpa_supplicant</a>；<br>iw也是用于扫描无线网络的有用的基本诊断工具。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask net-wireless/iw<br>emerge --ask net-wireless/wpa_supplicant<br></code></pre></td></tr></table></figure><h6 id="y-配置引导加载程序"><a href="#y-配置引导加载程序" class="headerlink" title="y. 配置引导加载程序"></a>y. 配置引导加载程序</h6></li></ul></li></ul><ol><li>合并GRUB2 软件到系统中</li></ol><ul><li>UEFI用户注意事项：</li></ul><p>用户需要确保<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>已启用（默认情况下是这种情况）。如果不是设置的情况，<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>则需要在出现GRUB2 之前将其添加到<code>/etc/portage/make.conf</code>文件中，然后在安装GRUB2 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;GRUB_PLATFORMS=&quot;efi-64&quot;&#x27;</span> &gt;&gt; /etc/portage/make.conf<br>emerge --ask sys-boot/grub:2<br></code></pre></td></tr></table></figure><p>如果GRUB2以某种方式出现而没有启用<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>，则可以将该行（<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>）添加到make.conf中，然后通过将选项传递给emerge来重新计算<a href="https://wiki.gentoo.org/wiki/World_set_(Portage)" title="世界集（波蒂奇）">世界包集的</a>依赖关系：<code>--update --newuse</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask --update --newuse --verbose sys-boot/grub:2<br></code></pre></td></tr></table></figure><ul><li>使用仅支持MBR分区表的旧BIOS系统时，不需要其他配置就能显示GRUB：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask --verbose sys-boot/grub:2<br></code></pre></td></tr></table></figure>GRUB2软件现已合并到系统中，但尚未安装。</li></ul><ol start="2"><li>安装GRUB2软件</li></ol><p>接下来，通过<code>grub-install</code>命令将必要的GRUB2文件安装到 <strong><code>/boot/grub</code></strong> 目录。假定第一个磁盘（系统从中引导的磁盘）是 <strong><code>/dev/sda</code></strong> ，以下命令之一将执行：</p><ul><li>UEFI用户：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-install --target=x86_64-efi --efi-directory=/boot/efi<br></code></pre></td></tr></table></figure>如果grub_install返回类似的错误<code>Could not prepare Boot variable: Read-only file system</code>，可能需要将efivars特殊挂载重新安装为读写才能成功：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -o remount,rw /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>另外需要注意</code></strong> ：<br>一些主板制造商似乎只支持EFI系统分区（ESP）中的.EFI文件的 /boot/efi 目录位置(挂载的引导分区目录)。GRUB安装程序可以使用该<code>--removable</code>选项自动执行此操作。在运行以下命令之前验证是否已安装ESP。假设ESP安装在/boot/efi（如前所述），执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable<br></code></pre></td></tr></table></figure><p>这将创建由UEFI规范定义的默认目录，然后自动将 grubx64.efi 文件复制到由相同规范定义的“默认”EFI文件位置。<br>我的电脑主板是华硕的，只支持EFI系统分区（ESP）中的.EFI文件的 /boot/efi 目录位置(挂载的引导分区目录)。所以得加   <strong><code>--removable</code></strong><br>如果发现自己的系统引导不了，出现 GRUB 字样，则尝试加  <strong><code>--removable</code></strong><br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E5%AE%89%E8%A3%85EFI%E5%BC%95%E5%AF%BC.png" alt="安装EFI引导"></p><ul><li>BIOS用户：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-install /dev/sda<br>＃/dev/sda 为 /boot 挂载分区<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>GRUB2配置</li></ol><p>注意：如果是安装win10 与gentoo 双系统，需要另外安装 <code>os-prober</code> 用以检测 win10 的引导：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">emerge --ask os-prober<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">os-prober<br></code></pre></td></tr></table></figure><p>接下来，根据 /etc/default/grub 文件和 /etc/grub.d 脚本中指定的用户配置生成GRUB2配置。<br>在大多数情况下，用户不需要配置，因为GRUB2将自动检测要引导的内核来生成最终的GRUB2配置，<br>请运行 grub-mkconfig 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-mkconfig -o /boot/efi/grub/grub.cfg<br></code></pre></td></tr></table></figure><p>如果是win10与gentoo双系统则：<br><code>如果检测不到win系统，则可以先继续执行下一步，等全部安装完毕之后，重启系统，再执行 os-prober -&gt; grub-mkconfig -o /boot/grub/grub.cfg 即可。</code><br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/win10%E4%B8%8Egentoo%E5%8F%8C%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E5%BC%95%E5%AF%BC.png" alt="win10与gentoo双系统配置引导"></p><p>假如没有出现 <strong><code>Found</code></strong> 开头的文字，则表明检测不到系统，此时：</p><ul><li>运行  <strong><code>ls /boot/kernel* /boot/initramfs **</code></strong> 查看是否会输出两个文件；<pre><code class="hljs">如果没有，则运行 **`ls /boot/efi/kernel* /boot/efi/initramfs **`** ，查看是否会输出两个文件，如果有输出，则将两个文件复制到 **`/boot`** 目录下，之后重新 **`grub-mkconfig -o /boot/efi/grub/grub.cfg`** 即可。</code></pre>如果都没有输出，则重新 <strong><code>genkernel all</code></strong> 一下，然后在自动生成GRUB2配置。</li></ul><h6 id="z-重新启动系统"><a href="#z-重新启动系统" class="headerlink" title="z. 重新启动系统"></a>z. 重新启动系统</h6><p>退出chroot环境并卸载所有已安装的分区。<br>然后重新启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>reboot<br></code></pre></td></tr></table></figure><p>不要忘记拔掉优盘，否则可能会再次引导CD而不是新的Gentoo系统。</p><p>win10与gentoo双系统引导界面:<br><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/win10%E4%B8%8Egentoo%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E7%95%8C%E9%9D%A2.png" alt="win10与gentoo双系统引导界面"><br>gentoo命令行登录，此时输入 <code>root -&gt; 回车 -&gt; 输入密码</code>，即可进入gentoo系统。</p><p><img src="/images/%E6%A0%B9%E6%8D%AEGentoo%20handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="命令行登录界面"></p><p>至此，Gentoo的基本系统已安装完成！</p><p>感慨一下：Gentoo确实是一个挺折腾的系统，同时需要更多的耐心！不过折腾完，就会发现对Linux更熟悉了一点！<br>谢谢阅读～</p><p>下一篇：<a href="https://www.jianshu.com/p/31f7ff6ee3d4">根据Gentoo handbook安装——KDE桌面+NVIDIA显卡</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Gentoo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gentoo</tag>
      
      <tag>UEFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中关于指针与引用</title>
    <link href="/p/476922c206a5.html"/>
    <url>/p/476922c206a5.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">摘抄自————《C++ Primer中文第五版》<br></code></pre></td></tr></table></figure><p><strong>1.引用(reference)：</strong>为对象起了另外一个名字，引用类型引用(refers to)另外一种类型。<strong>通过将声明符写成 &amp;d (&amp;:取地址操作符)的形式来定义引用类型，其中d是声明的变量名：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> ival = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">int</span> &amp;referVal = ival;   <span class="hljs-comment">//refVal指向ival(是ival的另一个名字)</span><br><span class="hljs-keyword">int</span> &amp;refaVal2;   <span class="hljs-comment">//错误：引用必须被初始化</span><br></code></pre></td></tr></table></figure><p><strong>注意：<br>&emsp;&emsp;a. 引用必须被初始化，程序把引用和它的初始值对象一直绑定在一起。因为无法令引用重新绑 &emsp;&emsp;&emsp;定到另外一个对象，因此引用必须初始化。<br>&emsp;&emsp;b. 引用并没有实际地址，只是为一个已存在的对象所起的另外一个名字。<br>&emsp;&emsp;c. 对引用的所有操作都是在与之绑定的对象上进行的。<br>&emsp;&emsp;d. 引用的类型与绑定的对象类型必须一致。</strong></p><p><strong>2. 指针(pointer)：</strong>是指 “ 指向(point to) ” 另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。定义指针类型的方法将声明符写成 *d 的形式，其中 d 是变量名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> *ipl = &amp;i;   <span class="hljs-comment">//ipl是指向int型对象的指针</span><br><span class="hljs-keyword">int</span> *pr, *pi;     <span class="hljs-comment">//定义两个int型指针</span><br></code></pre></td></tr></table></figure><p><strong>2.1 指针与引用的不同点：</strong></p><p>&emsp;&emsp;其一，<strong>指针本身就是一个对象</strong>，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象。</p><p>&emsp;&emsp;其二，<strong>指针无须再定义时赋初值</strong>。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。</p><p><strong>2.2 指针值：</strong></p><blockquote><p><strong>a. 指向一个对象。<br>b. 指向紧邻对象对象所占空间的下一个位置。<br>c. 空指针，意味着指针没有指向任何对象。<br>d. 无效指针，也就是上述情况之外的其他值。</strong></p></blockquote><p><strong>2.3 某些符号有多重含义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">int</span> &amp;r = i;  <span class="hljs-comment">// &amp;紧随类型名出现，因此是声明的一部分，r是一个引用</span><br><span class="hljs-keyword">int</span> *p;  <span class="hljs-comment">// *紧随类型名出现，因此是声明的一部分，p是一个指针</span><br>p = &amp;i;  <span class="hljs-comment">// &amp;出现在表达式中，是一个取地址符</span><br>*p = i;  <span class="hljs-comment">// *出现在表达式中，是一个解引用符</span><br><span class="hljs-keyword">int</span> &amp;r2 = *p;  <span class="hljs-comment">// &amp;是声明的一部分， *是一个解引用符</span><br></code></pre></td></tr></table></figure><p><strong>2.4 空指针</strong></p><p>&emsp;&emsp;空指针(null pointer)不指向任何对象，在试图使用一个指针之前代码可以首先检查是否为空。以下是几个生成空指针的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *p1 = <span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">//C++11新标准方法。等价于 int *p1 = 0;</span><br><span class="hljs-keyword">int</span> *p2 = <span class="hljs-number">0</span>;  <span class="hljs-comment">//直接将p2初始化为字面常量0</span><br><span class="hljs-comment">//需要首先 #include cstdlib</span><br><span class="hljs-keyword">int</span> *p3 = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 等价于 int *p3 = 0;</span><br></code></pre></td></tr></table></figure><p><strong>2.5 void* 指针</strong></p><p>&emsp;&emsp;void *指针是一种特殊的指针类型，可用于存放任意对象的地址。一个void * 指针存放着一个地址，这一点和其他指针类似。不同的是。我们对该地址中到底是个什么类型的对象并不了解：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">double</span> obj = <span class="hljs-number">3.14</span>, *pd = &amp;obj;<br><span class="hljs-comment">// 正确：void* 能存放任意类型对象的地址</span><br><span class="hljs-keyword">void</span> *pv = &amp;obj;  <span class="hljs-comment">// obj可以是任意类型的对象</span><br>pv = pd;   <span class="hljs-comment">// pv可以存放任意类型的指针</span><br></code></pre></td></tr></table></figure><p><strong>2.6 指向指针的指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> ival = <span class="hljs-number">1024</span>;<br><span class="hljs-keyword">int</span> *pi = &amp;ival;  <span class="hljs-comment">// pi 指向一个int型的数</span><br><span class="hljs-keyword">int</span> **ppi = &amp;pi;  <span class="hljs-comment">// ppi 指向一个int型的指针</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这里pi是指向int型数的指针，而ppi是指向int型指针的指针，如图：<br><img src="/images/C++%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E5%90%91%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88.png" alt="指向指针的指针.png"><br>&emsp;&emsp;解引用 int 型指针会得到一个int型的数，同样，解引用指向指针的指针会得到一个指针。此时为了访问最原始的那个对象，需要对指针的指针做两次解引用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">cout</span>  &lt;&lt; <span class="hljs-string">&quot;The value of ival\n&quot;</span><br>      &lt;&lt; <span class="hljs-string">&quot;direct value: &quot;</span> &lt;&lt; ival &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>      &lt;&lt; <span class="hljs-string">&quot;indirect value: &quot;</span> &lt;&lt; *pi &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>      &lt;&lt; <span class="hljs-string">&quot;double indirect value: &quot;</span> &lt;&lt; **ppi<br>      &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;该程序使用三种不同的方式输出了变量 ival 的值： 第一种直接输出；第二种通过int型指针pi输出；第三种两次解引用ppi，取得ival的值。</p><p><strong>2.7 指向指针的引用</strong><br>&emsp;&emsp;引用本身不是一个对象，因此不能定义指向引用的指针。但指针是对象，所以存在对指针的引用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> t = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">int</span> *p;  <span class="hljs-comment">// p 是一个int型指针</span><br><span class="hljs-keyword">int</span> *&amp;r = p;  <span class="hljs-comment">// r是一个对指针p的引用</span><br><br>r = &amp;i;  <span class="hljs-comment">// r引用了一个指针，因此给r赋值&amp;i就是令p指向i</span><br>*r = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 解引用 r 得到 i，也就是 p 指向的对象，将 i 的值改为0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>要理解 r 的类型到底是什么，最简单的办法是从右往左阅读 r 的定义。离变量名最近的符号（此例中是 &amp;r 的符号是 &amp;）对变量的类型有最直接的影响，因此 r 是一个引用。声明符的其余部分用以确定 r 引用的类型是什么，此例中的符号 * 说明 r 引用的是一个指针。最后，声明的基本数据类型部分指出 r 引用的是一个 int 指针。</strong></p><blockquote><p><strong>因此这里 int *&amp;r = p;<br>应该看成是 对 int*（int型的指针）的引用，所以对 p指针的操作和对 r 引用的操作是一样的。</strong></p></blockquote><p><strong>2.8 另外： 关于&amp; 和 *&amp; 理解</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> *p = &amp;i;<br><span class="hljs-keyword">int</span> &amp;pr = *p;  <span class="hljs-comment">// *是一个解引用符，由*得到指针p所指的对象</span><br><span class="hljs-keyword">int</span> *&amp;pi = p;<br></code></pre></td></tr></table></figure><p>这里 &amp;pr 和 *&amp;pi 表面上看值都是一样的，但是有一点不同</p><blockquote><p><strong>pr 是指针p所指对象的引用</strong><br><strong>pi 是指针p的引用</strong></p></blockquote><p>&emsp;&emsp;假如p指针指向的是一个数组，那么 pr只能访问<strong>p的首元素</strong>（单一对象），而pi则可以访问<strong>p的整个数组</strong>（数组的地址）。</p><p><strong>2.9 const 指针</strong><br>&emsp;&emsp;指针是对象而引用不是，所以指针本身可以定为常量。常量指针(const pointer)必须初始化，一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。把 * 放在 const 关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> errNumb = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> curErr = &amp;errNumb;  <span class="hljs-comment">// curErr 将一直指向 errNumb</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi =<span class="hljs-number">3.14159</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> *<span class="hljs-keyword">const</span> pip = &amp;pi;  <span class="hljs-comment">//pip是一个指向常量对象的常量指针</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;要想弄清楚上述声明的含义，最有效的办法是从右向左阅读。离 currErr 最近的符号是 const，意味着 currErr 本身是一个常量对象，对象的类型由声明符的其余部分确定。声明符中的下一个符号是*，意思是 currErr 是一个常量指针。最后，该声明语句的基本数据类型部分确定了常量指针指向的是一个 int 对象。与之相似，我们也能推断出，pip是一个常量指针，它指向的对象是一个双精度浮点型常量。<br>&emsp;&emsp;指针本身是一个常量并不意味着不能通过指针修改其所指对象的值，能否这样做完全依赖于所指对象的类型。例如，pip 是一个指向常量的常量指针，则不论是 pip所指的对象值还是pip自己存储的那个地址都不能改变。相反的，curErr 指向的是一个一般的非常量整数，那么就完全可以用 curErr 去修改 errNumb 的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">*pip = <span class="hljs-number">2.72</span>;  <span class="hljs-comment">// 错误：pip是一个指向常量的指针</span><br><span class="hljs-comment">// 如果 curErr 所指的对象（也就是errNumb）的值不为 0</span><br><span class="hljs-keyword">if</span> (*curErr)<br>&#123;<br>  errorHandler();<br>  *curErr = <span class="hljs-number">0</span>;  <span class="hljs-comment">//正确：把curErr所指的对象的值重置</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch linux中 python3安装tkinter</title>
    <link href="/p/cc3a6bdf0135.html"/>
    <url>/p/cc3a6bdf0135.html</url>
    
    <content type="html"><![CDATA[<p>直接使用 pacman 安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo pacman -S python-pmw<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派编译安装python3.6</title>
    <link href="/p/45de74b50dd1.html"/>
    <url>/p/45de74b50dd1.html</url>
    
    <content type="html"><![CDATA[<p>一、更新树莓派系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo  apt-get  update<br>$ sudo  apt-get  upgrade<br></code></pre></td></tr></table></figure><p>二、安装python依赖环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev<br></code></pre></td></tr></table></figure><p>三、下载python3.6版本源码并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz<br>$ tar zxvf Python-3.6.1.tgz<br></code></pre></td></tr></table></figure><p>四、编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> Python-3.6.1<br>$ sudo ./configure<br>$ sudo make<br>$ sudo make install<br></code></pre></td></tr></table></figure><p>五、检查安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls -al /usr/<span class="hljs-built_in">local</span>/bin/python*<br>lrwxrwxrwx 1 root staff       9 May 15 14:53 /usr/<span class="hljs-built_in">local</span>/bin/python3 -&gt; python3.6<br>-rwxr-xr-x 2 root staff 9840168 May 15 14:51 /usr/<span class="hljs-built_in">local</span>/bin/python3.6<br>lrwxrwxrwx 1 root staff      17 May 15 14:53 /usr/<span class="hljs-built_in">local</span>/bin/python3.6-config -&gt; python3.6m-config<br>-rwxr-xr-x 2 root staff 9840168 May 15 14:51 /usr/<span class="hljs-built_in">local</span>/bin/python3.6m<br>-rwxr-xr-x 1 root staff    3103 May 15 14:53 /usr/<span class="hljs-built_in">local</span>/bin/python3.6m-config<br>lrwxrwxrwx 1 root staff      16 May 15 14:53 /usr/<span class="hljs-built_in">local</span>/bin/python3-config -&gt; python3.6-config<br></code></pre></td></tr></table></figure><p>小知识点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>. usr 是指 Unix System Resource，而不是User；<br><span class="hljs-number">2</span>. <span class="hljs-regexp">/usr/</span>bin：系统预装的可执行程序，会随着系统升级而改变；<br><span class="hljs-number">3</span>. <span class="hljs-regexp">/usr/</span>local/bin：用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件；<br>如果两个目录下有相同的可执行程序，谁优先执行受到PATH环境变量的影响，比如我的一台服务器的PATH变量为：<br>$ echo <span class="hljs-variable">$PATH</span><br><span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/qt-3.3/</span>bin:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin:/</span>bin:<span class="hljs-regexp">/usr/</span>bin:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin:/u</span>sr<span class="hljs-regexp">/sbin:/</span>sbin:<span class="hljs-regexp">/home/</span>dean/bin<br>这里<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin优先于/u</span>sr/bin.<br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.aliyun.com/jiaocheng/118743.html">https://www.aliyun.com/jiaocheng/118743.html</a><br><a href="https://blog.csdn.net/lina_acm/article/details/78224656">https://blog.csdn.net/lina_acm/article/details/78224656</a></p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Arch下通过jekyll搭建github pages个人博客</title>
    <link href="/p/ec863f6df76f.html"/>
    <url>/p/ec863f6df76f.html</url>
    
    <content type="html"><![CDATA[<p>程序员一般都喜欢写blog，用来记录一些知识点防止以后忘记，或者方便查阅，这时候一个好的blog网页就派上用场了，本文主要讲解的是用jekyll来，在github pages搭建属于自己的blog。</p><h5 id="1-搭建前须知：需要用到的-ruby、rvm、gem。"><a href="#1-搭建前须知：需要用到的-ruby、rvm、gem。" class="headerlink" title="1.搭建前须知：需要用到的 ruby、rvm、gem。"></a>1.搭建前须知：需要用到的 ruby、rvm、gem。</h5><p>ruby：一种简单快捷的面向对象（面向对象程序设计）脚本语言，在20世纪90年代由日本人松本行弘(Yukihiro Matsumoto)开发，遵守GPL协议和RubyLicense。</p><p>rvm：用于帮你安装Ruby环境，帮你管理多个Ruby环境，帮你管理你开发的每个Ruby应用使用机器上哪个Ruby环境。Ruby环境不仅仅是Ruby本身，还包括依赖的第三方Ruby插件。都由RVM管理。</p><p>gem：Gem是封装起来的Ruby应用程序或代码库。在终端使用的gem命令，是指通过RubyGems管理Gem包。</p><h5 id="2-假设你没有部署过任何ruby环境，那么可以安装相关软件："><a href="#2-假设你没有部署过任何ruby环境，那么可以安装相关软件：" class="headerlink" title="2.假设你没有部署过任何ruby环境，那么可以安装相关软件："></a>2.假设你没有部署过任何ruby环境，那么可以安装相关软件：</h5><p><code>$ sudo pacman -S ruby</code></p><p>检查是否安装成功 ：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ ruby -v<br>$ ruby <span class="hljs-number">2.4.1p111</span> (<span class="hljs-number">2017-03-22</span> revision <span class="hljs-number">58053</span>) [x86_64-linux]<br></code></pre></td></tr></table></figure><p>安装成功之后不用再另外单独安装 rubygems 了,在ruby 下,rubygems已经是默认的ruby包管理程序，可以试试查看版本：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>gem -v<br><span class="hljs-variable">$ </span><span class="hljs-number">2.6</span>.<span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>然后使用ruby的包管理程序gem来安装相关软件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ gem <span class="hljs-keyword">install </span>rvm<br>Successfully <span class="hljs-keyword">installed </span>rvm<span class="hljs-number">-1</span>.<span class="hljs-number">11</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span><br>Parsing documentation for rvm<span class="hljs-number">-1</span>.<span class="hljs-number">11</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span><br>Done <span class="hljs-keyword">installing </span>documentation for rvm after <span class="hljs-number">0</span> seconds<br><span class="hljs-number">1</span> gem <span class="hljs-keyword">installed</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">$ </span>gem <span class="hljs-keyword">install </span><span class="hljs-keyword">bundle</span><br><span class="hljs-keyword">Successfully </span><span class="hljs-keyword">installed </span><span class="hljs-keyword">bundle-0.0.1</span><br><span class="hljs-keyword">Parsing </span>documentation for <span class="hljs-keyword">bundle-0.0.1</span><br><span class="hljs-keyword">Done </span><span class="hljs-keyword">installing </span>documentation for <span class="hljs-keyword">bundle </span>after <span class="hljs-number">0</span> seconds<br><span class="hljs-number">1</span> gem <span class="hljs-keyword">installed</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">$ </span>gem <span class="hljs-keyword">install </span><span class="hljs-keyword">bundler</span><br><span class="hljs-keyword">Successfully </span><span class="hljs-keyword">installed </span><span class="hljs-keyword">bundler-1.15.4</span><br><span class="hljs-keyword">Parsing </span>documentation for <span class="hljs-keyword">bundler-1.15.4</span><br><span class="hljs-keyword">Done </span><span class="hljs-keyword">installing </span>documentation for <span class="hljs-keyword">bundler </span>after <span class="hljs-number">4</span> seconds<br><span class="hljs-number">1</span> gem <span class="hljs-keyword">installed</span><br></code></pre></td></tr></table></figure><h5 id="3-安装jekyll"><a href="#3-安装jekyll" class="headerlink" title="3.安装jekyll:"></a>3.安装jekyll:</h5><p>试了好多次发现直接用gem install jekyll 会报错。无意间发现arch有个专门的软件包叫ruby-jekyll，我们直接来pacman一下:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs subunit">$ sudo pacman -S ruby-jekyll<br>警告：ruby-jekyll<span class="hljs-string">-3</span>.4.3<span class="hljs-string">-1</span> 已经为最新 -- 重新安装<br>正在解决依赖关系...<br>正在查找软件包冲突...<br><br>软件包 (1) ruby-jekyll<span class="hljs-string">-3</span>.4.3<span class="hljs-string">-1</span><br><br>全部安装大小：  0.81 MiB<br>净更新大小：  0.00 MiB<br><br>:: 进行安装吗？ [Y/n]<br><br></code></pre></td></tr></table></figure><p>选择Y ，安装完毕之后，在来执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ gem <span class="hljs-keyword">install </span><span class="hljs-keyword">jekyll</span><br><span class="hljs-keyword">Successfully </span><span class="hljs-keyword">installed </span><span class="hljs-keyword">jekyll-3.5.2</span><br><span class="hljs-keyword">Parsing </span>documentation for <span class="hljs-keyword">jekyll-3.5.2</span><br><span class="hljs-keyword">Done </span><span class="hljs-keyword">installing </span>documentation for <span class="hljs-keyword">jekyll </span>after <span class="hljs-number">1</span> seconds<br><span class="hljs-number">1</span> gem <span class="hljs-keyword">installed</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">$ </span><span class="hljs-keyword">jekyll </span>-v<br><span class="hljs-keyword">jekyll </span><span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>大功告成！到此jekyll搭建成功，接下来是github pages，首先你得要有个<a href="https://github.com/">github</a>帐号。</p><h5 id="4-假设你已经有了github帐号，那么现在自己的电脑建立一个本地的git仓库，没有装git的话，可以pacman一下："><a href="#4-假设你已经有了github帐号，那么现在自己的电脑建立一个本地的git仓库，没有装git的话，可以pacman一下：" class="headerlink" title="4.假设你已经有了github帐号，那么现在自己的电脑建立一个本地的git仓库，没有装git的话，可以pacman一下："></a>4.假设你已经有了github帐号，那么现在自己的电脑建立一个本地的git仓库，没有装git的话，可以pacman一下：</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs subunit">$ sudo pacman -S git<br>警告：git<span class="hljs-string">-2</span>.14.1<span class="hljs-string">-1</span> 已经为最新 -- 重新安装<br>正在解决依赖关系...<br>正在查找软件包冲突...<br><br>软件包 (1) git<span class="hljs-string">-2</span>.14.1<span class="hljs-string">-1</span><br><br>全部安装大小：  33.39 MiB<br>净更新大小：   0.00 MiB<br><br>:: 进行安装吗？ [Y/n]<br></code></pre></td></tr></table></figure><p>安装完毕之后，可以在用户目录下建立一个文件夹：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ mkdir my_blog<br></code></pre></td></tr></table></figure><p>然后初始化git本地仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd my_blog<br>$ git init<br>已初始化空的 Git 仓库于 <span class="hljs-regexp">/home/u</span>sername<span class="hljs-regexp">/my_blog/</span>.git/<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">然后，创建一个没有父节点的分支<span class="hljs-selector-tag">gh-pages</span>，所有的<span class="hljs-selector-tag">code</span>都将被提交到这个分支上。有兴趣可看<span class="hljs-selector-attr">[官网help文档]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/)</span><br></code></pre></td></tr></table></figure><p>$ git checkout –orphan gh-pages</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">#####  <span class="hljs-number">5.</span>启用你的jekyll，建立静态本地网页：<br>创建博客-&gt;进入博客-&gt;启动本地服务(ctrl+c关闭本地服务)-&gt;得到相关文件：<br></code></pre></td></tr></table></figure><p>$ cd ..<br>$ jekyll new my_blog<br>Running bundle install in /home/username/my_blog…<br>  Bundler: The dependency tzinfo-data (&gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run <code>bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java</code>.<br>  Bundler: Fetching gem metadata from <a href="https://rubygems.org/">https://rubygems.org/</a>…………<br>  Bundler: Fetching version metadata from <a href="https://rubygems.org/">https://rubygems.org/</a>…<br>  Bundler: Fetching dependency metadata from <a href="https://rubygems.org/">https://rubygems.org/</a>..<br>  Bundler: Resolving dependencies…<br>  Bundler: Using public_suffix 2.0.5<br>  Bundler: Using bundler 1.15.4<br>  Bundler: Using colorator 1.1.0<br>  Bundler: Using ffi 1.9.18<br>  Bundler: Using forwardable-extended 2.6.0<br>  Bundler: Using rb-fsevent 0.10.2<br>  Bundler: Using kramdown 1.14.0<br>  Bundler: Using liquid 4.0.0<br>  Bundler: Using mercenary 0.3.6<br>  Bundler: Using rouge 1.11.1<br>  Bundler: Using safe_yaml 1.0.4<br>  Bundler: Using addressable 2.5.1<br>  Bundler: Using rb-inotify 0.9.10<br>  Bundler: Using pathutil 0.14.0<br>  Bundler: Using sass-listen 4.0.0<br>  Bundler: Using listen 3.0.8<br>  Bundler: Using sass 3.5.1<br>  Bundler: Using jekyll-watch 1.5.0<br>  Bundler: Using jekyll-sass-converter 1.5.0<br>  Bundler: Using jekyll 3.5.2<br>  Bundler: Using jekyll-feed 0.9.2<br>  Bundler: Using minima 2.1.1<br>  Bundler: Bundle complete! 4 Gemfile dependencies, 22 gems now installed.<br>  Bundler: Use <code>bundle info [gemname]</code> to see where a bundled gem is installed.<br>New jekyll site installed in /home/username/my_blog.<br>$ cd my_blog<br>$ jekyll serve<br>…<br>…<br>…<br>Auto-regeneration: enabled for ‘/home/username/my_blog’<br>    Server address: <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a><br>  Server running… press ctrl-c to stop.<br>$  ls<br>404.html   about.md  _config.yml   Gemfile   Gemfile.lock   index.md   _posts   _site</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看jekyll页面效果：浏览器里输入-&gt; http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span><br>![Screenshot_20170823_204147.png](<span class="hljs-regexp">/images/</span>在Arch下通过jekyll搭建github%<span class="hljs-number">20</span>pages个人博客/Screenshot_20170823_204147.png)<br>这是本地显示的一种方式，弊端就是你必须得开着本地服务：jekyll serve ，不然会显示链接失败。<br><span class="hljs-comment">#####  6.上传至github，建立动态网页blog</span><br>在my_blog文件夹里找到名为_config.yml文件。这是jekyll的设置文件，我们在里面填入如下内容，其他设置都可以用默认选项，具体解释参见[官方网页](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mojombo/</span>jekyll<span class="hljs-regexp">/wiki/</span>Configuration)。<br></code></pre></td></tr></table></figure><p>baseurl: /my_blog</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">设置好了，还需要一个模板，在my_blog下创建一个_layouts目录，用于存放模板文件。并进入该目录，创建一个<span class="hljs-keyword">default</span>.html文件，作为B<span class="hljs-keyword">log</span>的默认模板，文件内容如下。<br></code></pre></td></tr></table></figure><p>$ mkdir _layouts<br>$ vim default.html<br>$ cat default.html<br><!DOCTYPE html></p><html><head><pre><code class="hljs">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;    &lt;title&gt;&#123;&#123; page.title &#125;&#125;&lt;/title&gt;</code></pre></head><body><pre><code class="hljs">    &#123;&#123; content &#125;&#125;</code></pre></body></html><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Jekyll使用[Liquid模板语言](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/shopify/</span>liquid<span class="hljs-regexp">/wiki/</span>liquid-<span class="hljs-keyword">for</span>-designers)，&#123;&#123; page.title &#125;&#125;表示文章标题，&#123;&#123; content &#125;&#125;表示文章内容，更多模板变量请参考[官方文档](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mojombo/</span>jekyll<span class="hljs-regexp">/wiki/</span>Template-Data)。<br>进入_posts,创建第一篇文章。格式必须为<span class="hljs-string">&quot;年-月-日-文章标题.后缀名&quot;</span>的格式。如果网页代码采用html格式，后缀名为html；如果采用[markdown](http:<span class="hljs-regexp">//</span>daringfireball.net<span class="hljs-regexp">/projects/m</span>arkdown/)格式，后缀名为md。）<br><br></code></pre></td></tr></table></figure><h2 id="cat-2017-08-22-hello-world-html"><a href="#cat-2017-08-22-hello-world-html" class="headerlink" title="$ cat 2017-08-22-hello-world.html"></a>$ cat 2017-08-22-hello-world.html</h2><p>layout: default<br>title: <a href="http://a.xiumi.us/board/v5/2Cb3c/54255420">你好，世界!</a></p><hr><p>…</p><p>我的第一篇文章</p>...<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">每篇文章的头部，必须有一个[yaml文件头](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/mojombo/</span>jekyll<span class="hljs-regexp">/wiki/</span>YAML-Front-Matter)，用来设置一些元数据。它用三根短划线<span class="hljs-string">&quot;---&quot;</span>，标记开始和结束，里面每一行设置一种元数据。<span class="hljs-string">&quot;layout:default&quot;</span>，表示该文章的模板使用_layouts目录下的default.html文件；<span class="hljs-string">&quot;title: 你好，世界&quot;</span>，表示该文章的标题是<span class="hljs-string">&quot;你好，世界&quot;</span>，如果不设置这个值，默认使用嵌入文件名的标题，即<span class="hljs-string">&quot;hello world&quot;</span>。<br>在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。&#123;&#123; page.title &#125;&#125;就是文件头中设置的<span class="hljs-string">&quot;你好，世界&quot;</span>，&#123;&#123; page.date &#125;&#125;则是嵌入文件名的日期（也可以在文件头重新定义date变量），<span class="hljs-string">&quot;| date_to_string&quot;</span>表示将page.date变量转化成人类可读的格式。<br>回到我们的根目录：<br></code></pre></td></tr></table></figure><p>$ cd my_blog<br>$ ls<br>404.html  about.md  _config.yml  Gemfile  Gemfile.lock  index.md  _posts  _site</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">将<span class="hljs-keyword">index</span>.md删掉，建立一个<span class="hljs-keyword">index</span>.html对应我们之前的<span class="hljs-number">2017</span><span class="hljs-number">-08</span><span class="hljs-number">-22</span>-hello-world.html ：<br></code></pre></td></tr></table></figure><p>$ rm -rfi ./index.md<br>rm：是否删除普通空文件 ‘./index.md’？y<br>$ vim index.html<br>$ cat index.html</p><hr><p>layout: default<br>title: 我的Blog</p><hr><h2></h2><p>最新文章</p><ul><pre><code class="hljs">    &#123;% for post in site.posts %&#125;                <li>&#123;&#123; post.date | date_to_string &#125;&#125; <a href="&#123; site.baseurl &#125;&#125;&#123;&#123; post.url &#125;&#125;">&#123;&#123; post.title&#125;&#125;</a></li>        &#123;% endfor %&#125;</code></pre></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">#####  <span class="hljs-number">7.</span>发布我们的<span class="hljs-keyword">code</span>到github仓库：<br></code></pre></td></tr></table></figure>$ git add .$ git commit -m "my  first blog"<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">登录自己的<span class="hljs-selector-tag">github</span>帐号，创建一个名为<span class="hljs-selector-tag">hello-world</span>的库。然后将<span class="hljs-selector-tag">git</span>本地仓库<span class="hljs-selector-tag">code</span>提交到<span class="hljs-selector-tag">hello-world</span>的库里。(username：是你的账户名。)<br></code></pre></td></tr></table></figure>$ git remote add origin https://github.com/username/hello-world.git$ git push origin gh-pages```上传成功之后，需要等待一会，然后输入http://username.github.io/hello-world/就可以看到Blog已经生成了。(username：是你的账户名。)<p><img src="/images/%E5%9C%A8Arch%E4%B8%8B%E9%80%9A%E8%BF%87jekyll%E6%90%AD%E5%BB%BAgithub%20pages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="效果图"></p><p><em><strong>「完」</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Jekyll</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度语音合成模块</title>
    <link href="/p/78e60a143a15.html"/>
    <url>/p/78e60a143a15.html</url>
    
    <content type="html"><![CDATA[<p>使用 python版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜   python3 -V<br>Python 3.6.4<br></code></pre></td></tr></table></figure><p>测试平台：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ArchLinux</span><br></code></pre></td></tr></table></figure><p>Source code：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python3</span><br><span class="hljs-comment">#  -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">from</span> aip <span class="hljs-keyword">import</span> AipSpeech<br><span class="hljs-keyword">import</span> subprocess,time,tempfile<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaiduTTS</span>():</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br><br>        <span class="hljs-string">&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;</span><br>        self.APP_ID = <span class="hljs-string">&#x27;此处填入个人 ID&#x27;</span><br>        self.API_KEY = <span class="hljs-string">&#x27;此处填入个人 KEY&#x27;</span><br>        self.SECRET_KEY = <span class="hljs-string">&#x27;此处填入个人 SECRET KEY&#x27;</span><br>        self.client = AipSpeech(self.APP_ID, self.API_KEY, self.SECRET_KEY)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_request</span>(<span class="hljs-params">self,words</span>):</span><br><br>        result  = self.client.synthesis(words, <span class="hljs-string">&#x27;zh&#x27;</span>, <span class="hljs-number">1</span>, &#123;<span class="hljs-string">&#x27;vol&#x27;</span> : <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;per&#x27;</span> : <span class="hljs-number">4</span>&#125; )<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(result, <span class="hljs-built_in">dict</span>):<br>            <span class="hljs-keyword">with</span> tempfile.NamedTemporaryFile(suffix=<span class="hljs-string">&#x27;.mp3&#x27;</span>,delete=<span class="hljs-literal">False</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(result)<br>                tmpfile = f.name<br>                <span class="hljs-keyword">return</span> tmpfile<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span>(<span class="hljs-params">self,words</span>):</span><br><br>        tmpfile = self.send_request(words)<br>        <span class="hljs-comment">#time.sleep(0.5)</span><br>        subprocess.call(<span class="hljs-string">&quot;play -q %s&quot;</span>%tmpfile,shell=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    b = BaiduTTS()<br>    b.say(<span class="hljs-string">&#x27;我们去打羽毛球吧！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>获得文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /tmp;ls<br>tmpuew_6sy9.mp3<br>$ file tmpuew_6sy9.mp3<br>tmpuew_6sy9.mp3: MPEG ADTS, layer III, v2,  16 kbps, 16 kHz, Monaural<br></code></pre></td></tr></table></figure><p> 语音合成方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">synthesis(self, text, lang=<span class="hljs-string">&#x27;zh&#x27;</span>, ctp=<span class="hljs-number">1</span>, options=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="center">参数</th><th align="center">类型</th><th align="center">描述</th><th align="center">是否必须</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">String</td><td align="center">合成的文本，使用UTF-8编码，请注意文本长度必须小于1024字节</td><td align="center">是</td></tr><tr><td align="center">lang</td><td align="center">String</td><td align="center">语言选择,填写zh</td><td align="center">是</td></tr><tr><td align="center">ctp</td><td align="center">String</td><td align="center">客户端类型选择，web端填写1</td><td align="center">是</td></tr><tr><td align="center">cuid</td><td align="center">String</td><td align="center">用户唯一标识，用来区分用户，填写机器 MAC 地址或 IMEI 码，长度为60以内</td><td align="center">否</td></tr><tr><td align="center">spd</td><td align="center">String</td><td align="center">语速，取值0-9，默认为5中语速</td><td align="center">否</td></tr><tr><td align="center">pit</td><td align="center">String</td><td align="center">音调，取值0-9，默认为5中语调</td><td align="center">否</td></tr><tr><td align="center">vol</td><td align="center">String</td><td align="center">音量，取值0-15，默认为5中音量</td><td align="center">否</td></tr><tr><td align="center">per</td><td align="center">String</td><td align="center">发音人选择, 0为女声，1为男声，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为 0 普通女声</td><td align="center">否</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写一个对时间段的判断</title>
    <link href="/p/c5657e134020.html"/>
    <url>/p/c5657e134020.html</url>
    
    <content type="html"><![CDATA[<p>要求：python3.x<br>模块：datetime<br>测试平台：ArchLinux</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># !/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">currenttime</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    凌晨：0-5</span><br><span class="hljs-string">    早晨：5-8</span><br><span class="hljs-string">    上午：8-11</span><br><span class="hljs-string">    中午：11-13</span><br><span class="hljs-string">    下午：13-16</span><br><span class="hljs-string">    傍晚：16-19</span><br><span class="hljs-string">    晚上：19-24</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># H:M:S</span><br>    time_table = [(<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&quot;凌晨&quot;</span>),<br>            (<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&quot;早晨&quot;</span>),<br>            (<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&quot;上午&quot;</span>),<br>            (<span class="hljs-string">&#x27;11&#x27;</span>,<span class="hljs-string">&quot;中午&quot;</span>),<br>            (<span class="hljs-string">&#x27;13&#x27;</span>,<span class="hljs-string">&quot;下午&quot;</span>),<br>            (<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&quot;傍晚&quot;</span>),<br>            (<span class="hljs-string">&#x27;19&#x27;</span>,<span class="hljs-string">&quot;晚上&quot;</span>)<br>            ]<br>    date = time.asctime().split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">3</span>].split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    <span class="hljs-comment">#print(&#x27;date: &#x27;,date)</span><br>    date_mark = <span class="hljs-string">&#x27;&#x27;</span><br>    hour = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> time_table:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">0</span>]) &gt; <span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">if</span> time_table.index(i) == <span class="hljs-number">6</span>:<br>                date_mark = time_table[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">0</span>])==<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]):<br>                date_mark = i[<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">break</span><br>            date_mark = time_table[time_table.index(i)-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">0</span>]) &lt; <span class="hljs-number">12</span>:<br>        hour = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(date[<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        hour = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(date[<span class="hljs-number">0</span>])-<span class="hljs-number">12</span>)<br><br>    str_time = <span class="hljs-string">&#x27;现在是%s %s点 %s分&#x27;</span>%(date_mark,hour,date[<span class="hljs-number">1</span>])<span class="hljs-comment">#,date[2])</span><br><br>    <span class="hljs-built_in">print</span>(str_time)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    currenttime()<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3  currenttime.py<br>现在是 晚上 10点 50分<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云语音合成API鉴权与语音合成实现</title>
    <link href="/p/aa52d63b355a.html"/>
    <url>/p/aa52d63b355a.html</url>
    
    <content type="html"><![CDATA[<p>使用 python版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜   python3 -V<br>Python 3.6.4<br></code></pre></td></tr></table></figure><p>Source code：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python3</span><br><span class="hljs-comment">#  -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> tempfile<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alibaba</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br><br>        self.__ak_id = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 替换个人用户 id</span><br>        self.__ak_secret = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 替换个人用户 secret</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__current_gmt_time</span>(<span class="hljs-params">self</span>):</span><br><br>        date = datetime.datetime.strftime(datetime.datetime.utcnow(), <span class="hljs-string">&quot;%a, %d %b %Y %H:%M:%S GMT&quot;</span>)<br>        <span class="hljs-keyword">return</span> date<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__md5_base64</span>(<span class="hljs-params">self, body</span>):</span><br><br>        <span class="hljs-built_in">hash</span> = hashlib.md5()<br>        <span class="hljs-built_in">hash</span>.update(body)<br>        str_hex = <span class="hljs-built_in">hash</span>.digest()<br>        <span class="hljs-keyword">return</span> base64.b64encode(str_hex)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__sha1_base64</span>(<span class="hljs-params">self, str_to_sign, secret</span>):</span><br><br>        hmacsha1 = hmac.new(secret.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), str_to_sign.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), hashlib.sha1)<br>        <span class="hljs-keyword">return</span> base64.b64encode(hmacsha1.digest()).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_request</span>(<span class="hljs-params">self,phrase</span>):</span><br><br>        options = &#123; <span class="hljs-string">&#x27;method&#x27;</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>                    <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;http://nlsapi.aliyun.com/speak?encode_type=mp3&amp;voice_name=xiaoyun&amp;volume=50&#x27;</span>,<br>                    <span class="hljs-string">&#x27;body&#x27;</span>:phrase.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>                    &#125;<br>        headers = &#123;<br>                    <span class="hljs-string">&#x27;Authorization&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>                    <span class="hljs-string">&#x27;Content-type&#x27;</span>:<span class="hljs-string">&#x27;text/plain&#x27;</span>,<br>                    <span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;audio/mp3,application/json&#x27;</span>,<br>                    <span class="hljs-string">&#x27;Date&#x27;</span>:self.__current_gmt_time()<br>                &#125;<br>        bodyMd5 = self.__md5_base64(options[<span class="hljs-string">&#x27;body&#x27;</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>        feature = options[<span class="hljs-string">&#x27;method&#x27;</span>]+<span class="hljs-string">&#x27;\n&#x27;</span>+headers[<span class="hljs-string">&#x27;Accept&#x27;</span>]+<span class="hljs-string">&#x27;\n&#x27;</span>+bodyMd5+<span class="hljs-string">&#x27;\n&#x27;</span>\<br>                                    +headers[<span class="hljs-string">&#x27;Content-type&#x27;</span>]+<span class="hljs-string">&#x27;\n&#x27;</span>+headers[<span class="hljs-string">&#x27;Date&#x27;</span>]<br>        signature = self.__sha1_base64(feature,self.__ak_secret)<br><br>        headers[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-string">&quot;Dataplus &quot;</span> + self.__ak_id + <span class="hljs-string">&quot;:&quot;</span> + signature<br><br>        req = requests.post(options[<span class="hljs-string">&#x27;url&#x27;</span>], data=options[<span class="hljs-string">&#x27;body&#x27;</span>], headers=headers)<br>        <span class="hljs-comment">#print(req.json())</span><br>        <span class="hljs-keyword">with</span> tempfile.NamedTemporaryFile(suffix=<span class="hljs-string">&#x27;.mp3&#x27;</span>,delete=<span class="hljs-literal">False</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(req.content)<br>            tmpfile = f.name<br>            <span class="hljs-keyword">return</span> tmpfile<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    a = Alibaba()<br>    a.send_request(<span class="hljs-string">&#x27;今天天气怎么样?&#x27;</span>) <span class="hljs-comment"># 输入要合成语音的文字</span><br></code></pre></td></tr></table></figure><p>获得文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmp91s93ebe.mp3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Sox不能播放mp3文件</title>
    <link href="/p/6fc10557063b.html"/>
    <url>/p/6fc10557063b.html</url>
    
    <content type="html"><![CDATA[<p>在Archlinux官方源安装了sox之后，发现并没有对mp3的支持，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file tmpc0n6yqzh.mp3<br>tmpc0n6yqzh.mp3: MPEG ADTS, layer III, v2,  64 kbps, 16 kHz, Monaural<br><br>$ play tmpc0n6yqzh.mp3<br>play FAIL formats: no handler <span class="hljs-keyword">for</span> file extension `mp3<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>搜索一番之后发现，需要重新编译源码，然后在安装才能完整的对音频文件的支持。</p><ol><li> 下载<a href="https://sourceforge.net/projects/sox/files/sox/">sox源码</a>(可能需要翻墙)，<br>我把它下载啦下来存到了<a href="https://pan.baidu.com/s/10EKCppGEps6bnsYRKOn5kw">网盘</a>，有需要的可以自行下载<br>这里下载版本的是：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sox-14.4.2.tar.gz<br></code></pre></td></tr></table></figure></li><li>解压<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar -zxvf  sox-14.4.2.tar.gz<br></code></pre></td></tr></table></figure></li><li>编译&amp;&amp;安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  进入sox-14.4.2文件夹</span><br> $ <span class="hljs-built_in">cd</span> sox-14.4.2<br>$ ./configure<br>$ make<br>$ sudo make install<br></code></pre></td></tr></table></figure></li><li>重新安装sox<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo pacman -S sox<br></code></pre></td></tr></table></figure></li><li>测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ play tmpc0n6yqzh.mp3<br><br>play WARN mp3-util: MAD lost sync<br>play WARN mp3-util: MAD lost sync<br><br>tmpc0n6yqzh.mp3:<br><br> File Size: 61.6k     Bit Rate: 49.6k<br>  Encoding: MPEG audio<br>  Channels: 1 @ 16-bit<br>Samplerate: 16000Hz<br>Replaygain: off<br>  Duration: 00:00:09.94<br><br>In:100%  00:00:09.94 [00:00:00.00] Out:159k  [      |      ] Hd:3.6 Clip:0<br>Done.<br></code></pre></td></tr></table></figure>完成。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Sox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux&amp;windows双系统下访问ntfs分区</title>
    <link href="/p/5c4f7f968c4c.html"/>
    <url>/p/5c4f7f968c4c.html</url>
    
    <content type="html"><![CDATA[<h4 id="1-关于mount的挂载"><a href="#1-关于mount的挂载" class="headerlink" title="1.关于mount的挂载"></a>1.关于mount的挂载</h4><p><strong>注意</strong>：在Linux系统中所有的设备都看作<strong>文件</strong>，因此只需要使用挂载命令mount将 Windows 的分区挂载到 Linux下即可实现访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; mount 命令的使用格式是：</span><br><span class="hljs-string">&quot;</span> mount [-afFhnrvVw] [-L&lt;标签&gt;] [-o&lt;选项&gt;] [-t&lt;文件系统类型&gt;] [设备名] [加载点]<br>$ sudo mount -t ntfs-3g /dev/sdx linux-path<br></code></pre></td></tr></table></figure><p>这里需要注意的是：<br><strong>参数</strong>：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">====================================================================<br>      <span class="hljs-string">sudo</span>：表示需要管理员权限<br>-<span class="hljs-string">t</span> <span class="hljs-string">ntfs-3g</span>：这里指定设备的文件系统类型，【<span class="hljs-string">ntfs-3g</span>】需要单独安装<br>  /<span class="hljs-string">dev</span>/<span class="hljs-string">sdx</span>：这是被访问的<span class="hljs-string">windows</span>分区，可以使用【<span class="hljs-string">sudo</span> <span class="hljs-string">fdisk</span> -<span class="hljs-string">l</span>】查看分区<br><span class="hljs-string">linux-path</span>：这是挂载到<span class="hljs-string">Linux</span>的一个挂载点，即可以是一个文件夹，【<span class="hljs-string">eg</span>：/<span class="hljs-string">home</span>/<span class="hljs-string">test</span>】<br>====================================================================<br><span class="hljs-string">&quot; 具体参数如下：</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> <span class="hljs-string">Linux</span>下可以使用以下命令查看<span class="hljs-string">mount</span>的用法：<br>$ <span class="hljs-string">man</span> <span class="hljs-string">mount</span><br><span class="hljs-string"></span>-<span class="hljs-string">a</span> 加载文件/<span class="hljs-string">etc</span>/<span class="hljs-string">fstab</span>中设置的所有设备。<br>-<span class="hljs-string">f</span> 不实际加载设备。可与-<span class="hljs-string">v</span>等参数同时使用以查看<span class="hljs-string">mount</span>的执行过程。<br>-<span class="hljs-string">F</span> 需与-<span class="hljs-string">a</span>参数同时使用。所有在/<span class="hljs-string">etc</span>/<span class="hljs-string">fstab</span>中设置的设备会被同时加载，可加快执行速度。<br>-<span class="hljs-string">h</span> 显示在线帮助信息。<br>-<span class="hljs-string">L</span>&lt;标签&gt; 加载文件系统标签为&lt;标签&gt;的设备。<br>-<span class="hljs-string">n</span> 不将加载信息记录在/<span class="hljs-string">etc</span>/<span class="hljs-string">mtab</span>文件中。<br>-<span class="hljs-string">o</span>&lt;选项&gt; 指定加载文件系统时的选项。有些选项也可在/<span class="hljs-string">etc</span>/<span class="hljs-string">fstab</span>中使用。这些选项包括：<br><span class="hljs-string">async</span> 以非同步的方式执行文件系统的输入输出动作。<br><span class="hljs-string">atime</span> 每次存取都更新<span class="hljs-string">inode</span>的存取时间，默认设置，取消选项为<span class="hljs-string">noatime</span>。<br><span class="hljs-string">auto</span> 必须在/<span class="hljs-string">etc</span>/<span class="hljs-string">fstab</span>文件中指定此选项。执行-<span class="hljs-string">a</span>参数时，会加载设置为<span class="hljs-string">auto</span>的设备，取消选取为<span class="hljs-string">noauto</span>。<br><span class="hljs-string">defaults</span> 使用默认的选项。默认选项为<span class="hljs-string">rw</span>、<span class="hljs-string">suid</span>、<span class="hljs-string">dev</span>、<span class="hljs-string">exec</span>、<span class="hljs-string">anto</span> <span class="hljs-string">nouser</span>与<span class="hljs-string">async</span>。<br><span class="hljs-string">dev</span> 可读文件系统上的字符或块设备，取消选项为<span class="hljs-string">nodev</span>。<br><span class="hljs-string">exec</span> 可执行二进制文件，取消选项为<span class="hljs-string">noexec</span>。<br><span class="hljs-string">noatime</span> 每次存取时不更新<span class="hljs-string">inode</span>的存取时间。<br><span class="hljs-string">noauto</span> 无法使用-<span class="hljs-string">a</span>参数来加载。<br><span class="hljs-string">nodev</span> 不读文件系统上的字符或块设备。<br><span class="hljs-string">noexec</span> 无法执行二进制文件。<br><span class="hljs-string">nosuid</span> 关闭<span class="hljs-built_in">set-user-identifier(设置用户ID)与set-group-identifer(设置组ID)设置位。</span><br><span class="hljs-built_in">nouser</span> 使一位用户无法执行加载操作，默认设置。<br><span class="hljs-string">remount</span> 重新加载设备。通常用于改变设备的设置状态。<br><span class="hljs-string">ro</span> 以只读模式加载。<br><span class="hljs-string">rw</span> 以可读写模式加载。<br><span class="hljs-string">suid</span> 启动<span class="hljs-built_in">set-user-identifier(设置用户ID)与set-group-identifer(设置组ID)设置位，取消选项为nosuid。</span><br><span class="hljs-built_in">sync</span> 以同步方式执行文件系统的输入输出动作。<br><span class="hljs-string">user</span> 可以让一般用户加载设备。<br><br>-<span class="hljs-string">r</span> 以只读方式加载设备。<br>-<span class="hljs-string">t</span>&lt;文件系统类型&gt; 指定设备的文件系统类型。常用的选项说明有：<br><span class="hljs-string">minix</span> <span class="hljs-string">Linux</span>最早使用的文件系统。<br><span class="hljs-string">ext2</span> <span class="hljs-string">Linux</span>目前的常用文件系统。<br><span class="hljs-string">msdos</span> <span class="hljs-string">MS-DOS</span> 的 <span class="hljs-string">FAT</span>。<br><span class="hljs-string">vfat</span> <span class="hljs-string">Win85</span>/<span class="hljs-string">98</span> 的 <span class="hljs-string">VFAT</span>。<br><span class="hljs-string">nfs</span> 网络文件系统。<br><span class="hljs-string">iso9660</span> <span class="hljs-string">CD-ROM</span>光盘的标准文件系统。<br><span class="hljs-string">ntfs</span> <span class="hljs-string">Windows</span> <span class="hljs-string">NT</span>的文件系统。<br><span class="hljs-string">hpfs</span> <span class="hljs-string">OS</span>/<span class="hljs-string">2</span>文件系统。<span class="hljs-string">Windows</span> <span class="hljs-string">NT</span> <span class="hljs-string">3</span>.<span class="hljs-string">51</span>之前版本的文件系统。<br><span class="hljs-string">auto</span> 自动检测文件系统。<br>-<span class="hljs-string">v</span> 执行时显示详细的信息。<br>-<span class="hljs-string">V</span> 显示版本信息。<br>-<span class="hljs-string">w</span> 以可读写模式加载设备，默认设置。<br><br></code></pre></td></tr></table></figure><h4 id="2-关于文字显示"><a href="#2-关于文字显示" class="headerlink" title="2.关于文字显示"></a>2.关于文字显示</h4><p>由于linux与windows是两个完全不同的系统，对于编码方式也是各有差异，所以当你挂载完windows想要访问时，你会发现，突然出现很多的【？？？？】<br>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; -o iocharset=cp936</span><br><span class="hljs-string">&quot;</span> -o iocharset=gb2312<br><span class="hljs-string">&quot; -o iocharset=utf8</span><br><span class="hljs-string">$ sudo mount -o iocharset=utf8 -t ntfs-3g /dev/sdx linux-path</span><br></code></pre></td></tr></table></figure><p>三种加参数方式都可以，意在挂载分区时选择字符串的编码方式，对于中文来说上述三种都支持，推荐使用【utf8】，这中编码兼容了前面两种，字符集更大。</p><h4 id="3-关于卸载挂载分区"><a href="#3-关于卸载挂载分区" class="headerlink" title="3.关于卸载挂载分区"></a>3.关于卸载挂载分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo umount linux-path<br>========================================<br>umount :mount 的反操作<br></code></pre></td></tr></table></figure><h4 id="4-关于开机自动挂载的配置"><a href="#4-关于开机自动挂载的配置" class="headerlink" title="4.关于开机自动挂载的配置"></a>4.关于开机自动挂载的配置</h4><p>开机配置文件：/etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; 在etc目录下找到fstab文件，在最下面一行添加如下内容即可：</span><br><span class="hljs-string">$ sudo vim /etc/fstab</span><br><span class="hljs-string">...</span><br><span class="hljs-string">...</span><br><span class="hljs-string">/dev/sdbx linux-path ntfs-3g default 0 0</span><br></code></pre></td></tr></table></figure><p><strong>fstab的小知识点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; 关于fstab这个文件的描述说明如下:</span><br><span class="hljs-string">&quot;</span> 要求：<br><span class="hljs-string">&quot; 1）根目录/必须载入，而且要先于其他载入点被载入</span><br><span class="hljs-string">&quot;</span> 2）其他载入点必须为已建立的目录<br><span class="hljs-string">&quot; 3）若进行卸载，必须先将工作目录移到载入点及其子目录之外</span><br><span class="hljs-string">&quot;</span> ====================================================<br>▶ cat /etc/fstab<br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  /etc/fstab: static file system information</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  &lt;file system&gt;        &lt;dir&gt;           &lt;type&gt;           &lt;options&gt;                     &lt;dump&gt;  &lt;pass&gt;</span><br><br>/dev/nvme0n1p5          /               ext4            rw,relatime,data=ordered        0         1<br><br>/dev/sda2               /home           ext4            rw,relatime,data=ordered        0         2<br><br>/swapfile               none            swap            defaults                        0         0<br><br>/dev/sdb1              /home/<span class="hljs-built_in">test</span>       ntfs-3g         default                         0         0<br><br><span class="hljs-string">&quot; ====================================================</span><br><span class="hljs-string">&lt;file system&gt;：设备号或该设备的卷标</span><br><span class="hljs-string">        &lt;dir&gt;：挂载点</span><br><span class="hljs-string">       &lt;type&gt;：文件系统</span><br><span class="hljs-string">    &lt;options&gt;：文件系统参数</span><br><span class="hljs-string">       &lt;dump&gt;: demp命令备份。0：不备份，1：备份，2：备份，但比1重要性小。</span><br><span class="hljs-string">               设置了该参数后，Linux中使用dump命令备份系统的时候就可以备份相应设置的挂载点了。</span><br><span class="hljs-string">       &lt;pass&gt;：系统启动用fsck检验分区。0：不检验，1：要检验，2要检验，但比1晚检验。</span><br><span class="hljs-string">               一般根目录设置为1，其他设置为2就可以了。</span><br><span class="hljs-string">               因为有些挂载点是不需要检验的，比如：虚拟内存swap、/proc等</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Windows</tag>
      
      <tag>NTFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arch安装ssh及配置登录笔记本</title>
    <link href="/p/ceceb772e78b.html"/>
    <url>/p/ceceb772e78b.html</url>
    
    <content type="html"><![CDATA[<p>1.安装ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo pacman -S openssh<br></code></pre></td></tr></table></figure><p>2.设置开机自动启动<strong>ssh</strong>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl <span class="hljs-built_in">enable</span> sshd<br></code></pre></td></tr></table></figure><p>3.手动方式启动 <strong>ssh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl start sshd<br></code></pre></td></tr></table></figure><p>4.配置ssh：<strong>白名单设置</strong></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vala">$ sudo vim /etc/ssh/sshd_config<br><span class="hljs-meta">#  在文件的最后面添加</span><br><span class="hljs-meta"># ================================================</span><br>...<br><span class="hljs-meta">#  Example of overriding settings on a per-user basis</span><br><span class="hljs-meta"># Match User anoncvs</span><br><span class="hljs-meta">#        X11Forwarding no</span><br><span class="hljs-meta">#        AllowTcpForwarding no</span><br><span class="hljs-meta">#        PermitTTY no</span><br><span class="hljs-meta">#        ForceCommand cvs server</span><br>AllowUsers username@ipaddr  # 新增<br><span class="hljs-meta"># ================================================</span><br><span class="hljs-meta">#  eg：AllowUsers 菜鸟F@127.0.0.1 那么此电脑只允许 127.0.0.1 这个ip用户登录</span><br><span class="hljs-meta"># ================================================</span><br></code></pre></td></tr></table></figure><p>5.最后重启ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl restart sshd<br></code></pre></td></tr></table></figure><h2 id="关于远程传输数据-–-scp"><a href="#关于远程传输数据-–-scp" class="headerlink" title="关于远程传输数据 – scp"></a>关于远程传输数据 – scp</h2><p>scp是有Security的文件copy，基于ssh登录。</p><p>本地传输至远程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp file username@ipaddr:path<br><span class="hljs-comment"># =====================================</span><br><span class="hljs-comment">#  eg:</span><br>$ scp /home/fqf/Arch.png pi@127.0.0.1:/home/pi<br>pi@127.0.0.1<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">Arch.png                                          100%   16KB   1.1MB/s   00:00</span><br></code></pre></td></tr></table></figure><p>远程传输至本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp username@ipaddr:file path<br><span class="hljs-comment"># =====================================</span><br><span class="hljs-comment">#  eg:</span><br>$ scp pi@127.0.0.1:/home/pi/text.txt   /home/fqf<br>pi@127.0.0.1<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">text.txt                                        100%   13     8.3KB/s   00:00</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arch安装fcitx输入法</title>
    <link href="/p/98e15af90d7c.html"/>
    <url>/p/98e15af90d7c.html</url>
    
    <content type="html"><![CDATA[<p>1.安装fcitx软件及配置工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S fcitx fcitx-im fcitx-configtool<br></code></pre></td></tr></table></figure><p>即装即用！</p><p>2.安装官方源中文字体</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -S noto-fonts-cjk</span><br></code></pre></td></tr></table></figure><p>3.添加对 gtk、qt的支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  /etc/profile文件，在文件开头加入三行：</span><br><br><span class="hljs-built_in">export</span> XMODIFIERS=<span class="hljs-string">&quot;@im=fcitx&quot;</span><br><span class="hljs-built_in">export</span> GTK_IM_MODULE=<span class="hljs-string">&quot;fcitx&quot;</span><br><span class="hljs-built_in">export</span> QT_IM_MODULE=<span class="hljs-string">&quot;fcitx&quot;</span><br>...<br>..<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Fcitx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装 plank 及相关配置</title>
    <link href="/p/551b54c6d29d.html"/>
    <url>/p/551b54c6d29d.html</url>
    
    <content type="html"><![CDATA[<p>1.安装<br>arch官方源中有plank包，可以直接安装：<br>也可以去查看<a href="https://wiki.archlinux.org/index.php/Plank">archwiki</a>的说明文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo pacman -S plank<br><br>正在解决依赖关系...<br>正在查找软件包冲突...<br><br>软件包 (1) plank-0.11.4-1<br><br>全部安装大小：  2.07 MiB<br>净更新大小：  0.00 MiB<br><br>:: 进行安装吗？ [Y/n] y<br></code></pre></td></tr></table></figure><p>2.运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  如果直接运行会默认创建 dock1 的主题</span><br>▶ plank<br><span class="hljs-comment">#  如果需要取名字则可以如下方式创建一个名为newplank的主题</span><br>▶ plank -n newdock<br></code></pre></td></tr></table></figure><p>3.配置<br>这里设置plank的配置文件在 ：/usr/share/plank/themes/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">▶ <span class="hljs-built_in">cd</span> /usr/share/plank/themes<br>▶ ls<br>Default  Matte  Transparent<br><span class="hljs-comment">#  这里有选用默认的主题配置Default</span><br>▶ <span class="hljs-built_in">cd</span> Default<br>▶ ls<br>dock.theme   <span class="hljs-comment"># 这是主题的配置文件</span><br></code></pre></td></tr></table></figure><p>配置文件每一行都有相应的注释说明，可以自己修改调试，也可以参考我的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash">▶ cat dock.theme<br><span class="hljs-comment"># This file auto-generated by Plank.</span><br><span class="hljs-comment"># 2016-03-12T14:53:46+0000</span><br><br>[PlankTheme]<br><span class="hljs-comment"># The roundness of the top corners.</span><br>TopRoundness=10<br><span class="hljs-comment"># The roundness of the bottom corners.</span><br>BottomRoundness=0<br><span class="hljs-comment"># The thickness (in pixels) of lines drawn.</span><br>LineWidth=0<br><span class="hljs-comment"># The color (RGBA) of the outer stroke.</span><br>OuterStrokeColor=41;;41;;41;;255<br><span class="hljs-comment"># The starting color (RGBA) of the fill gradient.</span><br>FillStartColor=41;;41;;41;;255<br><span class="hljs-comment"># The ending color (RGBA) of the fill gradient.</span><br>FillEndColor=80;;80;;80;;255<br><span class="hljs-comment"># The color (RGBA) of the inner stroke.</span><br>InnerStrokeColor=255;;255;;255;;255<br><br>[PlankDockTheme]<br><span class="hljs-comment"># The padding on the left/right dock edges, in tenths of a percent of IconSize.</span><br>HorizPadding=-100<br><span class="hljs-comment"># The padding on the top dock edge, in tenths of a percent of IconSize.</span><br>TopPadding=5<br><span class="hljs-comment"># The padding on the bottom dock edge, in tenths of a percent of IconSize.</span><br>BottomPadding=30<br><span class="hljs-comment"># The padding between items on the dock, in tenths of a percent of IconSize.</span><br>ItemPadding=6<br><span class="hljs-comment"># The size of item indicators, in tenths of a percent of IconSize.</span><br>IndicatorSize=0<br><span class="hljs-comment"># The size of the icon-shadow behind every item, in tenths of a percent of IconSize.</span><br>IconShadowSize=10<br><span class="hljs-comment"># The height (in percent of IconSize) to bounce an icon when the application sets urgent.</span><br>UrgentBounceHeight=1.6666666666666667<br><span class="hljs-comment"># The height (in percent of IconSize) to bounce an icon when launching an application.</span><br>LaunchBounceHeight=0.625<br><span class="hljs-comment"># The opacity value (0 to 1) to fade the dock to when hiding it.</span><br>FadeOpacity=1<br><span class="hljs-comment"># The amount of time (in ms) for click animations.</span><br>ClickTime=300<br><span class="hljs-comment"># The amount of time (in ms) to bounce an urgent icon.</span><br>UrgentBounceTime=600<br><span class="hljs-comment"># The amount of time (in ms) to bounce an icon when launching an application.</span><br>LaunchBounceTime=600<br><span class="hljs-comment"># The amount of time (in ms) for active window indicator animations.</span><br>ActiveTime=300<br><span class="hljs-comment"># The amount of time (in ms) to slide icons into/out of the dock.</span><br>SlideTime=300<br><span class="hljs-comment"># The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &lt; 1).</span><br>FadeTime=250<br><span class="hljs-comment"># The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).</span><br>HideTime=250<br><span class="hljs-comment"># The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.</span><br>GlowSize=30<br><span class="hljs-comment"># The total time (in ms) to show the hidden-dock urgent glow.</span><br>GlowTime=10000<br><span class="hljs-comment"># The time (in ms) of each pulse of the hidden-dock urgent glow.</span><br>GlowPulseTime=2000<br><span class="hljs-comment"># The hue-shift (-180 to 180) of the urgent indicator color.</span><br>UrgentHueShift=150<br><span class="hljs-comment"># The time (in ms) to move an item to its new position or its addition/removal to/from the dock.</span><br>ItemMoveTime=450<br><span class="hljs-comment"># Whether background and icons will unhide/hide with different speeds. The top-border of both will leave/hit the screen-edge at the same time.</span><br>CascadeHide=flase<br></code></pre></td></tr></table></figure><p>4.添加底部应用程序<br>配置文件在：/home/fqf/.config/plank</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">▶ <span class="hljs-built_in">cd</span> ~/.config/plank<br>▶ ls      <span class="hljs-comment"># 查看创建的plank主题，这里选择默认的 dock1 来作为解释</span><br>dock1<br>▶ <span class="hljs-built_in">cd</span> ldock1/launchers<br>▶ ls     <span class="hljs-comment"># 添加应用程序的格式  name.dockitem</span><br>electronic-wechat.dockitem  google-chrome.dockitem  org.kde.dragonplayer.dockitem<br>firefox.dockitem            nohup.out               org.kde.konsole.dockitem<br>▶ cat firefox.dockitem      <span class="hljs-comment"># name.dockitem内容如下：</span><br>[PlankDockItemPreferences]<br>Launcher=file:///usr/share/applications/firefox.desktop<br><span class="hljs-comment"># ------------------------------------------------------------------------</span><br><span class="hljs-comment">#  所以我们只需要 cp 其中的一个name.dockitem</span><br><span class="hljs-comment">#  在目录 /usr/share/applications/ 找到你需要添加的应用程序名字</span><br><span class="hljs-comment">#  Launcher=file:///usr/share/applications/firefox.desktop</span><br><span class="hljs-comment">#  并在最后替换掉即可</span><br><span class="hljs-comment">#  Launcher=file:///usr/share/applications/google-chrome.desktop</span><br></code></pre></td></tr></table></figure><p>最后来一张效果图：</p><p><img src="/images/%E5%AE%89%E8%A3%85%20plank%20%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/plank%E9%85%8D%E7%BD%AE%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="plank配置效果图"><br>linux 小知识：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">一般在终端执行程序时，当你关掉终端之后，之前打开的程序也随着关掉了，那么可以使用：<br>nohup 命令 &amp;      <span class="hljs-comment">#这句命令意思是当前执行的 程序/命令 不挂起并放置后台运行。</span><br>eg：<br>▶ nohup plank &amp;<br>[1] 14524<br>nohup: 忽略输入并把输出追加到<span class="hljs-string">&#x27;nohup.out&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Plank</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch安装zsh以及通过 Oh-My-ZSH! 开源项目的配置</title>
    <link href="/p/a67f82a913ce.html"/>
    <url>/p/a67f82a913ce.html</url>
    
    <content type="html"><![CDATA[<p>1 首先：安装官方源的 zsh</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo pacman -S zsh<br></code></pre></td></tr></table></figure><p>oh-my-zsh安装方式有两种，下面选其中一种即可<br>1.1 脚本一键自动安装 oh-my-zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>1.2 手动安装 oh-my-zsh</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo pacman -S git<br>$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/skillf-qf/</span>ohmyzsh.git<br>$ cd .<span class="hljs-regexp">/ohmyzsh/</span>tools/<br>$ ./install.sh<br></code></pre></td></tr></table></figure><p>2 设置zsh为默认shell：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chsh -s <span class="hljs-regexp">/bin/</span>zsh skillf   <span class="hljs-comment"># skillf 为用户名</span><br></code></pre></td></tr></table></figure><p>3 修改主题</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># ==========================================================================</span><br><span class="hljs-meta">#  主题的设置文件在 ： ~/.zshrc</span><br><span class="hljs-meta">#  主题的存放目录在 ： ~/.oh-my-zsh/themes</span><br><span class="hljs-meta">#  推荐主题       ： ZSH_THEME=<span class="hljs-string">&quot;ys&quot;</span></span><br><span class="hljs-meta"># ==========================================================================</span><br>ZSH_THEME=<span class="hljs-string">&quot;robbyrussel&quot;</span>    <span class="hljs-meta"># 这是默认主题 robbyrussel ，更改别的主题只需替换这个名字即可。</span><br>ZSH_THEME=<span class="hljs-string">&quot;random&quot;</span>         <span class="hljs-meta"># 如果一时之间找不到合适的，可以用：random 这里会随机获取主题。</span><br>$ echo $RANDOM_THEME       <span class="hljs-meta"># 然后使用 echo 命令读取当前主题，可以将喜欢的主题保存到 ZSH_THEME。</span><br></code></pre></td></tr></table></figure><p>4 给history命令增加时间</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ vim ~<span class="hljs-string">/.zshrc</span><br>HIST_STAMPS=<span class="hljs-string">&quot;yyyy-mm-dd&quot;</span><br>source ~<span class="hljs-string">/.zshrc</span><br></code></pre></td></tr></table></figure><p>5 更新oh-my-zsh</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#  设置自动更新oh-my-zsh : ~/.zshrc</span><br>DISABLE_UPDATE_PROMPT=<span class="hljs-literal">true</span><br><span class="hljs-meta">#  加入需要手动更新</span><br>$ upgrade_oh_my_zsh<br></code></pre></td></tr></table></figure><p>6 添加插件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#  插件存放的目录 ： ~/.oh-my-zsh/plugins</span><br><span class="hljs-comment">#  添加插件 plugins=(插件名) 默认启用git插件</span><br><br>$ cd ~<span class="hljs-regexp">/.oh-my-zsh/</span>plugins<br>$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-syntax-highlighting<br>$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-autosuggestions<br>$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/robbyrussell/</span>oh-my-zsh<span class="hljs-regexp">/tree/m</span>aster<span class="hljs-regexp">/plugins/</span>history-substring-search<br>$ vim ~/.zshrc<br><br><span class="hljs-comment"># 找到 plugins=(git) 并修改为以下内容</span><br><br>plugins=(<br>git<br>zsh-syntax-highlighting<br>        zsh-autosuggestions<br>        history-substring-search<br>)<br></code></pre></td></tr></table></figure><p>更多插件可参考<br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a><br><a href="https://github.com/unixorn/awesome-zsh-plugins">https://github.com/unixorn/awesome-zsh-plugins</a><br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></p><p>7 关于卸载</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">uninstall_oh_my_zsh</span>  <span class="hljs-comment"># 直接命令行输入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python关于解码的问题</title>
    <link href="/p/92c750557dc3.html"/>
    <url>/p/92c750557dc3.html</url>
    
    <content type="html"><![CDATA[<p>decode：把一种编码转换成 unicode —&gt; 解码</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python-repl">#  byte -&gt; str<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">a =<span class="hljs-string">b&#x27;hello&#x27;</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">a</span><br>b&#x27;hello&#x27;<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">a.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)</span><br>&#x27;hello&#x27;<br><span class="hljs-meta">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>encode：把unicode转换成另一种编码  —&gt; 编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  str -&gt; byte</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-string">b&#x27;hello&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python之函数常用小技巧</title>
    <link href="/p/f5c95e39f4ae.html"/>
    <url>/p/f5c95e39f4ae.html</url>
    
    <content type="html"><![CDATA[<h5 id="1-字符串处理方法：strip-函数"><a href="#1-字符串处理方法：strip-函数" class="headerlink" title="1. 字符串处理方法：strip()函数"></a>1. 字符串处理方法：strip()函数</h5><h6 id="1-1-原型及使用方法"><a href="#1-1-原型及使用方法" class="headerlink" title="1.1 原型及使用方法"></a>1.1 原型及使用方法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">string.strip(s[, chars])<br><br>工作原理：首先复制源字符串，然后进行字符串切片删除处理。<br>注意：仅仅是返回一个副本字符串，并不改变源字符串，所以一般配合赋值 “ = ” 来改变源字符串。<br>  <span class="hljs-number">1.</span> 当chars为<span class="hljs-literal">None</span>时，默认删除前后两端空格字符，并返回处理后的字符串副本。<br>  <span class="hljs-number">2.</span> 当chars为非<span class="hljs-literal">None</span>时（必须为字符串），默认删除前后两端指定的chars字符，并返回处理后的字符串副本。<br>eg：<br><span class="hljs-comment">#  默认None：</span><br> &gt;&gt;&gt; s<br><span class="hljs-string">&#x27; you &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br> you<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.strip()<br><span class="hljs-string">&#x27;you&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s  <span class="hljs-comment"># 本身的 s 并没有改变</span><br><span class="hljs-string">&#x27; you &#x27;</span><br>---------------------------------------------------------<br><span class="hljs-comment">#  指定chars字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s= <span class="hljs-string">&#x27;dyouddd&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.strip(<span class="hljs-string">&#x27;y&#x27;</span>)  <span class="hljs-comment"># 注意只对前后两端起作用</span><br><span class="hljs-string">&#x27;dyouddd&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.strip(<span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-string">&#x27;you&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-string">&#x27;dyouddd&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="1-2-strip-函数的常用扩展"><a href="#1-2-strip-函数的常用扩展" class="headerlink" title="1.2 strip()函数的常用扩展"></a>1.2 strip()函数的常用扩展</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.2</span><span class="hljs-number">.1</span> string.lstrip(s[, chars])<br>原理和string.strip(s[, chars])一致，只不过它是两端删除变成了：从开头一端往后删除。<br>eg：<br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27; you &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-string">&#x27; you &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.lstrip()  <span class="hljs-comment"># 删除开头端字符</span><br><span class="hljs-string">&#x27;you &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-string">&#x27; you &#x27;</span><br>-------------------------------------------------------------<br><span class="hljs-meta">&gt;&gt;&gt; </span>s= <span class="hljs-string">&#x27;dyouddd&#x27;</span><br><span class="hljs-string">&#x27;dyouddd&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.lstrip(<span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-string">&#x27;youddd&#x27;</span><br>&gt;&gt;&gt;<br><span class="hljs-comment">####################################################</span><br><br><span class="hljs-number">1.2</span><span class="hljs-number">.2</span> string.rstrip(s[, chars])<br>原理和string.lstrip(s[, chars])一致，只不过它是开头一端删除变成了：从结尾一端往前删除。<br>eg：<br><span class="hljs-meta">&gt;&gt;&gt; </span>s=<span class="hljs-string">&#x27; you &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-string">&#x27; you &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.rstrip()  <span class="hljs-comment"># 删除开头端字符</span><br><span class="hljs-string">&#x27; you&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-string">&#x27; you &#x27;</span><br>-------------------------------------------------------------<br><span class="hljs-meta">&gt;&gt;&gt; </span>s= <span class="hljs-string">&#x27;dyouddd&#x27;</span><br><span class="hljs-string">&#x27;dyouddd&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.lstrip(<span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-string">&#x27;dyou&#x27;</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h5 id="2-range函数"><a href="#2-range函数" class="headerlink" title="2. range函数"></a>2. range函数</h5><h6 id="2-2-1-原型"><a href="#2-2-1-原型" class="headerlink" title="2.2.1 原型"></a>2.2.1 原型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">range</span>(start, stop[, step])<br>解释：<br><span class="hljs-number">1.</span> stop不能省略，但是start和[,step]都是可以省略的：<br>当star省略时，默认为 <span class="hljs-number">0</span><br>当step省略时，默认为 <span class="hljs-number">1</span><br>注意：step可以是正数也可以是负数，但不能为 <span class="hljs-number">0</span>，否则会报错：ValueError<br>     一般<span class="hljs-built_in">range</span>配合<span class="hljs-keyword">for</span>循环使用。<br>eg：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>) <span class="hljs-comment"># 这里从0到10都是正数，所以step显然不可能有值</span><br>[]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>)<br>[<span class="hljs-number">0</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">6</span>, -<span class="hljs-number">8</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>) <span class="hljs-comment"># 当start省略时，默认从0开始，此时start和step都省略，stop=0 显然没有数值产生。</span><br>[]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) <span class="hljs-comment"># step=0 会引发异常</span><br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#32&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>ValueError: <span class="hljs-built_in">range</span>() step argument must <span class="hljs-keyword">not</span> be zero<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br><span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,x=<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br><span class="hljs-number">2</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h5 id="3-file的处理"><a href="#3-file的处理" class="headerlink" title="3. file的处理"></a>3. file的处理</h5>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的 socket 套接字</title>
    <link href="/p/c468a1ee54c3.html"/>
    <url>/p/c468a1ee54c3.html</url>
    
    <content type="html"><![CDATA[<p>socket一直没去好好学习一下，因为太懒了 -.-!!</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">小知识点：<br><span class="hljs-number">1</span>.计算机中一般可以见到这样的IP地址<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>，意思是本机地址，即始终指向当前计算机<br><span class="hljs-number">2</span>.关于有效端口号：范围<span class="hljs-number">0</span>～<span class="hljs-number">65535</span>（其中小于<span class="hljs-number">1024</span>的端口号预留给了系统），如果使用linux，<br>   那么可以在<span class="hljs-regexp">/etc/</span>servuices文件中查看预留端口的列表（以及服务器/协议 和 套接字类型）。<br></code></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><h6 id="1-关于socket"><a href="#1-关于socket" class="headerlink" title="1. 关于socket"></a><a href="#%E5%85%B3%E4%BA%8Esocket">1. 关于socket</a></h6><h6 id="2-创建套接字"><a href="#2-创建套接字" class="headerlink" title="2. 创建套接字"></a><a href="#%E5%88%9B%E5%BB%BA%E5%A5%97%E6%8E%A5%E5%AD%97">2. 创建套接字</a></h6><h6 id="3-创建简单的客户端-gt-服务器架构"><a href="#3-创建简单的客户端-gt-服务器架构" class="headerlink" title="3. 创建简单的客户端-&gt;服务器架构"></a><a href="#%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84">3. 创建简单的客户端-&gt;服务器架构</a></h6><h5 id="1-关于socket-1"><a href="#1-关于socket-1" class="headerlink" title="1. 关于socket"></a>1. 关于socket</h5><p>首先需要有大概的认知：什么是 客户端-&gt;服务器模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">1.服务器：简单来讲就是一个被动接受请求信息并处理相关请求的一系列硬件或软件。<br>2.客户端：就是主动请求服务器，希望获得相关的服务。<br></code></pre></td></tr></table></figure><p>套接字：通俗一点就是用于相互通讯。<br>套接字有两种类型：基于文件的和面向网络的。<br>在python中有个模块就叫 socket,包含socket()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">socket(socket_family,socket_type,protocol=<span class="hljs-number">0</span>)   <span class="hljs-comment"># socket()函数原型</span><br></code></pre></td></tr></table></figure><p>这里需要注意一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">socket_family  : 代表 地址家族(address family，缩写AF)，python只支持<br>                 AF_UNIX、AF_NETLINK、AF_TIPC、AF_INET这几个家族，python网络编程使用的地址家族：AF_INET;<br><br>  socket_type  : TCP/IP 面向连接的套接字类型 SOCK_STREAM（协议：传输控制协议（TCP））;<br>                 UDP/IP 无连接的套接字类型 SOCK_DGRAM（协议：用户数据报协议（UDP））<br><br>    protocol   : 通常省略，默认为<span class="hljs-number">0</span>。<br>````<br><span class="hljs-comment">##### 2. 创建套接字</span><br>```python<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *   <span class="hljs-comment"># 导入 socket 模块</span><br><span class="hljs-comment">#  创建 TCP/IP 套接字</span><br>tcp_socket = socket(AF_INET,SOCK_STREAM )   <span class="hljs-comment"># 调用 socket() 函数</span><br><span class="hljs-comment">#  创建 UDP/IP 套接字</span><br>udp_socket = socket(AF_INET,SOCK_DGRAM)<br></code></pre></td></tr></table></figure><h5 id="3-创建简单的客户端-gt-服务器架构-1"><a href="#3-创建简单的客户端-gt-服务器架构-1" class="headerlink" title="3. 创建简单的客户端-&gt;服务器架构"></a>3. 创建简单的客户端-&gt;服务器架构</h5><p>这里使用两个python的解释器来模拟客户端和服务器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  第一个python解释器：服务器</span><br>▶ python<br>Python <span class="hljs-number">3.6</span><span class="hljs-number">.2</span> (default, Jul <span class="hljs-number">20</span> <span class="hljs-number">2017</span>, 03:<span class="hljs-number">52</span>:<span class="hljs-number">27</span>)<br>[GCC <span class="hljs-number">7.1</span><span class="hljs-number">.1</span> <span class="hljs-number">20170630</span>] on linux<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *                  <span class="hljs-comment"># 导入 socket 模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_server = socket(AF_INET,SOCK_STREAM)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_server.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">12345</span>))  <span class="hljs-comment"># 因为是同一台计算机，所以用本地IP，端口号随意一个有效位</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_server.listen(<span class="hljs-number">1</span>)                  <span class="hljs-comment"># 监听连接，并且在连接被转接或拒绝之前，设置传入连接请求的最大数，这里是 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_socket,addr = tcp_server.accept() <span class="hljs-comment"># accept() 之后将一直处于等待状态，直到连接被建立。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_socket.send(<span class="hljs-string">b&#x27;hello,i\&#x27;m server&#x27;</span>) <span class="hljs-comment"># 成功建立连接之后，利用send()发送信息，注意不支持utf-8,则用 send(b&#x27;字符串&#x27;) 的模式</span><br><span class="hljs-number">16</span>                                        <span class="hljs-comment"># 发送的字节数</span><br>&gt;&gt;&gt;<br><br>---------------------------------------------------我是分割线-------------------------------------------------------------<br><br><span class="hljs-comment">#  第二个python解释器：客户端</span><br>▶ python<br>Python <span class="hljs-number">3.6</span><span class="hljs-number">.2</span> (default, Jul <span class="hljs-number">20</span> <span class="hljs-number">2017</span>, 03:<span class="hljs-number">52</span>:<span class="hljs-number">27</span>)<br>[GCC <span class="hljs-number">7.1</span><span class="hljs-number">.1</span> <span class="hljs-number">20170630</span>] on linux<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *                        <span class="hljs-comment"># 导入 socket 模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_client = socket(AF_INET,SOCK_STREAM)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tcp_client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">12345</span>))     <span class="hljs-comment"># 确认sccept() 的连接，即这里将建立连接</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>masg = tcp_client.recv(<span class="hljs-number">1024</span>)                <span class="hljs-comment"># 接收TCP消息，1024为缓冲区即 1 KB，此参数可根据网络性能和程序需要来更改。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(masg)                                 <span class="hljs-comment"># 打印接收到的TCP消息</span><br><span class="hljs-string">b&quot;hello,i&#x27;m server&quot;</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><em>未完…待续…</em></p>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Arch下安装pip</title>
    <link href="/p/cb5560e4db12.html"/>
    <url>/p/cb5560e4db12.html</url>
    
    <content type="html"><![CDATA[<h5 id="1-首先安装一个命令行下载工具，我这里使用axel："><a href="#1-首先安装一个命令行下载工具，我这里使用axel：" class="headerlink" title="1. 首先安装一个命令行下载工具，我这里使用axel："></a>1. 首先安装一个命令行下载工具，我这里使用axel：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  axel https://bootstrap.pypa.io/get-pip.py<br><span class="hljs-comment"># 下载完成之后得到一个python文件</span><br>$ ls<br>get-pip.py<br></code></pre></td></tr></table></figure><p>也可以使用  <strong><code>wget</code></strong> ：</p><p> <strong><code>wget https://bootstrap.pypa.io/get-pip.py</code></strong></p><p> 需要注意的是，当同时存在python2和python3时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls -al /usr/bin/python*<br>lrwxrwxrwx 1 root root     7 Jul 20 03:53 python -&gt; python3.6<br>lrwxrwxrwx 1 root root     9 Sep 20 01:26 python2 -&gt; python2.7<br><span class="hljs-comment"># 这里需要注意python命令代表的版本</span><br><span class="hljs-comment">#  $ sudo python2 get-pip.py    # python2 代表 python2.7</span><br>$ sudo python get-pip.py     <span class="hljs-comment"># python  代表 python3.6</span><br>Collecting pip<br>  Downloading pip-9.0.1-py2.py3-none-any.whl (1.3MB)<br>    100% |████████████████████████████████| 1.3MB 185kB/s<br>Collecting wheel<br>  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)<br>    100% |████████████████████████████████| 71kB 492kB/s<br>Installing collected packages: pip, wheel<br>Successfully installed pip-9.0.1 wheel-0.29.0<br><br><span class="hljs-comment">#  查看安装结果：</span><br>$ sudo find / -name <span class="hljs-string">&#x27;pip&#x27;</span><br>....<br>....<br>/usr/lib/python2.7/site-packages/pip<br>/usr/lib/python3.6/site-packages/pip<br><br></code></pre></td></tr></table></figure><p>安装完成！</p><h5 id="2-安装模块的方法："><a href="#2-安装模块的方法：" class="headerlink" title="2. 安装模块的方法："></a>2. 安装模块的方法：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">$ sudo pip install xxx  //安装指定的 xxx 模块或者包<br>$ sudo pip uninstall xxx  //删除指定的 xxx 模块或者包<br>$ pip <span class="hljs-built_in">list</span>       //查看当前的已安装python模块<br></code></pre></td></tr></table></figure><p>使用pip安装模块时，需要注意python2和python3是否同时存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls -al /usr/bin/pip*<br>-rwxr-xr-x 1 root root 206 Oct 15 20:08 pip2<br>-rwxr-xr-x 1 root root 206 Oct 15 20:08 pip2.7<br>-rwxr-xr-x 1 root root 205 Sep 20 00:23 pip3<br>-rwxr-xr-x 1 root root 205 Sep 20 00:23 pip3.6<br><br>$ sudo pip3 install BeautifulSoup     <span class="hljs-comment"># 给 python3 安装模块这里用pip3</span><br>$ sudo pip2 install BeautifulSoup     <span class="hljs-comment"># 给 python2 安装模块这里用pip2</span><br>Collecting BeautifulSoup<br>  Downloading BeautifulSoup-3.2.1.tar.gz<br>Building wheels <span class="hljs-keyword">for</span> collected packages: BeautifulSoup<br>  Running setup.py bdist_wheel <span class="hljs-keyword">for</span> BeautifulSoup ... <span class="hljs-keyword">done</span><br>  Stored <span class="hljs-keyword">in</span> directory: /root/.cache/pip/wheels/5e/be/6d/ed01d5d434a821557b674c9da976f60b1b93d9009447eb9d16<br>Successfully built BeautifulSoup<br>Installing collected packages: BeautifulSoup<br>Successfully installed BeautifulSoup-3.2.1<br><br><span class="hljs-comment">#  查看已安装模块</span><br><span class="hljs-comment">#  $ pip3 list        python3</span><br>$ pip2 list<br>DEPRECATION: The default format will switch to columns <span class="hljs-keyword">in</span> the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) <span class="hljs-keyword">in</span> your pip.conf under the [list] section) to <span class="hljs-built_in">disable</span> this warning.<br>BeautifulSoup (3.2.1)<br>netsnmp-python (1.0a1)<br>numpy (1.13.3)<br>pip (9.0.1)<br>pwquality (1.3.0)<br>setuptools (36.6.0)<br>team (1.0)<br>wheel (0.30.0)<br></code></pre></td></tr></table></figure><p>另外当使用pip2或者pip3出现找不到python版本时，可以修改里面的环境 “#!/usr/bin/python2”<br>指向正确的python版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/bin<br>$ ls -al python*<br>lrwxrwxrwx 1 root root     9 Sep 20 01:26 python2 -&gt; python2.7<br>lrwxrwxrwx 1 root root     9 Oct 15 20:45 python3 -&gt; python3.6<br><br>$ cat pip<br><span class="hljs-comment"># !/usr/bin/python2  # 这里指python2的pip，同理：#!/usr/bin/python3 指python3</span><br><br><span class="hljs-comment">#  -*- coding: utf-8 -*-</span><br>import re<br>import sys<br><br>from pip import main<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sys.argv[0] = re.sub(r<span class="hljs-string">&#x27;(-script\.pyw?|\.exe)?$&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, sys.argv[0])<br>    sys.exit(main())<br></code></pre></td></tr></table></figure><h5 id="3-在windows下使用pip的方法："><a href="#3-在windows下使用pip的方法：" class="headerlink" title="3. 在windows下使用pip的方法："></a>3. 在windows下使用pip的方法：</h5><p> <strong><code> python2 和 python3 同时共存时：</code></strong><br> <strong><code>python2：py -2 -m pip install path\file</code></strong><br> <strong><code>python3：py -3 -m pip install path\file </code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># --------------------------------------------------</span><br><span class="hljs-comment"># 例如在windows下安装wxpython：  两个步骤</span><br>1.安装wheel<br><span class="hljs-comment"># 此为python2,安装python3则需更改 -3 即可</span><br>C:\&gt;py -2 -m pip install wheel<br><br>2.安装wxpython的wheel文件：<br><span class="hljs-comment"># 此为python2,安装python3则需更改 -3 即可</span><br>C:\&gt;py -2 -m pip install D:\wxpython\windows\wxPython-4.0.0b2-cp36-cp36m-win_amd64.whl<br></code></pre></td></tr></table></figure><h5 id="4-升级pip"><a href="#4-升级pip" class="headerlink" title="4. 升级pip"></a>4. 升级pip</h5><p>sudo 后面的pip3为用户已安装的pip名称，比如python3版本的pip：pip3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">$ sudo pip3 install --upgrade pip<br>Collecting pip<br>  Downloading https://files.pythonhosted.org/packages/0f/<span class="hljs-number">74</span>/ecd13431bcc456ed390b44c8a6e917c1820365cbebcb6a8974d1cd045ab4/pip-<span class="hljs-number">10.0</span><span class="hljs-number">.1</span>-py2.py3-none-<span class="hljs-built_in">any</span>.whl (<span class="hljs-number">1.3</span>MB)<br>    <span class="hljs-number">100</span>% |████████████████████████████████| <span class="hljs-number">1.3</span>MB 215kB/s<br>Installing collected packages: pip<br>  Found existing installation: pip <span class="hljs-number">9.0</span><span class="hljs-number">.1</span><br>    Not uninstalling pip at /usr/lib/python3/dist-packages, outside environment /usr<br>Successfully installed pip-<span class="hljs-number">10.0</span><span class="hljs-number">.1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过开源项目配置高大上的vim</title>
    <link href="/p/d99b77b75fe8.html"/>
    <url>/p/d99b77b75fe8.html</url>
    
    <content type="html"><![CDATA[<p>老铁告诉我一个开源的vim项目！<br>首先请看一条shell命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/liuchengxu/space-vim/master/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>执行之后，不需要任何操作：<br><img src="/images/%E9%80%9A%E8%BF%87%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84vim/vim%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png" alt="vim自动执行安装插件"><br>需要经过一段时间，安装完成之后：</p><p><img src="/images/%E9%80%9A%E8%BF%87%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84vim/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="安装完成"><br>里面有各种高大上操作等你挖掘：</p><p><img src="/images/%E9%80%9A%E8%BF%87%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84vim/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="效果图"></p><p>有兴趣的可以去github看看：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/liuchengxu/</span>space-vim<br></code></pre></td></tr></table></figure><p>另外：<br>1.关于简单的实现python的语法高亮问题：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/vim/</span>vim80<span class="hljs-regexp">/syntax/</span><br>$ sudo vim python.vim<br></code></pre></td></tr></table></figure><p>将    “    let python_highlight_all = 1   前的 “ 去掉，将会支持内置函数，数字，空格，异常的语法高亮。</p><p>2.一键运行python程序.vimrc的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">map &lt;F2&gt; &lt;ESC&gt;:w&lt;cr&gt;:!python2 %&lt;cr&gt;   <span class="hljs-comment"># 一键运行python2</span><br>map &lt;F3&gt; &lt;ESC&gt;:w&lt;cr&gt;:!python3 %&lt;cr&gt;   <span class="hljs-comment"># 一键运行python3</span><br></code></pre></td></tr></table></figure><p>3.vim打开多窗口小知识：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">:sp     <span class="hljs-regexp">//</span>或者split ：水平切分窗口<br>:vsplit    <span class="hljs-regexp">//</span>垂直切分窗口<br>:open  filename    <span class="hljs-regexp">//</span>打开一个文件<br>ctrl+w   <span class="hljs-regexp">//</span>窗口间的切换<br></code></pre></td></tr></table></figure><p>4.新建文件时，自动加载模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  以 Python 为例</span><br><span class="hljs-comment">#  首先新建一个文件夹用于放置模板文件</span><br>~/.vim<br>▶ mkdir Template<br>▶ cd Template<br>▶ pwd<br>/home/fqf/.vim/Template<br>▶ vim python.tlp<br></code></pre></td></tr></table></figure><p>5.vim文件建立时的自动导入模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">▶ cat ~/.vimrc<br><span class="hljs-string">&quot;   auto template</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>autocmd BufNewFile *.py 0r ~/.vim/Template/python.tl<br>function AddshTitle()<br>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;#!/bin/bash&quot;</span>)<br>        call setline(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;#File   : &quot;</span> . expand(<span class="hljs-string">&quot;%&quot;</span>))<br>        call setline(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;#Project:&quot;</span>)<br>        call setline(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;#Author : name&quot;</span>)<br>        call setline(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;#Email  : emailaddr&quot;</span>)<br>        call setline(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;#Date   : &quot;</span> . strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>))<br>        call setline(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        call setline(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;#----------------------------------------------------------------------------&quot;</span>)<br>endf<br>function AddCTitle()<br>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot; /*&quot;</span>)<br>        call setline(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;  * File    : &quot;</span> . expand(<span class="hljs-string">&quot;%&quot;</span>))<br>        call setline(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;  * Project :&quot;</span>)<br>        call setline(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;  * Author  : name&quot;</span>)<br>        call setline(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;  * Email   : emailaddr&quot;</span>)<br>        call setline(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;  * Date    : &quot;</span> . strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>))<br>        call setline(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;  */&quot;</span>)<br>  call setline(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;#----------------------------------------------------------------------------&quot;</span>)<br>        call setline(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;&quot;</span>)<br>endf<br>function AddpyTitle()<br>        call setline(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;#!/usr/bin/env python&quot;</span>)<br>        call setline(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;#-*- coding:utf-8 -*-&quot;</span>)<br>  call setline(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;#File   : &quot;</span> . expand(<span class="hljs-string">&quot;%&quot;</span>))<br>        call setline(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;#Project:&quot;</span>)<br>        call setline(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;#Author : name&quot;</span>)<br>        call setline(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;#Email  : emailaddr&quot;</span>)<br>        call setline(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;#Date   : &quot;</span> . strftime(<span class="hljs-string">&quot;%Y-%m-%d-%H:%M&quot;</span>))<br>        call setline(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        call setline(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;#----------------------------------------------------------------------------&quot;</span>)<br>endf<br><br>autocmd BufNewFile *.sh <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;:call AddshTitle()&quot;</span><br>autocmd BufNewFile *.c,*.cc,*.cpp <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;:call AddCTitle()&quot;</span><br>autocmd BufNewFile *.py <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;:call AddpyTitle()&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于在arch下给Firefox装flash插件</title>
    <link href="/p/d41c37703e43.html"/>
    <url>/p/d41c37703e43.html</url>
    
    <content type="html"><![CDATA[<p>首先，你得安装Firefox浏览器，用命令sudo pacman -S firefox 安装最新浏览器。</p><p>然后，打开浏览器，随意搜索一下视频，比如我最爱看的暴走大事件，在爱奇艺下会提示你，木有安装flash插件无法播放，此时你只需要点击下载安装flash插件，然后就会自动在浏览器里下载安装包，比如<a href="https://www.flash.cn/cdm/latest/flash_player_ppapi_linux.x86_64.tar.gz">flash_player_npapi_linux.x86_64.tar.gz</a></p><p>下载完成之后，执行解压：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf flash_player_npapi_linux.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.tar.gz<br></code></pre></td></tr></table></figure><p>这里会得到libflashplayer.so 和usr目录，我们只需要so 文件即可，在家目录创建一个目录：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo mkdir ~<span class="hljs-regexp">/.mozilla/</span>plugins/<br></code></pre></td></tr></table></figure><p>最后将so 文件复制到这个创建的目录即可，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo cp .<span class="hljs-regexp">/libflashplayer.so  ~/</span>.mozilla<span class="hljs-regexp">/plugins/</span><br></code></pre></td></tr></table></figure><p>重启浏览器即可！</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>ArchLinux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArchLinux</tag>
      
      <tag>Firefox</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
