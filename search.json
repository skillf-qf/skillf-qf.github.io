[{"title":"AD10 输出Gerber Files","url":"/2019/12/16/AD10-%E8%BE%93%E5%87%BAGerber-Files/","content":"<p>#<code>输出 Gerber Files 需要设置 Gerber Files 两次，NC Drill Files 一次。</code><br>###第一轮设置<br>####1. 打开Gerber Files设置</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e2b96617656cc388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打开Gerber Files设置一\"></p>\n<p>####1.1 通用</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-8ba4e30ed7865fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"通用一\"></p>\n<p>1.2 层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-8fd18532e25ef5aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"层一\"></p>\n<p>1.3 钻孔图层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-20be04d60b3a4878.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"钻孔图层一\"></p>\n<p>1.4 光圈</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-64663d80cc3b0cfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光圈一\"></p>\n<p>1.5 高级<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-2fd66bd6ff048530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"高级一\"></p>\n<p>确定之后会打开一个Cam后缀文件，右键上方文件名<strong>关闭不保存</strong>即可。</p>\n<p>###第二轮设置：</p>\n<p>####2. 打开Gerber Files设置<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-a6209b51b6d60f99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打开Gerber Files设置二\"></p>\n<p>2.1 通用<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-0c47c15687d74265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"通用二\"></p>\n<p>2.2 层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-1741d095e26aa5f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"层二\"></p>\n<p>2.3 钻孔图层<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6fbb3ca7c76b485b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"钻孔图层二\"></p>\n<p>2.4 光圈<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-d73c39330d9d41e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"光圈二\"></p>\n<p>2.5 高级<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4e7b2321029535d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"高级二\"></p>\n<p>确定之后依旧会自动打开一个Cam文件，右键上方文件名<strong>关闭不保存</strong>即可。</p>\n<p>###第三轮设置：</p>\n<p>####3. 打开 NC Drill Files 设置</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-47a22a2ba5cb7c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打开 NC Drill Files 设置\"></p>\n<p>3.1 选项</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e96e9454c55cc550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选项\"></p>\n<p>点击确定之后需要再次确认两次：<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-2811a6eb91d8b27b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"确定一\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7660a91284ff3766.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"确定二\"></p>\n<p>点击确定之后，自动生成Cam文件，依旧<strong>关闭不保存</strong>即可。</p>\n<p>最终会在PCB工程文件夹里生成一个**<code>&quot; Project Outputs for xxx &quot;</code>**，这个文件夹即是光绘文件的内容，打包发送给PCB厂商即可打板。<br>完~<br>谢谢阅读~</p>\n","categories":["Hardware"],"tags":["AD"]},{"title":"Arch linux中 python3安装tkinter","url":"/2018/05/17/Arch-linux%E4%B8%AD-python3%E5%AE%89%E8%A3%85tkinter/","content":"<p>直接使用 pacman 安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S python-pmw</span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Linux"]},{"title":"C++中关于指针与引用","url":"/2018/06/29/C++%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/","content":"<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">摘抄自————《C++ Primer中文第五版》</span><br></pre></td></tr></table></figure>\n<p><strong>1.引用(reference)：</strong>为对象起了另外一个名字，引用类型引用(refers to)另外一种类型。<strong>通过将声明符写成 &amp;d (&amp;:取地址操作符)的形式来定义引用类型，其中d是声明的变量名：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ival = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;referVal = ival;   <span class=\"comment\">//refVal指向ival(是ival的另一个名字) </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;refaVal2;   <span class=\"comment\">//错误：引用必须被初始化</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：<br>&emsp;&emsp;a. 引用必须被初始化，程序把引用和它的初始值对象一直绑定在一起。因为无法令引用重新绑 &emsp;&emsp;&emsp;定到另外一个对象，因此引用必须初始化。<br>&emsp;&emsp;b. 引用并没有实际地址，只是为一个已存在的对象所起的另外一个名字。<br>&emsp;&emsp;c. 对引用的所有操作都是在与之绑定的对象上进行的。<br>&emsp;&emsp;d. 引用的类型与绑定的对象类型必须一致。</strong></p>\n<p><strong>2. 指针(pointer)：</strong>是指 “ 指向(point to) ” 另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。定义指针类型的方法将声明符写成 *d 的形式，其中 d 是变量名。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *ipl = &amp;i;   <span class=\"comment\">//ipl是指向int型对象的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *pr, *pi;     <span class=\"comment\">//定义两个int型指针</span></span><br></pre></td></tr></table></figure>\n<p><strong>2.1 指针与引用的不同点：</strong></p>\n<p>&emsp;&emsp;其一，<strong>指针本身就是一个对象</strong>，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象。</p>\n<p>&emsp;&emsp;其二，<strong>指针无须再定义时赋初值</strong>。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。</p>\n<p><strong>2.2 指针值：</strong></p>\n<blockquote>\n<p><strong>a. 指向一个对象。<br>b. 指向紧邻对象对象所占空间的下一个位置。<br>c. 空指针，意味着指针没有指向任何对象。<br>d. 无效指针，也就是上述情况之外的其他值。</strong></p>\n</blockquote>\n<p><strong>2.3 某些符号有多重含义</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r = i;  <span class=\"comment\">// &amp;紧随类型名出现，因此是声明的一部分，r是一个引用</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;  <span class=\"comment\">// *紧随类型名出现，因此是声明的一部分，p是一个指针</span></span><br><span class=\"line\">p = &amp;i;  <span class=\"comment\">// &amp;出现在表达式中，是一个取地址符</span></span><br><span class=\"line\">*p = i;  <span class=\"comment\">// *出现在表达式中，是一个解引用符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r2 = *p;  <span class=\"comment\">// &amp;是声明的一部分， *是一个解引用符</span></span><br></pre></td></tr></table></figure>\n<p><strong>2.4 空指针</strong></p>\n<p>&emsp;&emsp;空指针(null pointer)不指向任何对象，在试图使用一个指针之前代码可以首先检查是否为空。以下是几个生成空指针的方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p1 = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">//C++11新标准方法。等价于 int *p1 = 0;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p2 = <span class=\"number\">0</span>;  <span class=\"comment\">//直接将p2初始化为字面常量0</span></span><br><span class=\"line\"><span class=\"comment\">//需要首先 #include cstdlib</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p3 = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 等价于 int *p3 = 0;</span></span><br></pre></td></tr></table></figure>\n<p><strong>2.5 void* 指针</strong></p>\n<p>&emsp;&emsp;void *指针是一种特殊的指针类型，可用于存放任意对象的地址。一个void * 指针存放着一个地址，这一点和其他指针类似。不同的是。我们对该地址中到底是个什么类型的对象并不了解：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> obj = <span class=\"number\">3.14</span>, *pd = &amp;obj;</span><br><span class=\"line\"><span class=\"comment\">// 正确：void* 能存放任意类型对象的地址</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> *pv = &amp;obj;  <span class=\"comment\">// obj可以是任意类型的对象</span></span><br><span class=\"line\">pv = pd;   <span class=\"comment\">// pv可以存放任意类型的指针</span></span><br></pre></td></tr></table></figure>\n<p><strong>2.6 指向指针的指针</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ival = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *pi = &amp;ival;  <span class=\"comment\">// pi 指向一个int型的数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> **ppi = &amp;pi;  <span class=\"comment\">// ppi 指向一个int型的指针</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这里pi是指向int型数的指针，而ppi是指向int型指针的指针，如图：<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7513970ce543e439.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指向指针的指针.png\"><br>&emsp;&emsp;解引用 int 型指针会得到一个int型的数，同样，解引用指向指针的指针会得到一个指针。此时为了访问最原始的那个对象，需要对指针的指针做两次解引用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span>  &lt;&lt; <span class=\"string\">&quot;The value of ival\\n&quot;</span></span><br><span class=\"line\">      &lt;&lt; <span class=\"string\">&quot;direct value: &quot;</span> &lt;&lt; ival &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">      &lt;&lt; <span class=\"string\">&quot;indirect value: &quot;</span> &lt;&lt; *pi &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">      &lt;&lt; <span class=\"string\">&quot;double indirect value: &quot;</span> &lt;&lt; **ppi</span><br><span class=\"line\">      &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;该程序使用三种不同的方式输出了变量 ival 的值： 第一种直接输出；第二种通过int型指针pi输出；第三种两次解引用ppi，取得ival的值。</p>\n<p><strong>2.7 指向指针的引用</strong><br>&emsp;&emsp;引用本身不是一个对象，因此不能定义指向引用的指针。但指针是对象，所以存在对指针的引用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> t = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;  <span class=\"comment\">// p 是一个int型指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *&amp;r = p;  <span class=\"comment\">// r是一个对指针p的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = &amp;i;  <span class=\"comment\">// r引用了一个指针，因此给r赋值&amp;i就是令p指向i</span></span><br><span class=\"line\">*r = <span class=\"number\">0</span>;  <span class=\"comment\">// 解引用 r 得到 i，也就是 p 指向的对象，将 i 的值改为0</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>要理解 r 的类型到底是什么，最简单的办法是从右往左阅读 r 的定义。离变量名最近的符号（此例中是 &amp;r 的符号是 &amp;）对变量的类型有最直接的影响，因此 r 是一个引用。声明符的其余部分用以确定 r 引用的类型是什么，此例中的符号 * 说明 r 引用的是一个指针。最后，声明的基本数据类型部分指出 r 引用的是一个 int 指针。</strong></p>\n<blockquote>\n<p><strong>因此这里 int *&amp;r = p;<br>应该看成是 对 int*（int型的指针）的引用，所以对 p指针的操作和对 r 引用的操作是一样的。</strong></p>\n</blockquote>\n<p><strong>2.8 另外： 关于&amp; 和 *&amp; 理解</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = &amp;i;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;pr = *p;  <span class=\"comment\">// *是一个解引用符，由*得到指针p所指的对象</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *&amp;pi = p;</span><br></pre></td></tr></table></figure>\n<p>这里 &amp;pr 和 *&amp;pi 表面上看值都是一样的，但是有一点不同</p>\n<blockquote>\n<p><strong>pr 是指针p所指对象的引用</strong><br><strong>pi 是指针p的引用</strong></p>\n</blockquote>\n<p>&emsp;&emsp;假如p指针指向的是一个数组，那么 pr只能访问<strong>p的首元素</strong>（单一对象），而pi则可以访问<strong>p的整个数组</strong>（数组的地址）。</p>\n<p><strong>2.9 const 指针</strong><br>&emsp;&emsp;指针是对象而引用不是，所以指针本身可以定为常量。常量指针(const pointer)必须初始化，一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。把 * 放在 const 关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> errNumb = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> curErr = &amp;errNumb;  <span class=\"comment\">// curErr 将一直指向 errNumb</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi =<span class=\"number\">3.14159</span>;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> *<span class=\"keyword\">const</span> pip = &amp;pi;  <span class=\"comment\">//pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;要想弄清楚上述声明的含义，最有效的办法是从右向左阅读。离 currErr 最近的符号是 const，意味着 currErr 本身是一个常量对象，对象的类型由声明符的其余部分确定。声明符中的下一个符号是*，意思是 currErr 是一个常量指针。最后，该声明语句的基本数据类型部分确定了常量指针指向的是一个 int 对象。与之相似，我们也能推断出，pip是一个常量指针，它指向的对象是一个双精度浮点型常量。<br>&emsp;&emsp;指针本身是一个常量并不意味着不能通过指针修改其所指对象的值，能否这样做完全依赖于所指对象的类型。例如，pip 是一个指向常量的常量指针，则不论是 pip所指的对象值还是pip自己存储的那个地址都不能改变。相反的，curErr 指向的是一个一般的非常量整数，那么就完全可以用 curErr 去修改 errNumb 的值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*pip = <span class=\"number\">2.72</span>;  <span class=\"comment\">// 错误：pip是一个指向常量的指针</span></span><br><span class=\"line\"><span class=\"comment\">// 如果 curErr 所指的对象（也就是errNumb）的值不为 0 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (*curErr) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  errorHandler();</span><br><span class=\"line\">  *curErr = <span class=\"number\">0</span>;  <span class=\"comment\">//正确：把curErr所指的对象的值重置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["C++"]},{"title":"Arch安装zsh以及通过 Oh-My-ZSH! 开源项目的配置","url":"/2017/10/08/Arch%E5%AE%89%E8%A3%85zsh%E4%BB%A5%E5%8F%8A%E9%80%9A%E8%BF%87-Oh-My-ZSH!-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE/","content":"<ol>\n<li>首先：安装官方源的 zsh<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S zsh</span><br></pre></td></tr></table></figure>\n安装 git 并获取开源项目的安装脚本<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S git</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;skillf-qf&#x2F;ohmyzsh.git</span><br><span class=\"line\">$ cd ohmyzsh&#x2F;tools&#x2F;</span><br><span class=\"line\">$ .&#x2F;install.sh</span><br></pre></td></tr></table></figure></li>\n<li>设置zsh为默认shell：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo chsh -s &#x2F;bin&#x2F;zsh xxx   # xxx 为用户名</span><br></pre></td></tr></table></figure></li>\n<li>选择适合你的主题<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"># 主题的设置文件在 ： ~&#x2F;.zshrc                              </span><br><span class=\"line\"># 主题的存放目录在 ： ~&#x2F;.oh-my-zsh&#x2F;themes   </span><br><span class=\"line\"># 推荐主题        ： ZSH_THEME&#x3D;&quot;crcandy&quot;           </span><br><span class=\"line\">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">ZSH_THEME&#x3D;&quot;robbyrussel&quot;    # 这是默认主题 robbyrussel ，更改别的主题只需替换这个名字即可。</span><br><span class=\"line\">ZSH_THEME&#x3D;&quot;random&quot;         # 如果一时之间找不到合适的，可以用：random 这里会随机获取主题。</span><br><span class=\"line\">$ echo $RANDOM_THEME       # 然后使用 echo 命令读取当前主题，可以将喜欢的主题保存到 ZSH_THEME。</span><br></pre></td></tr></table></figure></li>\n<li>小技巧</li>\n<li>1 给history命令增加时间<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vim ~&#x2F;.zshrc</span><br><span class=\"line\">HIST_STAMPS&#x3D;&quot;yyyy-mm-dd&quot; </span><br><span class=\"line\">source ~&#x2F;.zshrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>2 更新oh-my-zsh<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 设置自动更新oh-my-zsh : ~&#x2F;.zshrc</span><br><span class=\"line\">DISABLE_UPDATE_PROMPT&#x3D;true</span><br><span class=\"line\"># 加入需要手动更新</span><br><span class=\"line\">$ upgrade_oh_my_zsh</span><br></pre></td></tr></table></figure></li>\n<li>设置插件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 插件存放的目录 ： ~&#x2F;.oh-my-zsh&#x2F;plugins</span><br><span class=\"line\"># 插件设置 plugins&#x3D;(插件名)</span><br><span class=\"line\">plugins&#x3D;(git)  # 默认启用git插件</span><br><span class=\"line\"># 网上推荐的几个好用插件：</span><br><span class=\"line\"></span><br><span class=\"line\">zsh-history-substring-search</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;tree&#x2F;master&#x2F;plugins&#x2F;history-substring-search</span><br><span class=\"line\"></span><br><span class=\"line\">zsh-syntax-highlighting</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\">zsh-autosuggestions</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\">更多插件可参考</span><br><span class=\"line\"></span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;wiki&#x2F;Plugins</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;unixorn&#x2F;awesome-zsh-plugins</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;wiki&#x2F;Plugins-Overview</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>关于卸载<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">uninstall_oh_my_zsh  # 直接命令行输入</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["Technology"],"tags":["Linux"]},{"title":"Git同步项目到Github的完整流程","url":"/2021/01/26/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/","content":"<p>最近在写一个archlinux的自动安装脚本，由于需要在不同电脑上切换非常麻烦，所以使用github做版本管理，网上查了很多资料，做一下笔记捋一下git与github的简单使用流程：</p>\n<p><code>测试平台：Windows7 + ArchLinux</code></p>\n<p>首先要理解的是：</p>\n<pre><code>    每一个文件夹都可以当成是一个本地仓库（只要包含有 .git）\n    每一个本地仓库都有一个 .git 包含该仓库的基本设置\n</code></pre>\n<h1 id=\"1-安装-git\"><a href=\"#1-安装-git\" class=\"headerlink\" title=\"1. 安装 git\"></a>1. 安装 git</h1><h3 id=\"1-1-windows平台\"><a href=\"#1-1-windows平台\" class=\"headerlink\" title=\"1.1 windows平台\"></a>1.1 windows平台</h3><p>直接在<a href=\"https://git-scm.com/\">git官网</a>下载对应安装包即可<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e2ab226452e5268e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git 官网\"><br>下载完之后按提示安装，一般默认设置就够用了（简单的上传同步功能）。</p>\n<h3 id=\"1-2-Linux平台\"><a href=\"#1-2-Linux平台\" class=\"headerlink\" title=\"1.2 Linux平台\"></a>1.2 Linux平台</h3><p>我这里使用archlinux发行版，直接使用<code>pacman</code>命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S git openssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ed0366a5587293b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"archlinux 安装git\"></p>\n<h3 id=\"2-个人电脑-与-Github-的公钥添加\"><a href=\"#2-个人电脑-与-Github-的公钥添加\" class=\"headerlink\" title=\"2. 个人电脑 与 Github 的公钥添加\"></a>2. 个人电脑 与 Github 的公钥添加</h3><h4 id=\"2-1-生成公钥\"><a href=\"#2-1-生成公钥\" class=\"headerlink\" title=\"2.1 生成公钥\"></a>2.1 生成公钥</h4><h5 id=\"2-1-1-Windows平台\"><a href=\"#2-1-1-Windows平台\" class=\"headerlink\" title=\"2.1.1 Windows平台\"></a>2.1.1 Windows平台</h5><p>Git 软件安装完之后，找到并双击打开软件 <code>Git Bash</code>，在打开的命令行中输入命令生成密钥:<br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p>一路按回车即可！<br>生成之后按提示路径找到<code>id_rsa.pub</code>这个文件，即是我们要添加的公钥文件。<br>而<code>id_rsa</code>文件则不用理会，它是根据本地电脑生成的私钥，用来配对github上的公钥。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-1b56bf16c8002dd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"生成密钥\"></p>\n<p>接下来找到公钥路径，打开 <code>id_rsa.pub</code>文件，并全选文件里面的内容复制出来，以做备用。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-c4ac7195639bc958.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"公钥\"></p>\n<h5 id=\"2-1-2-Linux平台：\"><a href=\"#2-1-2-Linux平台：\" class=\"headerlink\" title=\"2.1.2 Linux平台：\"></a>2.1.2 Linux平台：</h5><p>首先打开你自己的 terminal，然后一样输入命令：<br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p>一路按回车即可！<br>生成之后按提示路径找到<code>id_rsa.pub</code>这个文件，即是我们要添加的公钥文件。<br>而<code>id_rsa</code>文件则不用理会，它是根据本地电脑生成的私钥，用来配对github上的公钥。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-dbc81c39a0fa86a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>接下来找到公钥路径，打开 <code>id_rsa.pub</code>文件，并全选文件里面的内容复制出来，以做备用。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-c6309d48e0e71a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>#####2.2 2. 添加公钥到 Github</p>\n<p>首先当然是要去<a href=\"https://github.com/\">github官</a>网注册一个账号啦~<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-c0f76c233744dbe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册github账号\"><br>按提示注册完之后，登录账号按提示添加公钥：</p>\n<p><strong><code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key</code></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6da6fd1ca531103c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>进入 <code>SSH keys</code> 添加页面后，按提示将复制出来的公钥内容粘贴到Key栏，最后点击添加按钮，输入登录密码确认添加，到此个人电脑与 Github 的公钥添加已完成。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-20115a9ed950a0c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-5f60adea995ac6a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>最后验证是否添加成功，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>回车后按提示输入 <code>yes</code> 回车即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-da178747f1afb427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"winodws验证\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7eb986cd1afccc60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Linux验证\"></p>\n<h3 id=\"3-本地仓库与远程仓库的关联\"><a href=\"#3-本地仓库与远程仓库的关联\" class=\"headerlink\" title=\"3. 本地仓库与远程仓库的关联\"></a>3. 本地仓库与远程仓库的关联</h3><h4 id=\"3-1-创建Github远程仓库\"><a href=\"#3-1-创建Github远程仓库\" class=\"headerlink\" title=\"3.1 创建Github远程仓库\"></a>3.1 创建Github远程仓库</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-68cd67a381958534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-b8c43e52a122ea45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>根据自己的需求创建相应的远程仓库：<br><code>eg: archlinuxScript</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4a6b3326aeefb892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>复制远程仓库地址备用<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-748bfd6650512952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h4 id=\"3-2-配置git\"><a href=\"#3-2-配置git\" class=\"headerlink\" title=\"3.2 配置git\"></a>3.2 配置git</h4><h5 id=\"3-2-1-Windows平台\"><a href=\"#3-2-1-Windows平台\" class=\"headerlink\" title=\"3.2.1 Windows平台\"></a>3.2.1 Windows平台</h5><p>打开Git Bash，随意创建一文件夹(eg: d:\\github)，进入该文件夹并输入命令设置github 账号名和邮箱地址：<br><code>&quot;githubname&quot;：注册的Github账号名称 </code><br><code> &quot;xxxx@xxx.com&quot;：注册Github用的邮箱地址</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;githubname&quot;</span><br><span class=\"line\">git config --global user.email &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7e4c7e47e66efab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>#####3.2.2 Linux平台<br>打开 terminal，随意创建一文件夹(eg: /home/skilfl/github)，进入该文件夹并输入命令设置github 账号名和邮箱地址：<br><code>&quot;githubname&quot;：注册的Github账号名称 </code><br><code> &quot;xxxx@xxx.com&quot;：注册Github用的邮箱地址</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;githubname&quot;</span><br><span class=\"line\">git config --global user.email &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6bd37a9f64043d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><em><strong>现在可以随意拉取推送远程仓库了！</strong></em></p>\n<h4 id=\"3-3-推送项目到github\"><a href=\"#3-3-推送项目到github\" class=\"headerlink\" title=\"3.3 推送项目到github\"></a>3.3 推送项目到github</h4><p>推送之前先看一下远程仓库的内容，只有个<code>README.md</code>文件：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-bd41e2606812bc33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h5 id=\"3-3-1-Windows平台\"><a href=\"#3-3-1-Windows平台\" class=\"headerlink\" title=\"3.3.1 Windows平台\"></a>3.3.1 Windows平台</h5><p>推送文件到 3.1中创建的远程仓库<code>archlinuxScript</code>完整流程：<br>a. 首先初始化本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>b. 然后添加远程仓库，并查看远程仓库是否添加成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br><span class=\"line\">git remote add origin git@github.com:skillf-qf&#x2F;archlinuxScript.git</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p>c. 拉取远程仓库到本地仓库，目的让本地仓库和远程仓库保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>\n<p>d. 进入本地仓库（创建的文件夹 d:\\github）  并添加一个文件 <code>test.c</code>，模拟修改本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch test.c</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6ce741a7e7d8c9b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>e. 将文件添加到暂存区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">文件多的话，可以使用 git add .  表示当前目录下的所有文件 </span><br><span class=\"line\">git add test.c </span><br></pre></td></tr></table></figure>\n<p>f. 添加提交说明：<br>提交说明类似于代码注释，方便我们记忆项目做了哪些修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;update 20210126&quot;</span><br></pre></td></tr></table></figure>\n<p>g. 推送之前需要统一本地仓库和远程仓库的分支名，不然会推送出错<br>先看github 远程仓库的默认分支名： <code>main</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7c4da6583a475c73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>在看本地仓库的分支名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ae14bf217a8cbb8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>很明显不一致，原因是以前的 Git 和 Github 的默认分支都叫 master，后来 Github上改为了main，而 Git 没有做修改，此时我们需要手动修改分支名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -m master main</span><br></pre></td></tr></table></figure>\n<p>i. 推送本地仓库到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n\n<p>注意：<br><code>origin</code> 是关联的远程仓库的标签，可以使用 <code>git remote -v</code> 查看当前本地已关联的远程仓库，<br><code>main</code> 是 Github 上的默认分支名。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-34fb3139dbdf80d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"本地仓库修改\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-854452efc57469e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"本地仓库推送到远程仓库\"></p>\n<h5 id=\"3-3-2-Linux平台\"><a href=\"#3-3-2-Linux平台\" class=\"headerlink\" title=\"3.3.2 Linux平台\"></a>3.3.2 Linux平台</h5><p>推送文件到 3.1中创建的远程仓库<code>archlinuxScript</code>完整流程：<br>a. 首先初始化本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>b. 然后添加远程仓库，并查看远程仓库是否添加成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br><span class=\"line\">git remote add origin git@github.com:skillf-qf&#x2F;archlinuxScript.git</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p>c. 拉取远程仓库到本地仓库，目的让本地仓库和远程仓库保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>\n<p>d. 进入本地仓库（创建的文件夹 /home/skillf/github）  并添加一个文件 <code>test.c</code>，模拟修改本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch test.c</span><br></pre></td></tr></table></figure>\n\n\n<p>e. 将文件添加到暂存区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">文件多的话，可以使用 git add .  表示当前目录下的所有文件 </span><br><span class=\"line\">git add test.c </span><br></pre></td></tr></table></figure>\n<p>f. 添加提交说明：<br>提交说明类似于代码注释，方便我们记忆项目做了哪些修改，也可为空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;update 20210126&quot;</span><br></pre></td></tr></table></figure>\n<p>g. 推送之前需要统一本地仓库和远程仓库的分支名，不然会推送出错<br>先看github 远程仓库的默认分支名： <code>main</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7c4da6583a475c73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>在看本地仓库的分支名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ae14bf217a8cbb8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>很明显不一致，原因是以前的git和github的默认分支都叫 master，后来github上改为了main，而git没有做修改，此时我们需要手动修改分支名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -m master main</span><br></pre></td></tr></table></figure>\n<p>i. 推送本地仓库到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n\n<p>注意：<br><code>origin</code> 是关联的远程仓库的标签，可以使用 <code>git remote -v</code> 查看当前本地已关联的远程仓库，<br><code>main</code> 是 Github 上的默认分支名。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-087c0348457cda8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-f176c2cbc8e00b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-84aa20464c6aa735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-0cf8bc871b523bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>git本地仓库推送之后，github远程仓库多了个<code>test.c</code>文件<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-20b16f88b0232d7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><em><strong>谢谢阅读！</strong></em></p>\n<p>【完】</p>\n","categories":["Diary"],"tags":["Git"]},{"title":"Git同步项目到Github的完整流程——Linux篇","url":"/2021/01/26/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Linux%E7%AF%87/","content":"<p>最近在写一个archlinux的自动安装脚本，由于需要在不同电脑上切换非常麻烦，所以使用github做版本管理，网上查了很多资料，做一下笔记捋一下git与github的简单使用流程：</p>\n<p><code>测试平台：Windows7 + ArchLinux</code></p>\n<p>首先要理解的是：</p>\n<pre><code>    每一个文件夹都可以当成是一个本地仓库（只要包含有 .git）\n    每一个本地仓库都有一个 .git 包含该仓库的基本设置\n</code></pre>\n<p>####1. 安装 git</p>\n<p>我这里使用archlinux发行版，直接使用<code>pacman</code>命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S git openssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ed0366a5587293b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"archlinux 安装git\"></p>\n<p>####2.  生成公钥</p>\n<p>首先打开你自己的 terminal，然后一样输入命令：<br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p>一路按回车即可！<br>生成之后按提示路径找到<code>id_rsa.pub</code>这个文件，即是我们要添加的公钥文件。<br>而<code>id_rsa</code>文件则不用理会，它是根据本地电脑生成的私钥，用来配对github上的公钥。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-dbc81c39a0fa86a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"公钥路径\"><br>接下来找到公钥路径，打开 <code>id_rsa.pub</code>文件，并全选文件里面的内容复制出来，以做备用。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-a4947c6d261143b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制公钥内容\"></p>\n<p>####3.  添加公钥到 Github</p>\n<p>首先当然是要去<a href=\"https://github.com/\">github官</a>网注册一个账号啦~<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-c0f76c233744dbe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册github账号\"><br>按提示注册完之后，登录账号按提示添加公钥：</p>\n<p><strong><code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key</code></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6da6fd1ca531103c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加公钥\"><br>进入 <code>SSH keys</code> 添加页面后，按提示将复制出来的公钥内容粘贴到Key栏，最后点击添加按钮，输入登录密码确认添加，到此个人电脑与 Github 的公钥添加已完成。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-080586a019c5b0d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"粘贴公钥内容\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-739cbcc45b1d7a9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"SSH keys添加完成\"></p>\n<p>最后验证是否添加成功，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>回车后按提示输入 <code>yes</code> 回车即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7eb986cd1afccc60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"验证\"></p>\n<p>####4.  创建Github远程仓库<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-68cd67a381958534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"setting\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-b8c43e52a122ea45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"New\"><br>根据自己的需求创建相应的远程仓库：<br><code>eg: archlinuxScript</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4a6b3326aeefb892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建远程仓库\"><br>复制远程仓库地址备用<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-748bfd6650512952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制远程仓库地址\"></p>\n<p>####5.  配置git</p>\n<p>打开 terminal，随意创建一文件夹(eg: /home/skilfl/github)，进入该文件夹并输入命令设置github 账号名和邮箱地址：<br><code>&quot;githubname&quot;：注册的Github账号名称 </code><br><code> &quot;xxxx@xxx.com&quot;：注册Github用的邮箱地址</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;githubname&quot;</span><br><span class=\"line\">git config --global user.email &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6bd37a9f64043d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置本地git\"></p>\n<p><em><strong>现在可以随意拉取推送远程仓库了！</strong></em></p>\n<p>####6.  推送项目到github</p>\n<p>推送之前先看一下远程仓库的内容，只有个<code>README.md</code>文件：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-bd41e2606812bc33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看远程仓库内容\"></p>\n<p>推送文件到 步骤4 中所创建的远程仓库<code>archlinuxScript</code>完整流程：<br>a. 首先初始化本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>b. 然后添加远程仓库，并查看远程仓库是否添加成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br><span class=\"line\">git remote add origin git@github.com:skillf-qf&#x2F;archlinuxScript.git</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p>c. 拉取远程仓库到本地仓库，目的让本地仓库和远程仓库保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>\n<p>d. 进入本地仓库（创建的文件夹 /home/skillf/github）  并添加一个文件 <code>test.c</code>，模拟修改本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch test.c</span><br></pre></td></tr></table></figure>\n\n\n<p>e. 将文件添加到暂存区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">文件多的话，可以使用 git add .  表示当前目录下的所有文件 </span><br><span class=\"line\">git add test.c </span><br></pre></td></tr></table></figure>\n<p>f. 添加提交说明：<br>提交说明类似于代码注释，方便我们记忆项目做了哪些修改，也可为空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;update 20210126&quot;</span><br></pre></td></tr></table></figure>\n<p>g. 推送之前需要统一本地仓库和远程仓库的分支名，不然会推送出错<br>先看github 远程仓库的默认分支名： <code>main</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7c4da6583a475c73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看远程仓库默认分支名\"><br>在看本地仓库的分支名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ae14bf217a8cbb8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看本地仓库默认分支名\"><br>很明显不一致，原因是以前的git和github的默认分支都叫 master，后来github上改为了main，而git没有做修改，此时我们需要手动修改分支名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -m master main</span><br></pre></td></tr></table></figure>\n<p>i. 推送本地仓库到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n\n<p>注意：<br><code>origin</code> 是关联的远程仓库的标签，可以使用 <code>git remote -v</code> 查看当前本地已关联的远程仓库，<br><code>main</code> 是 Github 上的默认分支名。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-087c0348457cda8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整步骤一\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-f176c2cbc8e00b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整步骤二\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-84aa20464c6aa735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整步骤三\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-0cf8bc871b523bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整步骤四\"></p>\n<p>git本地仓库推送之后，github远程仓库多了个<code>test.c</code>文件<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-20b16f88b0232d7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看推送后的远程仓库内容\"></p>\n<p><em><strong>谢谢阅读！</strong></em></p>\n<p>【完】</p>\n","categories":["Technology"],"tags":["Git","Github"]},{"title":"Git同步项目到Github的完整流程——Windows篇","url":"/2021/04/23/Git%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0Github%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94Windows%E7%AF%87/","content":"<p>最近在写一个archlinux的自动安装脚本，由于需要在不同电脑上切换非常麻烦，所以使用github做版本管理，网上查了很多资料，做一下笔记捋一下git与github的简单使用流程：</p>\n<p><code>测试平台：Windows7 + ArchLinux</code></p>\n<p>首先要理解的是：</p>\n<pre><code>    每一个文件夹都可以当成是一个本地仓库（只要包含有 .git）\n    每一个本地仓库都有一个 .git 包含该仓库的基本设置\n</code></pre>\n<p>####1. 安装 git<br>直接在<a href=\"https://git-scm.com/\">git官网</a>下载对应安装包即可<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e2ab226452e5268e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git 官网\"><br>下载完之后按提示安装，一般默认设置就够用了（简单的上传同步功能）。</p>\n<p>####2. 生成公钥</p>\n<p>Git 软件安装完之后，找到并双击打开软件 <code>Git Bash</code>，在打开的命令行中输入命令生成密钥:<br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code><br><code>注意： 记得把&quot;xxxx@xxx.com&quot;替换成你将用来注册github账号的邮箱地址！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p>一路按回车即可！<br>生成之后按提示路径找到<code>id_rsa.pub</code>这个文件，即是我们要添加的公钥文件。<br>而<code>id_rsa</code>文件则不用理会，它是根据本地电脑生成的私钥，用来配对github上的公钥。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-1b56bf16c8002dd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"生成密钥\"></p>\n<p>接下来找到公钥路径，打开 <code>id_rsa.pub</code>文件，并全选文件里面的内容复制出来，以做备用。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-c4ac7195639bc958.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"公钥路径\"></p>\n<p>####3. 添加公钥到 Github</p>\n<p>首先当然是要去<a href=\"https://github.com/\">github官</a>网注册一个账号啦~<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-c0f76c233744dbe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册github账号\"><br>按提示注册完之后，登录账号按提示添加公钥：</p>\n<p><strong><code>Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key</code></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6da6fd1ca531103c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加公钥\"><br>进入 <code>SSH keys</code> 添加页面后，按提示将复制出来的公钥内容粘贴到Key栏，最后点击添加按钮，输入登录密码确认添加，到此个人电脑与 Github 的公钥添加已完成。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-080586a019c5b0d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"粘贴公钥内容\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-739cbcc45b1d7a9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"SSH keys添加完成\"></p>\n<p>最后验证是否添加成功，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>回车后按提示输入 <code>yes</code> 回车即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-da178747f1afb427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"验证\"></p>\n<p>####4. 创建Github远程仓库<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-68cd67a381958534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"setting\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-b8c43e52a122ea45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"New\"><br>根据自己的需求创建相应的远程仓库：<br><code>eg: archlinuxScript</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4a6b3326aeefb892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建远程仓库\"><br>复制远程仓库地址备用<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-748bfd6650512952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制远程仓库地址\"><br>####5. 配置本地git</p>\n<p>打开Git Bash，随意创建一文件夹(eg: d:\\github)，进入该文件夹并输入命令设置github 账号名和邮箱地址：<br><code>&quot;githubname&quot;：注册的Github账号名称 </code><br><code> &quot;xxxx@xxx.com&quot;：注册Github用的邮箱地址</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code><br><code>注意：记得替换 &quot;githubname&quot; 与 &quot;xxxx@xxx.com&quot; ！</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;githubname&quot;</span><br><span class=\"line\">git config --global user.email &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7e4c7e47e66efab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置本地git\"></p>\n<p>####6. 推送项目到github</p>\n<p>推送之前先看一下远程仓库的内容，只有个<code>README.md</code>文件：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-bd41e2606812bc33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看远程仓库的内容\"></p>\n<p>推送文件到 步骤4 中所创建的远程仓库<code>archlinuxScript</code>完整流程：<br>a. 首先初始化本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>b. 然后添加远程仓库，并查看远程仓库是否添加成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br><span class=\"line\">git remote add origin git@github.com:skillf-qf&#x2F;archlinuxScript.git</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p>c. 拉取远程仓库到本地仓库，目的让本地仓库和远程仓库保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>\n<p>d. 进入本地仓库（创建的文件夹 d:\\github）  并添加一个文件 <code>test.c</code>，模拟修改本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch test.c</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6ce741a7e7d8c9b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"本地仓库文件夹\"></p>\n<p>e. 将文件添加到暂存区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">文件多的话，可以使用 git add .  表示当前目录下的所有文件 </span><br><span class=\"line\">git add test.c </span><br></pre></td></tr></table></figure>\n<p>f. 添加提交说明：<br>提交说明类似于代码注释，方便我们记忆项目做了哪些修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;update 20210126&quot;</span><br></pre></td></tr></table></figure>\n<p>g. 推送之前需要统一本地仓库和远程仓库的分支名，不然会推送出错<br>先看github 远程仓库的默认分支名： <code>main</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7c4da6583a475c73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看远程仓库默认分支名\"><br>在看本地仓库的分支名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ae14bf217a8cbb8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看本地仓库默认分支名\"><br>很明显不一致，原因是以前的 Git 和 Github 的默认分支都叫 master，后来 Github上改为了main，而 Git 没有做修改，此时我们需要手动修改分支名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -m master main</span><br></pre></td></tr></table></figure>\n<p>i. 推送本地仓库到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n\n<p>注意：<br><code>origin</code> 是关联的远程仓库的标签，可以使用 <code>git remote -v</code> 查看当前本地已关联的远程仓库，<br><code>main</code> 是 Github 上的默认分支名。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-34fb3139dbdf80d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整步骤一\"><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-854452efc57469e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"完整步骤二\"></p>\n<p>git本地仓库推送之后，github远程仓库多了个<code>test.c</code>文件<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-20b16f88b0232d7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看推送后的远程仓库内容\"></p>\n<p><em><strong>谢谢阅读！</strong></em></p>\n<p>【完】</p>\n","categories":["Technology"],"tags":["Git","Github"]},{"title":"Linux&windows双系统下访问ntfs分区","url":"/2017/11/12/Linux&windows%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%AE%BF%E9%97%AEntfs%E5%88%86%E5%8C%BA/","content":"<p>####1.关于mount的挂载<br><strong>注意</strong>：在Linux系统中所有的设备都看作<strong>文件</strong>，因此只需要使用挂载命令mount将 Windows 的分区挂载到 Linux下即可实现访问。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot; mount 命令的使用格式是：</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> mount [-afFhnrvVw] [-L&lt;标签&gt;] [-o&lt;选项&gt;] [-t&lt;文件系统类型&gt;] [设备名] [加载点]</span><br><span class=\"line\">$ sudo mount -t ntfs-3g /dev/sdx linux-path</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是：<br><strong>参数</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">      sudo：表示需要管理员权限</span><br><span class=\"line\">-t ntfs-3g：这里指定设备的文件系统类型，【ntfs-3g】需要单独安装</span><br><span class=\"line\">  &#x2F;dev&#x2F;sdx：这是被访问的windows分区，可以使用【sudo fdisk -l】查看分区</span><br><span class=\"line\">linux-path：这是挂载到Linux的一个挂载点，即可以是一个文件夹，【eg：&#x2F;home&#x2F;test】</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">&quot; 具体参数如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Linux下可以使用以下命令查看mount的用法：</span><br><span class=\"line\">$ man mount</span><br><span class=\"line\">-a 加载文件&#x2F;etc&#x2F;fstab中设置的所有设备。 </span><br><span class=\"line\">-f 不实际加载设备。可与-v等参数同时使用以查看mount的执行过程。 </span><br><span class=\"line\">-F 需与-a参数同时使用。所有在&#x2F;etc&#x2F;fstab中设置的设备会被同时加载，可加快执行速度。 </span><br><span class=\"line\">-h 显示在线帮助信息。 </span><br><span class=\"line\">-L&lt;标签&gt; 加载文件系统标签为&lt;标签&gt;的设备。 </span><br><span class=\"line\">-n 不将加载信息记录在&#x2F;etc&#x2F;mtab文件中。 </span><br><span class=\"line\">-o&lt;选项&gt; 指定加载文件系统时的选项。有些选项也可在&#x2F;etc&#x2F;fstab中使用。这些选项包括： </span><br><span class=\"line\">async 以非同步的方式执行文件系统的输入输出动作。 </span><br><span class=\"line\">atime 每次存取都更新inode的存取时间，默认设置，取消选项为noatime。 </span><br><span class=\"line\">auto 必须在&#x2F;etc&#x2F;fstab文件中指定此选项。执行-a参数时，会加载设置为auto的设备，取消选取为noauto。 </span><br><span class=\"line\">defaults 使用默认的选项。默认选项为rw、suid、dev、exec、anto nouser与async。 </span><br><span class=\"line\">dev 可读文件系统上的字符或块设备，取消选项为nodev。 </span><br><span class=\"line\">exec 可执行二进制文件，取消选项为noexec。 </span><br><span class=\"line\">noatime 每次存取时不更新inode的存取时间。 </span><br><span class=\"line\">noauto 无法使用-a参数来加载。 </span><br><span class=\"line\">nodev 不读文件系统上的字符或块设备。 </span><br><span class=\"line\">noexec 无法执行二进制文件。 </span><br><span class=\"line\">nosuid 关闭set-user-identifier(设置用户ID)与set-group-identifer(设置组ID)设置位。 </span><br><span class=\"line\">nouser 使一位用户无法执行加载操作，默认设置。 </span><br><span class=\"line\">remount 重新加载设备。通常用于改变设备的设置状态。 </span><br><span class=\"line\">ro 以只读模式加载。 </span><br><span class=\"line\">rw 以可读写模式加载。 </span><br><span class=\"line\">suid 启动set-user-identifier(设置用户ID)与set-group-identifer(设置组ID)设置位，取消选项为nosuid。 </span><br><span class=\"line\">sync 以同步方式执行文件系统的输入输出动作。 </span><br><span class=\"line\">user 可以让一般用户加载设备。 </span><br><span class=\"line\"></span><br><span class=\"line\">-r 以只读方式加载设备。 </span><br><span class=\"line\">-t&lt;文件系统类型&gt; 指定设备的文件系统类型。常用的选项说明有： </span><br><span class=\"line\">minix Linux最早使用的文件系统。 </span><br><span class=\"line\">ext2 Linux目前的常用文件系统。 </span><br><span class=\"line\">msdos MS-DOS 的 FAT。 </span><br><span class=\"line\">vfat Win85&#x2F;98 的 VFAT。 </span><br><span class=\"line\">nfs 网络文件系统。 </span><br><span class=\"line\">iso9660 CD-ROM光盘的标准文件系统。 </span><br><span class=\"line\">ntfs Windows NT的文件系统。 </span><br><span class=\"line\">hpfs OS&#x2F;2文件系统。Windows NT 3.51之前版本的文件系统。 </span><br><span class=\"line\">auto 自动检测文件系统。 </span><br><span class=\"line\">-v 执行时显示详细的信息。 </span><br><span class=\"line\">-V 显示版本信息。 </span><br><span class=\"line\">-w 以可读写模式加载设备，默认设置。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>####2.关于文字显示<br>由于linux与windows是两个完全不同的系统，对于编码方式也是各有差异，所以当你挂载完windows想要访问时，你会发现，突然出现很多的【？？？？】<br>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot; -o iocharset=cp936 </span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> -o iocharset=gb2312 </span><br><span class=\"line\"><span class=\"string\">&quot; -o iocharset=utf8</span></span><br><span class=\"line\"><span class=\"string\">$ sudo mount -o iocharset=utf8 -t ntfs-3g /dev/sdx linux-path</span></span><br></pre></td></tr></table></figure>\n<p>三种加参数方式都可以，意在挂载分区时选择字符串的编码方式，对于中文来说上述三种都支持，推荐使用【utf8】，这中编码兼容了前面两种，字符集更大。<br>####3.关于卸载挂载分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo umount linux-path</span><br><span class=\"line\">========================================</span><br><span class=\"line\">umount :mount 的反操作</span><br></pre></td></tr></table></figure>\n<p>####4.关于开机自动挂载的配置<br>开机配置文件：/etc/fstab</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot; 在etc目录下找到fstab文件，在最下面一行添加如下内容即可：</span></span><br><span class=\"line\"><span class=\"string\">$ sudo vim /etc/fstab</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">/dev/sdbx linux-path ntfs-3g default 0 0</span></span><br></pre></td></tr></table></figure>\n<p><strong>fstab的小知识点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot; 关于fstab这个文件的描述说明如下:</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> 要求：</span><br><span class=\"line\"><span class=\"string\">&quot; 1）根目录/必须载入，而且要先于其他载入点被载入</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> 2）其他载入点必须为已建立的目录</span><br><span class=\"line\"><span class=\"string\">&quot; 3）若进行卸载，必须先将工作目录移到载入点及其子目录之外</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> ====================================================</span><br><span class=\"line\">▶ cat /etc/fstab     </span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab: static file system information</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;file system&gt;        &lt;dir&gt;           &lt;type&gt;           &lt;options&gt;                     &lt;dump&gt;  &lt;pass&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/dev/nvme0n1p5          /               ext4            rw,relatime,data=ordered        0         1</span><br><span class=\"line\"></span><br><span class=\"line\">/dev/sda2               /home           ext4            rw,relatime,data=ordered        0         2</span><br><span class=\"line\"></span><br><span class=\"line\">/swapfile               none            swap            defaults                        0         0</span><br><span class=\"line\"></span><br><span class=\"line\">/dev/sdb1              /home/<span class=\"built_in\">test</span>       ntfs-3g         default                         0         0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot; ====================================================</span></span><br><span class=\"line\"><span class=\"string\">&lt;file system&gt;：设备号或该设备的卷标</span></span><br><span class=\"line\"><span class=\"string\">        &lt;dir&gt;：挂载点</span></span><br><span class=\"line\"><span class=\"string\">       &lt;type&gt;：文件系统</span></span><br><span class=\"line\"><span class=\"string\">    &lt;options&gt;：文件系统参数</span></span><br><span class=\"line\"><span class=\"string\">       &lt;dump&gt;: demp命令备份。0：不备份，1：备份，2：备份，但比1重要性小。</span></span><br><span class=\"line\"><span class=\"string\">               设置了该参数后，Linux中使用dump命令备份系统的时候就可以备份相应设置的挂载点了。</span></span><br><span class=\"line\"><span class=\"string\">       &lt;pass&gt;：系统启动用fsck检验分区。0：不检验，1：要检验，2要检验，但比1晚检验。</span></span><br><span class=\"line\"><span class=\"string\">               一般根目录设置为1，其他设置为2就可以了。</span></span><br><span class=\"line\"><span class=\"string\">               因为有些挂载点是不需要检验的，比如：虚拟内存swap、/proc等</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Technology"],"tags":["Linux","Windows","NTFS"]},{"title":"Python中的 socket 套接字","url":"/2017/09/21/Python%E4%B8%AD%E7%9A%84-socket-%E5%A5%97%E6%8E%A5%E5%AD%97/","content":"<p>socket一直没去好好学习一下，因为太懒了 -.-!!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">小知识点：</span><br><span class=\"line\">1.计算机中一般可以见到这样的IP地址127.0.0.1，意思是本机地址，即始终指向当前计算机</span><br><span class=\"line\">2.关于有效端口号：范围0～65535（其中小于1024的端口号预留给了系统），如果使用linux，</span><br><span class=\"line\">   那么可以在&#x2F;etc&#x2F;servuices文件中查看预留端口的列表（以及服务器&#x2F;协议 和 套接字类型）。</span><br></pre></td></tr></table></figure>\n<p>###目录<br>######<a href=\"#%E5%85%B3%E4%BA%8Esocket\">1. 关于socket</a><br>######<a href=\"#%E5%88%9B%E5%BB%BA%E5%A5%97%E6%8E%A5%E5%AD%97\">2. 创建套接字</a><br>######<a href=\"#%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF-%3E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84\">3. 创建简单的客户端-&gt;服务器架构</a></p>\n<p>#####1. 关于socket<br>首先需要有大概的认知：什么是 客户端-&gt;服务器模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.服务器：简单来讲就是一个被动接受请求信息并处理相关请求的一系列硬件或软件。</span><br><span class=\"line\">2.客户端：就是主动请求服务器，希望获得相关的服务。</span><br></pre></td></tr></table></figure>\n<p>套接字：通俗一点就是用于相互通讯。<br>套接字有两种类型：基于文件的和面向网络的。<br>在python中有个模块就叫 socket,包含socket()函数： </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">socket(socket_family,socket_type,protocol=<span class=\"number\">0</span>)   <span class=\"comment\"># socket()函数原型</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">socket_family  : 代表 地址家族(address family，缩写AF)，python只支持</span><br><span class=\"line\">                 AF_UNIX、AF_NETLINK、AF_TIPC、AF_INET这几个家族，python网络编程使用的地址家族：AF_INET;</span><br><span class=\"line\">  </span><br><span class=\"line\">  socket_type  : TCP/IP 面向连接的套接字类型 SOCK_STREAM（协议：传输控制协议（TCP））;</span><br><span class=\"line\">                 UDP/IP 无连接的套接字类型 SOCK_DGRAM（协议：用户数据报协议（UDP））</span><br><span class=\"line\"></span><br><span class=\"line\">    protocol   : 通常省略，默认为<span class=\"number\">0</span>。</span><br><span class=\"line\">````</span><br><span class=\"line\"><span class=\"comment\">#####2. 创建套接字</span></span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *   <span class=\"comment\"># 导入 socket 模块</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 TCP/IP 套接字</span></span><br><span class=\"line\">tcp_socket = socket(AF_INET,SOCK_STREAM )   <span class=\"comment\"># 调用 socket() 函数  </span></span><br><span class=\"line\"><span class=\"comment\"># 创建 UDP/IP 套接字</span></span><br><span class=\"line\">udp_socket = socket(AF_INET,SOCK_DGRAM)</span><br></pre></td></tr></table></figure>\n<p>#####3. 创建简单的客户端-&gt;服务器架构<br>这里使用两个python的解释器来模拟客户端和服务器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一个python解释器：服务器</span></span><br><span class=\"line\">▶ python</span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.2</span> (default, Jul <span class=\"number\">20</span> <span class=\"number\">2017</span>, 03:<span class=\"number\">52</span>:<span class=\"number\">27</span>) </span><br><span class=\"line\">[GCC <span class=\"number\">7.1</span><span class=\"number\">.1</span> <span class=\"number\">20170630</span>] on linux</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *                  <span class=\"comment\"># 导入 socket 模块</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_server = socket(AF_INET,SOCK_STREAM)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_server.bind((<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">12345</span>))  <span class=\"comment\"># 因为是同一台计算机，所以用本地IP，端口号随意一个有效位</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_server.listen(<span class=\"number\">1</span>)                  <span class=\"comment\"># 监听连接，并且在连接被转接或拒绝之前，设置传入连接请求的最大数，这里是 1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_socket,addr = tcp_server.accept() <span class=\"comment\"># accept() 之后将一直处于等待状态，直到连接被建立。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_socket.send(<span class=\"string\">b&#x27;hello,i\\&#x27;m server&#x27;</span>) <span class=\"comment\"># 成功建立连接之后，利用send()发送信息，注意不支持utf-8,则用 send(b&#x27;字符串&#x27;) 的模式</span></span><br><span class=\"line\"><span class=\"number\">16</span>                                        <span class=\"comment\"># 发送的字节数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"></span><br><span class=\"line\">---------------------------------------------------我是分割线-------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二个python解释器：客户端</span></span><br><span class=\"line\">▶ python</span><br><span class=\"line\">Python <span class=\"number\">3.6</span><span class=\"number\">.2</span> (default, Jul <span class=\"number\">20</span> <span class=\"number\">2017</span>, 03:<span class=\"number\">52</span>:<span class=\"number\">27</span>) </span><br><span class=\"line\">[GCC <span class=\"number\">7.1</span><span class=\"number\">.1</span> <span class=\"number\">20170630</span>] on linux</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> *                        <span class=\"comment\"># 导入 socket 模块</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_client = socket(AF_INET,SOCK_STREAM)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tcp_client.connect((<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">12345</span>))     <span class=\"comment\"># 确认sccept() 的连接，即这里将建立连接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>masg = tcp_client.recv(<span class=\"number\">1024</span>)                <span class=\"comment\"># 接收TCP消息，1024为缓冲区即 1 KB，此参数可根据网络性能和程序需要来更改。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(masg)                                 <span class=\"comment\"># 打印接收到的TCP消息</span></span><br><span class=\"line\"><span class=\"string\">b&quot;hello,i&#x27;m server&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>\n\n<p><em>未完…待续…</em></p>\n","categories":["Technology"],"tags":["Python"]},{"title":"arch安装ssh及配置登录笔记本","url":"/2017/11/04/arch%E5%AE%89%E8%A3%85ssh%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%99%BB%E5%BD%95%E7%AC%94%E8%AE%B0%E6%9C%AC/","content":"<p>1.安装ssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S openssh  </span><br></pre></td></tr></table></figure>\n<p>2.设置开机自动启动<strong>ssh</strong>服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> sshd</span><br></pre></td></tr></table></figure>\n<p>3.手动方式启动 <strong>ssh</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start sshd</span><br></pre></td></tr></table></figure>\n<p>4.配置ssh：<strong>白名单设置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class=\"line\"># 在文件的最后面添加</span><br><span class=\"line\">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">...</span><br><span class=\"line\"># Example of overriding settings on a per-user basis</span><br><span class=\"line\">#Match User anoncvs</span><br><span class=\"line\">#       X11Forwarding no</span><br><span class=\"line\">#       AllowTcpForwarding no</span><br><span class=\"line\">#       PermitTTY no</span><br><span class=\"line\">#       ForceCommand cvs server</span><br><span class=\"line\">AllowUsers username@ipaddr  # 新增 </span><br><span class=\"line\">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"># eg：AllowUsers 菜鸟F@127.0.0.1 那么此电脑只允许 127.0.0.1 这个ip用户登录</span><br><span class=\"line\">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>\n<p>5.最后重启ssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl restart sshd </span><br></pre></td></tr></table></figure>\n<p>##关于远程传输数据 – scp<br>scp是有Security的文件copy，基于ssh登录。</p>\n<p>本地传输至远程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp file username@ipaddr:path</span><br><span class=\"line\"><span class=\"comment\">#=====================================</span></span><br><span class=\"line\"><span class=\"comment\"># eg:</span></span><br><span class=\"line\">$ scp /home/fqf/Arch.png pi@127.0.0.1:/home/pi</span><br><span class=\"line\">pi@127.0.0.1<span class=\"string\">&#x27;s password: </span></span><br><span class=\"line\"><span class=\"string\">Arch.png                                          100%   16KB   1.1MB/s   00:00 </span></span><br></pre></td></tr></table></figure>\n<p>远程传输至本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp username@ipaddr:file path</span><br><span class=\"line\"><span class=\"comment\">#=====================================</span></span><br><span class=\"line\"><span class=\"comment\"># eg:</span></span><br><span class=\"line\">$ scp pi@127.0.0.1:/home/pi/text.txt   /home/fqf</span><br><span class=\"line\">pi@127.0.0.1<span class=\"string\">&#x27;s password: </span></span><br><span class=\"line\"><span class=\"string\">text.txt                                        100%   13     8.3KB/s   00:00    </span></span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Linux","SSH"]},{"title":"arch安装fcitx输入法","url":"/2017/11/04/arch%E5%AE%89%E8%A3%85fcitx%E8%BE%93%E5%85%A5%E6%B3%95/","content":"<p>1.安装fcitx软件及配置工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pacman -S fcitx fcitx-im fcitx-configtool</span><br></pre></td></tr></table></figure>\n<p>即装即用！</p>\n<p>2.安装官方源中文字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pacman -S noto-fonts-cjk</span><br></pre></td></tr></table></figure>\n<p>3.添加对 gtk、qt的支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/profile文件，在文件开头加入三行：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=<span class=\"string\">&quot;fcitx&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=<span class=\"string\">&quot;fcitx&quot;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">..</span><br></pre></td></tr></table></figure>\n\n","categories":["Technology"],"tags":["Linux","Fcitx"]},{"title":"python之函数常用小技巧","url":"/2017/09/23/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/","content":"<p>#####1. 字符串处理方法：strip()函数<br>######1.1 原型及使用方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">string.strip(s[, chars]) </span><br><span class=\"line\"></span><br><span class=\"line\">工作原理：首先复制源字符串，然后进行字符串切片删除处理。</span><br><span class=\"line\">注意：仅仅是返回一个副本字符串，并不改变源字符串，所以一般配合赋值 “ = ” 来改变源字符串。</span><br><span class=\"line\">  <span class=\"number\">1.</span> 当chars为<span class=\"literal\">None</span>时，默认删除前后两端空格字符，并返回处理后的字符串副本。</span><br><span class=\"line\">  <span class=\"number\">2.</span> 当chars为非<span class=\"literal\">None</span>时（必须为字符串），默认删除前后两端指定的chars字符，并返回处理后的字符串副本。</span><br><span class=\"line\">eg：</span><br><span class=\"line\"><span class=\"comment\"># 默认None：</span></span><br><span class=\"line\"> &gt;&gt;&gt; s</span><br><span class=\"line\"><span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"> you </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.strip()</span><br><span class=\"line\"><span class=\"string\">&#x27;you&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s  <span class=\"comment\"># 本身的 s 并没有改变</span></span><br><span class=\"line\"><span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\">---------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\"># 指定chars字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s= <span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.strip(<span class=\"string\">&#x27;y&#x27;</span>)  <span class=\"comment\"># 注意只对前后两端起作用</span></span><br><span class=\"line\"><span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.strip(<span class=\"string\">&#x27;d&#x27;</span>) </span><br><span class=\"line\"><span class=\"string\">&#x27;you&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\"><span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\">```   </span><br><span class=\"line\"><span class=\"comment\">######1.2 strip()函数的常用扩展 </span></span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"number\">1.2</span><span class=\"number\">.1</span> string.lstrip(s[, chars]) </span><br><span class=\"line\">原理和string.strip(s[, chars])一致，只不过它是两端删除变成了：从开头一端往后删除。</span><br><span class=\"line\">eg：</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s=<span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\"><span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.lstrip()  <span class=\"comment\"># 删除开头端字符</span></span><br><span class=\"line\"><span class=\"string\">&#x27;you &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\"><span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s= <span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.lstrip(<span class=\"string\">&#x27;d&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;youddd&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"comment\">####################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.2</span><span class=\"number\">.2</span> string.rstrip(s[, chars]) </span><br><span class=\"line\">原理和string.lstrip(s[, chars])一致，只不过它是开头一端删除变成了：从结尾一端往前删除。</span><br><span class=\"line\">eg：</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s=<span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\"><span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.rstrip()  <span class=\"comment\"># 删除开头端字符</span></span><br><span class=\"line\"><span class=\"string\">&#x27; you&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\"><span class=\"string\">&#x27; you &#x27;</span></span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s= <span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;dyouddd&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.lstrip(<span class=\"string\">&#x27;d&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;dyou&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>\n<p>#####2. range函数<br>######2.2.1 原型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">range</span>(start, stop[, step]) </span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"number\">1.</span> stop不能省略，但是start和[,step]都是可以省略的：</span><br><span class=\"line\">当star省略时，默认为 <span class=\"number\">0</span></span><br><span class=\"line\">当step省略时，默认为 <span class=\"number\">1</span></span><br><span class=\"line\">注意：step可以是正数也可以是负数，但不能为 <span class=\"number\">0</span>，否则会报错：ValueError</span><br><span class=\"line\">     一般<span class=\"built_in\">range</span>配合<span class=\"keyword\">for</span>循环使用。</span><br><span class=\"line\">eg：</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">10</span>,-<span class=\"number\">2</span>) <span class=\"comment\"># 这里从0到10都是正数，所以step显然不可能有值</span></span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>,-<span class=\"number\">10</span>,-<span class=\"number\">2</span>)</span><br><span class=\"line\">[<span class=\"number\">0</span>, -<span class=\"number\">2</span>, -<span class=\"number\">4</span>, -<span class=\"number\">6</span>, -<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>) <span class=\"comment\"># 当start省略时，默认从0开始，此时start和step都省略，stop=0 显然没有数值产生。</span></span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"comment\"># step=0 会引发异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;pyshell#32&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">ValueError: <span class=\"built_in\">range</span>() step argument must <span class=\"keyword\">not</span> be zero</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a,b,x=<span class=\"built_in\">range</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>\n<p>#####3. file的处理</p>\n","categories":["Technology"],"tags":["Python"]},{"title":"python关于解码的问题","url":"/2017/09/25/python%E5%85%B3%E4%BA%8E%E8%A7%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<p>decode：把一种编码转换成 unicode —&gt; 解码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># byte -&gt; str</span><br><span class=\"line\">&gt;&gt;&gt; a &#x3D;b&#39;hello&#39;</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">b&#39;hello&#39;</span><br><span class=\"line\">&gt;&gt;&gt; a.decode(&#39;utf-8&#39;)</span><br><span class=\"line\">&#39;hello&#39;</span><br><span class=\"line\">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure>\n<p>encode：把unicode转换成另一种编码  —&gt; 编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># str -&gt; byte</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Python"]},{"title":"关于Sox不能播放mp3文件","url":"/2018/03/25/%E5%85%B3%E4%BA%8ESox%E4%B8%8D%E8%83%BD%E6%92%AD%E6%94%BEmp3%E6%96%87%E4%BB%B6/","content":"<p>在Archlinux官方源安装了sox之后，发现并没有对mp3的支持，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ file tmpc0n6yqzh.mp3</span><br><span class=\"line\">tmpc0n6yqzh.mp3: MPEG ADTS, layer III, v2,  64 kbps, 16 kHz, Monaural</span><br><span class=\"line\"></span><br><span class=\"line\">$ play tmpc0n6yqzh.mp3</span><br><span class=\"line\">play FAIL formats: no handler <span class=\"keyword\">for</span> file extension `mp3<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>搜索一番之后发现，需要重新编译源码，然后在安装才能完整的对音频文件的支持。</p>\n<ol>\n<li> 下载<a href=\"https://sourceforge.net/projects/sox/files/sox/\">sox源码</a>(可能需要翻墙)，<br>我把它下载啦下来存到了<a href=\"https://pan.baidu.com/s/10EKCppGEps6bnsYRKOn5kw\">网盘</a>，有需要的可以自行下载<br>这里下载版本的是：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sox-14.4.2.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>解压<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ tar -zxvf  sox-14.4.2.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>编译&amp;&amp;安装<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入sox-14.4.2文件夹</span></span><br><span class=\"line\"> $ <span class=\"built_in\">cd</span> sox-14.4.2</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure></li>\n<li>重新安装sox<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S sox</span><br></pre></td></tr></table></figure></li>\n<li>测试 <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ play tmpc0n6yqzh.mp3</span><br><span class=\"line\"></span><br><span class=\"line\">play WARN mp3-util: MAD lost sync</span><br><span class=\"line\">play WARN mp3-util: MAD lost sync</span><br><span class=\"line\"></span><br><span class=\"line\">tmpc0n6yqzh.mp3:</span><br><span class=\"line\"></span><br><span class=\"line\"> File Size: 61.6k     Bit Rate: 49.6k</span><br><span class=\"line\">  Encoding: MPEG audio    </span><br><span class=\"line\">  Channels: 1 @ 16-bit   </span><br><span class=\"line\">Samplerate: 16000Hz      </span><br><span class=\"line\">Replaygain: off         </span><br><span class=\"line\">  Duration: 00:00:09.94  </span><br><span class=\"line\"></span><br><span class=\"line\">In:100%  00:00:09.94 [00:00:00.00] Out:159k  [      |      ] Hd:3.6 Clip:0    </span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n完成。</li>\n</ol>\n","categories":["Technology"],"tags":["Linux","Sox"]},{"title":"关于Github网页打不开与图片无法加载解决方法","url":"/2021/04/20/%E5%85%B3%E4%BA%8EGithub%E7%BD%91%E9%A1%B5%E6%89%93%E4%B8%8D%E5%BC%80%E4%B8%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","content":"<p>出现这种情况的原因是因为：<code>DNS投毒</code> 或者叫 <code>DNS污染</code>。</p>\n<p><code>从客户端向DNS服务器发出查询IP的请求，到响应返回到客户端的这段时间里，如果有黑客或者其他一些不可说的设施伪造返回了一个错误的DNS应答，那么用户将不能访问到真正的资源。</code></p>\n<p><code>所以有两种解决方式：1、短期处理方法 2、从根源解决问题</code><br>#####1. 短期处理方法 [1]<br>网上绝大部分的回答，都是修改 host 文件，已到达手动指定DNS解析的目的，此方法只能临时解决该问题，等过一段时间之后，会发现又开始打不开网页、图片无法加载、访问很慢等问题。<br>步骤如下<br>######1.1 获得真实ip地址：<br>打开【<a href=\"https://www.ipaddress.com】网页,输入想要解析的网址【github.com】与【avatars.githubusercontent.com】/\">https://www.ipaddress.com】网页，输入想要解析的网址【github.com】与【avatars.githubusercontent.com】</a><br>红色方框地址就是我们想要的目标IP<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-430d3bf1ff023000.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"解析github.com\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-139fe7e42fb6391e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"解析avatars.githubusercontent.com\"><br>######1.2 修改host文件<br>获得IP之后，找到host文件，【C:\\Windows\\System32\\drivers\\etc\\host】<br>在文件末尾按如下格式添加即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># GitHub Host Start</span><br><span class=\"line\">140.82.113.3\tgithub.com</span><br><span class=\"line\">185.199.108.133\tavatars.githubusercontent.com</span><br><span class=\"line\">185.199.109.133\tavatars.githubusercontent.com</span><br><span class=\"line\">185.199.110.133\tavatars.githubusercontent.com</span><br><span class=\"line\">185.199.111.133\tavatars.githubusercontent.com</span><br></pre></td></tr></table></figure>\n<p>这种方式需要每隔一段时间就去获取一次IP，不然会重新出现打不开网页、无法加载、打开慢等问题。<br>#####2. 从根源解决问题 [2]<br>因为国内的DNS很容易被劫持污染无法直接指向目标地址，那么可以尝试直接使用Google提供的DNS服务器地址<code>8.8.8.8; 8.8.4.4</code>，直接指向目标地址<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e8e93aebabcec1f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Google DNS\"><br>但是这种方法会引出新的问题：当访问国内网页时，会出现访问Github时的情况：打不开网页、无法加载、打开慢等问题。</p>\n<p>那么问题回到了起点，有没有两种都适用的方法？<br>很明显是有的！</p>\n<p>在这之前先要弄明白什么是首选(Preferred)DNS服务器与备选(Alternate)DNS服务器：<br>首选DNS和备用DNS都是一种域名系统，正常情况下都是使用首选DNS服务器，只有当首选DNS服务器无法正常解析时，才会使用备选DNS服务器。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-470a58e175919cc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"混合DNS使用\"><br>所以我们可以将首选DNS服务器填写国内常用DNS地址[3]：<code>114.114.114.114</code><br>备选DNS服务器填写Google提供的DNS地址：<code>8.8.8.8 或者 8.8.4.4</code></p>\n<blockquote>\n<p>114.114.114.114是国内移动、电信和联通通用的DNS，手机和电脑端都可以使用，干净无广告，解析成功率相对来说更高，国内用户使用的比较多，而且速度相对快、稳定，是国内用户上网常用的DNS。<br>8.8.8.8是Google提供的DNS，该地址是全球通用的，相对来说，更适合国外以及访问国外网站的用户使用。</p>\n</blockquote>\n<p>【参考资料】<br>[1]<a href=\"https://blog.csdn.net/qq_38132105/article/details/107137558\">https://blog.csdn.net/qq_38132105/article/details/107137558</a><br>[2]<a href=\"https://blog.csdn.net/lr157/article/details/105665798/\">https://blog.csdn.net/lr157/article/details/105665798/</a><br>[3]<a href=\"https://baike.baidu.com/item/114DNS?fr=aladdin#2\">https://baike.baidu.com/item/114DNS?fr=aladdin#2</a></p>\n","categories":["Technology"],"tags":["Github","DNS"]},{"title":"关于在arch下给Firefox装flash插件","url":"/2017/08/05/%E5%85%B3%E4%BA%8E%E5%9C%A8arch%E4%B8%8B%E7%BB%99Firefox%E8%A3%85flash%E6%8F%92%E4%BB%B6/","content":"<p>首先，你得安装Firefox浏览器，用命令sudo pacman -S firefox 安装最新浏览器。</p>\n<p>然后，打开浏览器，随意搜索一下视频，比如我最爱看的暴走大事件，在爱奇艺下会提示你，木有安装flash插件无法播放，此时你只需要点击下载安装flash插件，然后就会自动在浏览器里下载安装包，比如<a href=\"https://www.flash.cn/cdm/latest/flash_player_ppapi_linux.x86_64.tar.gz\">flash_player_npapi_linux.x86_64.tar.gz</a></p>\n<p>下载完成之后，执行解压：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf flash_player_npapi_linux.x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>这里会得到libflashplayer.so 和usr目录，我们只需要so 文件即可，在家目录创建一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir ~&#x2F;.mozilla&#x2F;plugins&#x2F;</span><br></pre></td></tr></table></figure>\n<p>最后将so 文件复制到这个创建的目录即可，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp .&#x2F;libflashplayer.so  ~&#x2F;.mozilla&#x2F;plugins&#x2F;</span><br></pre></td></tr></table></figure>\n<p>重启浏览器即可！</p>\n","categories":["Technology"],"tags":["Linux","Firefox"]},{"title":"写一个对时间段的判断","url":"/2018/04/02/%E5%86%99%E4%B8%80%E4%B8%AA%E5%AF%B9%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E5%88%A4%E6%96%AD/","content":"<p>要求：python3.x<br>模块：datetime<br>测试平台：ArchLinux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class=\"line\">import time</span><br><span class=\"line\">def currenttime():</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    凌晨：0-5</span><br><span class=\"line\">    早晨：5-8</span><br><span class=\"line\">    上午：8-11</span><br><span class=\"line\">    中午：11-13</span><br><span class=\"line\">    下午：13-16</span><br><span class=\"line\">    傍晚：16-19</span><br><span class=\"line\">    晚上：19-24</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # H:M:S</span><br><span class=\"line\">    time_table &#x3D; [(&#39;0&#39;,&quot;凌晨&quot;),</span><br><span class=\"line\">            (&#39;5&#39;,&quot;早晨&quot;),</span><br><span class=\"line\">            (&#39;8&#39;,&quot;上午&quot;),</span><br><span class=\"line\">            (&#39;11&#39;,&quot;中午&quot;),</span><br><span class=\"line\">            (&#39;13&#39;,&quot;下午&quot;),</span><br><span class=\"line\">            (&#39;16&#39;,&quot;傍晚&quot;),</span><br><span class=\"line\">            (&#39;19&#39;,&quot;晚上&quot;)</span><br><span class=\"line\">            ]</span><br><span class=\"line\">    date &#x3D; time.asctime().split(&#39; &#39;)[3].split(&#39;:&#39;)</span><br><span class=\"line\">    #print(&#39;date: &#39;,date)</span><br><span class=\"line\">    date_mark &#x3D; &#39;&#39;</span><br><span class=\"line\">    hour &#x3D; &#39;&#39;</span><br><span class=\"line\">    for i in time_table:</span><br><span class=\"line\">        if int(date[0]) &gt; int(i[0]):</span><br><span class=\"line\">            if time_table.index(i) &#x3D;&#x3D; 6:</span><br><span class=\"line\">                date_mark &#x3D; time_table[-1][1]</span><br><span class=\"line\">                break</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if int(date[0])&#x3D;&#x3D;int(i[0]):</span><br><span class=\"line\">                date_mark &#x3D; i[1]</span><br><span class=\"line\">                break</span><br><span class=\"line\">            date_mark &#x3D; time_table[time_table.index(i)-1][1]</span><br><span class=\"line\">            break</span><br><span class=\"line\">    if int(date[0]) &lt; 12:</span><br><span class=\"line\">        hour &#x3D; str(int(date[0]))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        hour &#x3D; str(int(date[0])-12)</span><br><span class=\"line\"></span><br><span class=\"line\">    str_time &#x3D; &#39;现在是%s %s点 %s分&#39;%(date_mark,hour,date[1])#,date[2])</span><br><span class=\"line\"></span><br><span class=\"line\">    print(str_time)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    currenttime()</span><br></pre></td></tr></table></figure>\n<p>打印结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python3  currenttime.py</span><br><span class=\"line\">现在是 晚上 10点 50分</span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Python"]},{"title":"在Arch下通过jekyll搭建github pages个人博客","url":"/2018/04/04/%E5%9C%A8Arch%E4%B8%8B%E9%80%9A%E8%BF%87jekyll%E6%90%AD%E5%BB%BAgithub-pages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"<p>程序员一般都喜欢写blog，用来记录一些知识点防止以后忘记，或者方便查阅，这时候一个好的blog网页就派上用场了，本文主要讲解的是用jekyll来，在github pages搭建属于自己的blog。</p>\n<p>#####1.搭建前须知：需要用到的 ruby、rvm、gem。</p>\n<p>ruby：一种简单快捷的面向对象（面向对象程序设计）脚本语言，在20世纪90年代由日本人松本行弘(Yukihiro Matsumoto)开发，遵守GPL协议和RubyLicense。</p>\n<p>rvm：用于帮你安装Ruby环境，帮你管理多个Ruby环境，帮你管理你开发的每个Ruby应用使用机器上哪个Ruby环境。Ruby环境不仅仅是Ruby本身，还包括依赖的第三方Ruby插件。都由RVM管理。</p>\n<p>gem：Gem是封装起来的Ruby应用程序或代码库。在终端使用的gem命令，是指通过RubyGems管理Gem包。</p>\n<p>#####2.假设你没有部署过任何ruby环境，那么可以安装相关软件：</p>\n<p><code>$ sudo pacman -S ruby</code></p>\n<p>检查是否安装成功 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ruby -v </span><br><span class=\"line\">$ ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux] </span><br></pre></td></tr></table></figure>\n<p>安装成功之后不用再另外单独安装 rubygems 了,在ruby 下,rubygems已经是默认的ruby包管理程序，可以试试查看版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem -v</span><br><span class=\"line\">$ 2.6.11</span><br></pre></td></tr></table></figure>\n<p>然后使用ruby的包管理程序gem来安装相关软件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install rvm</span><br><span class=\"line\">Successfully installed rvm-1.11.3.9</span><br><span class=\"line\">Parsing documentation for rvm-1.11.3.9</span><br><span class=\"line\">Done installing documentation for rvm after 0 seconds</span><br><span class=\"line\">1 gem installed</span><br><span class=\"line\"></span><br><span class=\"line\">$ gem install bundle</span><br><span class=\"line\">Successfully installed bundle-0.0.1</span><br><span class=\"line\">Parsing documentation for bundle-0.0.1</span><br><span class=\"line\">Done installing documentation for bundle after 0 seconds</span><br><span class=\"line\">1 gem installed</span><br><span class=\"line\"></span><br><span class=\"line\">$ gem install bundler</span><br><span class=\"line\">Successfully installed bundler-1.15.4</span><br><span class=\"line\">Parsing documentation for bundler-1.15.4</span><br><span class=\"line\">Done installing documentation for bundler after 4 seconds</span><br><span class=\"line\">1 gem installed</span><br></pre></td></tr></table></figure>\n<p>#####3.安装jekyll:<br>试了好多次发现直接用gem install jekyll 会报错。无意间发现arch有个专门的软件包叫ruby-jekyll，我们直接来pacman一下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S ruby-jekyll</span><br><span class=\"line\">警告：ruby-jekyll-3.4.3-1 已经为最新 -- 重新安装</span><br><span class=\"line\">正在解决依赖关系...</span><br><span class=\"line\">正在查找软件包冲突...</span><br><span class=\"line\"></span><br><span class=\"line\">软件包 (1) ruby-jekyll-3.4.3-1</span><br><span class=\"line\"></span><br><span class=\"line\">全部安装大小：  0.81 MiB</span><br><span class=\"line\">净更新大小：  0.00 MiB</span><br><span class=\"line\"></span><br><span class=\"line\">:: 进行安装吗？ [Y&#x2F;n] </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>选择Y ，安装完毕之后，在来执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install jekyll </span><br><span class=\"line\">Successfully installed jekyll-3.5.2</span><br><span class=\"line\">Parsing documentation for jekyll-3.5.2</span><br><span class=\"line\">Done installing documentation for jekyll after 1 seconds</span><br><span class=\"line\">1 gem installed</span><br><span class=\"line\"></span><br><span class=\"line\">$ jekyll -v</span><br><span class=\"line\">jekyll 3.5.2</span><br></pre></td></tr></table></figure>\n<p>大功告成！到此jekyll搭建成功，接下来是github pages，首先你得要有个<a href=\"https://github.com/\">github</a>帐号。<br>#####4.假设你已经有了github帐号，那么现在自己的电脑建立一个本地的git仓库，没有装git的话，可以pacman一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S git</span><br><span class=\"line\">警告：git-2.14.1-1 已经为最新 -- 重新安装</span><br><span class=\"line\">正在解决依赖关系...</span><br><span class=\"line\">正在查找软件包冲突...</span><br><span class=\"line\"></span><br><span class=\"line\">软件包 (1) git-2.14.1-1</span><br><span class=\"line\"></span><br><span class=\"line\">全部安装大小：  33.39 MiB</span><br><span class=\"line\">净更新大小：   0.00 MiB</span><br><span class=\"line\"></span><br><span class=\"line\">:: 进行安装吗？ [Y&#x2F;n] </span><br></pre></td></tr></table></figure>\n<p>安装完毕之后，可以在用户目录下建立一个文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir my_blog</span><br></pre></td></tr></table></figure>\n<p>然后初始化git本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd my_blog</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">已初始化空的 Git 仓库于 &#x2F;home&#x2F;username&#x2F;my_blog&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">然后，创建一个没有父节点的分支gh-pages，所有的code都将被提交到这个分支上。有兴趣可看[官网help文档](https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;using-jekyll-as-a-static-site-generator-with-github-pages&#x2F;)</span><br></pre></td></tr></table></figure>\n<p>$ git checkout –orphan gh-pages</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#####5.启用你的jekyll，建立静态本地网页：</span><br><span class=\"line\">创建博客-&gt;进入博客-&gt;启动本地服务(ctrl+c关闭本地服务)-&gt;得到相关文件：</span><br></pre></td></tr></table></figure>\n<p>$ cd ..<br>$ jekyll new my_blog<br>Running bundle install in /home/username/my_blog…<br>  Bundler: The dependency tzinfo-data (&gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run <code>bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java</code>.<br>  Bundler: Fetching gem metadata from <a href=\"https://rubygems.org/\">https://rubygems.org/</a>…………<br>  Bundler: Fetching version metadata from <a href=\"https://rubygems.org/\">https://rubygems.org/</a>…<br>  Bundler: Fetching dependency metadata from <a href=\"https://rubygems.org/\">https://rubygems.org/</a>..<br>  Bundler: Resolving dependencies…<br>  Bundler: Using public_suffix 2.0.5<br>  Bundler: Using bundler 1.15.4<br>  Bundler: Using colorator 1.1.0<br>  Bundler: Using ffi 1.9.18<br>  Bundler: Using forwardable-extended 2.6.0<br>  Bundler: Using rb-fsevent 0.10.2<br>  Bundler: Using kramdown 1.14.0<br>  Bundler: Using liquid 4.0.0<br>  Bundler: Using mercenary 0.3.6<br>  Bundler: Using rouge 1.11.1<br>  Bundler: Using safe_yaml 1.0.4<br>  Bundler: Using addressable 2.5.1<br>  Bundler: Using rb-inotify 0.9.10<br>  Bundler: Using pathutil 0.14.0<br>  Bundler: Using sass-listen 4.0.0<br>  Bundler: Using listen 3.0.8<br>  Bundler: Using sass 3.5.1<br>  Bundler: Using jekyll-watch 1.5.0<br>  Bundler: Using jekyll-sass-converter 1.5.0<br>  Bundler: Using jekyll 3.5.2<br>  Bundler: Using jekyll-feed 0.9.2<br>  Bundler: Using minima 2.1.1<br>  Bundler: Bundle complete! 4 Gemfile dependencies, 22 gems now installed.<br>  Bundler: Use <code>bundle info [gemname]</code> to see where a bundled gem is installed.<br>New jekyll site installed in /home/username/my_blog.<br>$ cd my_blog<br>$ jekyll serve<br>…<br>…<br>…<br>Auto-regeneration: enabled for ‘/home/username/my_blog’<br>    Server address: <a href=\"http://127.0.0.1:4000/\">http://127.0.0.1:4000/</a><br>  Server running… press ctrl-c to stop.<br>$  ls<br>404.html   about.md  _config.yml   Gemfile   Gemfile.lock   index.md   _posts   _site</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看jekyll页面效果：浏览器里输入-&gt; http:&#x2F;&#x2F;localhost:4000</span><br><span class=\"line\">![Screenshot_20170823_204147.png](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;7237812-41498b24fa131729.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class=\"line\">这是本地显示的一种方式，弊端就是你必须得开着本地服务：jekyll serve ，不然会显示链接失败。</span><br><span class=\"line\">#####6.上传至github，建立动态网页blog</span><br><span class=\"line\">在my_blog文件夹里找到名为_config.yml文件。这是jekyll的设置文件，我们在里面填入如下内容，其他设置都可以用默认选项，具体解释参见[官方网页](https:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;jekyll&#x2F;wiki&#x2F;Configuration)。</span><br></pre></td></tr></table></figure>\n<p>baseurl: /my_blog</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">设置好了，还需要一个模板，在my_blog下创建一个_layouts目录，用于存放模板文件。并进入该目录，创建一个default.html文件，作为Blog的默认模板，文件内容如下。</span><br></pre></td></tr></table></figure>\n<p>$ mkdir _layouts<br>$ vim default.html<br>$ cat default.html<br><!DOCTYPE html></p>\n<html>\n<head>\n\n<pre><code>    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n    &lt;title&gt;&#123;&#123; page.title &#125;&#125;&lt;/title&gt;\n</code></pre>\n</head>\n\n<body>\n\n<pre><code>    &#123;&#123; content &#125;&#125;\n</code></pre>\n</body>\n\n</html>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Jekyll使用[Liquid模板语言](https:&#x2F;&#x2F;github.com&#x2F;shopify&#x2F;liquid&#x2F;wiki&#x2F;liquid-for-designers)，&#123;&#123; page.title &#125;&#125;表示文章标题，&#123;&#123; content &#125;&#125;表示文章内容，更多模板变量请参考[官方文档](https:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;jekyll&#x2F;wiki&#x2F;Template-Data)。</span><br><span class=\"line\">进入_posts,创建第一篇文章。格式必须为&quot;年-月-日-文章标题.后缀名&quot;的格式。如果网页代码采用html格式，后缀名为html；如果采用[markdown](http:&#x2F;&#x2F;daringfireball.net&#x2F;projects&#x2F;markdown&#x2F;)格式，后缀名为md。）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"cat-2017-08-22-hello-world-html\"><a href=\"#cat-2017-08-22-hello-world-html\" class=\"headerlink\" title=\"$ cat 2017-08-22-hello-world.html \"></a>$ cat 2017-08-22-hello-world.html </h2><p>layout: default<br>title: <a href=\"http://a.xiumi.us/board/v5/2Cb3c/54255420\">你好，世界!</a></p>\n<hr>\n<p>…</p>\n<p>我的第一篇文章</p>\n...\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">每篇文章的头部，必须有一个[yaml文件头](https:&#x2F;&#x2F;github.com&#x2F;mojombo&#x2F;jekyll&#x2F;wiki&#x2F;YAML-Front-Matter)，用来设置一些元数据。它用三根短划线&quot;---&quot;，标记开始和结束，里面每一行设置一种元数据。&quot;layout:default&quot;，表示该文章的模板使用_layouts目录下的default.html文件；&quot;title: 你好，世界&quot;，表示该文章的标题是&quot;你好，世界&quot;，如果不设置这个值，默认使用嵌入文件名的标题，即&quot;hello world&quot;。</span><br><span class=\"line\">在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。&#123;&#123; page.title &#125;&#125;就是文件头中设置的&quot;你好，世界&quot;，&#123;&#123; page.date &#125;&#125;则是嵌入文件名的日期（也可以在文件头重新定义date变量），&quot;| date_to_string&quot;表示将page.date变量转化成人类可读的格式。</span><br><span class=\"line\">回到我们的根目录：</span><br></pre></td></tr></table></figure>\n<p>$ cd my_blog<br>$ ls<br>404.html  about.md  _config.yml  Gemfile  Gemfile.lock  index.md  _posts  _site</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">将index.md删掉，建立一个index.html对应我们之前的2017-08-22-hello-world.html ：</span><br></pre></td></tr></table></figure>\n<p>$ rm -rfi ./index.md<br>rm：是否删除普通空文件 ‘./index.md’？y<br>$ vim index.html<br>$ cat index.html </p>\n<hr>\n<p>layout: default<br>title: 我的Blog</p>\n<hr>\n<h2></h2>\n\n<p>最新文章</p>\n\n<ul>\n\n<pre><code>    &#123;% for post in site.posts %&#125;\n\n                <li>&#123;&#123; post.date | date_to_string &#125;&#125; <a href=\"&#123; site.baseurl &#125;&#125;&#123;&#123; post.url &#125;&#125;\">&#123;&#123; post.title&#125;&#125;</a></li>\n        &#123;% endfor %&#125;\n</code></pre>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#####7.发布我们的code到github仓库：</span><br></pre></td></tr></table></figure>\n$ git add .\n$ git commit -m \"my  first blog\"\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">登录自己的github帐号，创建一个名为hello-world的库。然后将git本地仓库code提交到hello-world的库里。(username：是你的账户名。)</span><br></pre></td></tr></table></figure>\n$ git remote add origin https://github.com/username/hello-world.git\n$ git push origin gh-pages\n```\n上传成功之后，需要等待一会，然后输入http://username.github.io/hello-world/就可以看到Blog已经生成了。(username：是你的账户名。)\n\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7237812-346242c8abb2198c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果图\"></p>\n<p><em><strong>「完」</strong></em></p>\n","categories":["Technology"],"tags":["Python"]},{"title":"在Arch下安装pip","url":"/2017/09/03/%E5%9C%A8Arch%E4%B8%8B%E5%AE%89%E8%A3%85pip/","content":"<p>#####1. 首先安装一个命令行下载工具，我这里使用axel：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$  axel https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\"><span class=\"comment\">#下载完成之后得到一个python文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">get-pip.py</span><br></pre></td></tr></table></figure>\n<p>也可以使用 **<code>wget</code>**：</p>\n<p><strong><code>wget https://bootstrap.pypa.io/get-pip.py</code></strong></p>\n<p> 需要注意的是，当同时存在python2和python3时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ls -al /usr/bin/python*          </span><br><span class=\"line\">lrwxrwxrwx 1 root root     7 Jul 20 03:53 python -&gt; python3.6</span><br><span class=\"line\">lrwxrwxrwx 1 root root     9 Sep 20 01:26 python2 -&gt; python2.7</span><br><span class=\"line\"><span class=\"comment\">#这里需要注意python命令代表的版本</span></span><br><span class=\"line\"><span class=\"comment\"># $ sudo python2 get-pip.py    # python2 代表 python2.7  </span></span><br><span class=\"line\">$ sudo python get-pip.py     <span class=\"comment\"># python  代表 python3.6 </span></span><br><span class=\"line\">Collecting pip</span><br><span class=\"line\">  Downloading pip-9.0.1-py2.py3-none-any.whl (1.3MB)</span><br><span class=\"line\">    100% |████████████████████████████████| 1.3MB 185kB/s </span><br><span class=\"line\">Collecting wheel</span><br><span class=\"line\">  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)</span><br><span class=\"line\">    100% |████████████████████████████████| 71kB 492kB/s </span><br><span class=\"line\">Installing collected packages: pip, wheel</span><br><span class=\"line\">Successfully installed pip-9.0.1 wheel-0.29.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看安装结果：</span></span><br><span class=\"line\">$ sudo find / -name <span class=\"string\">&#x27;pip&#x27;</span>      </span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">/usr/lib/python2.7/site-packages/pip</span><br><span class=\"line\">/usr/lib/python3.6/site-packages/pip</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装完成！</p>\n<p>#####2. 安装模块的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pip install xxx  //安装指定的 xxx 模块或者包</span><br><span class=\"line\">$ sudo pip uninstall xxx  //删除指定的 xxx 模块或者包</span><br><span class=\"line\">$ pip <span class=\"built_in\">list</span>       //查看当前的已安装python模块</span><br></pre></td></tr></table></figure>\n<p>使用pip安装模块时，需要注意python2和python3是否同时存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ls -al /usr/bin/pip*</span><br><span class=\"line\">-rwxr-xr-x 1 root root 206 Oct 15 20:08 pip2</span><br><span class=\"line\">-rwxr-xr-x 1 root root 206 Oct 15 20:08 pip2.7</span><br><span class=\"line\">-rwxr-xr-x 1 root root 205 Sep 20 00:23 pip3</span><br><span class=\"line\">-rwxr-xr-x 1 root root 205 Sep 20 00:23 pip3.6</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pip3 install BeautifulSoup     <span class=\"comment\"># 给 python3 安装模块这里用pip3</span></span><br><span class=\"line\">$ sudo pip2 install BeautifulSoup     <span class=\"comment\"># 给 python2 安装模块这里用pip2</span></span><br><span class=\"line\">Collecting BeautifulSoup</span><br><span class=\"line\">  Downloading BeautifulSoup-3.2.1.tar.gz</span><br><span class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: BeautifulSoup</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> BeautifulSoup ... <span class=\"keyword\">done</span></span><br><span class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /root/.cache/pip/wheels/5e/be/6d/ed01d5d434a821557b674c9da976f60b1b93d9009447eb9d16</span><br><span class=\"line\">Successfully built BeautifulSoup</span><br><span class=\"line\">Installing collected packages: BeautifulSoup</span><br><span class=\"line\">Successfully installed BeautifulSoup-3.2.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已安装模块    </span></span><br><span class=\"line\"><span class=\"comment\"># $ pip3 list        python3                                                                    </span></span><br><span class=\"line\">$ pip2 list</span><br><span class=\"line\">DEPRECATION: The default format will switch to columns <span class=\"keyword\">in</span> the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) <span class=\"keyword\">in</span> your pip.conf under the [list] section) to <span class=\"built_in\">disable</span> this warning.</span><br><span class=\"line\">BeautifulSoup (3.2.1)</span><br><span class=\"line\">netsnmp-python (1.0a1)</span><br><span class=\"line\">numpy (1.13.3)</span><br><span class=\"line\">pip (9.0.1)</span><br><span class=\"line\">pwquality (1.3.0)</span><br><span class=\"line\">setuptools (36.6.0)</span><br><span class=\"line\">team (1.0)</span><br><span class=\"line\">wheel (0.30.0)</span><br></pre></td></tr></table></figure>\n<p>另外当使用pip2或者pip3出现找不到python版本时，可以修改里面的环境 “#!/usr/bin/python2”<br>指向正确的python版本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/bin                                                                                 </span><br><span class=\"line\">$ ls -al python*</span><br><span class=\"line\">lrwxrwxrwx 1 root root     9 Sep 20 01:26 python2 -&gt; python2.7</span><br><span class=\"line\">lrwxrwxrwx 1 root root     9 Oct 15 20:45 python3 -&gt; python3.6</span><br><span class=\"line\">                                                                              </span><br><span class=\"line\">$ cat pip</span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/python2  # 这里指python2的pip，同理：#!/usr/bin/python3 指python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\">import re</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">from pip import main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    sys.argv[0] = re.sub(r<span class=\"string\">&#x27;(-script\\.pyw?|\\.exe)?$&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, sys.argv[0])</span><br><span class=\"line\">    sys.exit(main())</span><br></pre></td></tr></table></figure>\n<p>#####3. 在windows下使用pip的方法：</p>\n<p><strong><code> python2 和 python3 同时共存时：</code></strong><br><strong><code>python2：py -2 -m pip install path\\file</code></strong><br><strong><code>python3：py -3 -m pip install path\\file </code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#--------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#例如在windows下安装wxpython：  两个步骤</span></span><br><span class=\"line\">1.安装wheel</span><br><span class=\"line\"><span class=\"comment\">#此为python2,安装python3则需更改 -3 即可</span></span><br><span class=\"line\">C:\\&gt;py -2 -m pip install wheel  </span><br><span class=\"line\"></span><br><span class=\"line\">2.安装wxpython的wheel文件：</span><br><span class=\"line\"><span class=\"comment\">#此为python2,安装python3则需更改 -3 即可</span></span><br><span class=\"line\">C:\\&gt;py -2 -m pip install D:\\wxpython\\windows\\wxPython-4.0.0b2-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure>\n<p>#####4. 升级pip<br>sudo 后面的pip3为用户已安装的pip名称，比如python3版本的pip：pip3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pip3 install --upgrade pip</span><br><span class=\"line\">Collecting pip</span><br><span class=\"line\">  Downloading https://files.pythonhosted.org/packages/0f/<span class=\"number\">74</span>/ecd13431bcc456ed390b44c8a6e917c1820365cbebcb6a8974d1cd045ab4/pip-<span class=\"number\">10.0</span><span class=\"number\">.1</span>-py2.py3-none-<span class=\"built_in\">any</span>.whl (<span class=\"number\">1.3</span>MB)</span><br><span class=\"line\">    <span class=\"number\">100</span>% |████████████████████████████████| <span class=\"number\">1.3</span>MB 215kB/s </span><br><span class=\"line\">Installing collected packages: pip</span><br><span class=\"line\">  Found existing installation: pip <span class=\"number\">9.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    Not uninstalling pip at /usr/lib/python3/dist-packages, outside environment /usr</span><br><span class=\"line\">Successfully installed pip-<span class=\"number\">10.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Linux","Python"]},{"title":"安装 plank 及相关配置","url":"/2017/10/15/%E5%AE%89%E8%A3%85-plank-%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/","content":"<p>1.安装<br>arch官方源中有plank包，可以直接安装：<br>也可以去查看<a href=\"https://wiki.archlinux.org/index.php/Plank\">archwiki</a>的说明文档。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S plank</span><br><span class=\"line\"></span><br><span class=\"line\">正在解决依赖关系...</span><br><span class=\"line\">正在查找软件包冲突...</span><br><span class=\"line\"></span><br><span class=\"line\">软件包 (1) plank-0.11.4-1</span><br><span class=\"line\"></span><br><span class=\"line\">全部安装大小：  2.07 MiB</span><br><span class=\"line\">净更新大小：  0.00 MiB</span><br><span class=\"line\"></span><br><span class=\"line\">:: 进行安装吗？ [Y/n] y</span><br></pre></td></tr></table></figure>\n<p>2.运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果直接运行会默认创建 dock1 的主题</span></span><br><span class=\"line\">▶ plank </span><br><span class=\"line\"><span class=\"comment\"># 如果需要取名字则可以如下方式创建一个名为newplank的主题</span></span><br><span class=\"line\">▶ plank -n newdock</span><br></pre></td></tr></table></figure>\n<p>3.配置<br>这里设置plank的配置文件在 ：/usr/share/plank/themes/</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">▶ <span class=\"built_in\">cd</span> /usr/share/plank/themes</span><br><span class=\"line\">▶ ls</span><br><span class=\"line\">Default  Matte  Transparent</span><br><span class=\"line\"><span class=\"comment\"># 这里有选用默认的主题配置Default</span></span><br><span class=\"line\">▶ <span class=\"built_in\">cd</span> Default                                                                                                         </span><br><span class=\"line\">▶ ls</span><br><span class=\"line\">dock.theme   <span class=\"comment\"># 这是主题的配置文件</span></span><br></pre></td></tr></table></figure>\n<p>配置文件每一行都有相应的注释说明，可以自己修改调试，也可以参考我的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">▶ cat dock.theme </span><br><span class=\"line\"><span class=\"comment\">#This file auto-generated by Plank.</span></span><br><span class=\"line\"><span class=\"comment\">#2016-03-12T14:53:46+0000</span></span><br><span class=\"line\"></span><br><span class=\"line\">[PlankTheme]</span><br><span class=\"line\"><span class=\"comment\">#The roundness of the top corners.</span></span><br><span class=\"line\">TopRoundness=10</span><br><span class=\"line\"><span class=\"comment\">#The roundness of the bottom corners.</span></span><br><span class=\"line\">BottomRoundness=0</span><br><span class=\"line\"><span class=\"comment\">#The thickness (in pixels) of lines drawn.</span></span><br><span class=\"line\">LineWidth=0</span><br><span class=\"line\"><span class=\"comment\">#The color (RGBA) of the outer stroke.</span></span><br><span class=\"line\">OuterStrokeColor=41;;41;;41;;255</span><br><span class=\"line\"><span class=\"comment\">#The starting color (RGBA) of the fill gradient.</span></span><br><span class=\"line\">FillStartColor=41;;41;;41;;255</span><br><span class=\"line\"><span class=\"comment\">#The ending color (RGBA) of the fill gradient.</span></span><br><span class=\"line\">FillEndColor=80;;80;;80;;255</span><br><span class=\"line\"><span class=\"comment\">#The color (RGBA) of the inner stroke.</span></span><br><span class=\"line\">InnerStrokeColor=255;;255;;255;;255</span><br><span class=\"line\"></span><br><span class=\"line\">[PlankDockTheme]</span><br><span class=\"line\"><span class=\"comment\">#The padding on the left/right dock edges, in tenths of a percent of IconSize.</span></span><br><span class=\"line\">HorizPadding=-100</span><br><span class=\"line\"><span class=\"comment\">#The padding on the top dock edge, in tenths of a percent of IconSize.</span></span><br><span class=\"line\">TopPadding=5</span><br><span class=\"line\"><span class=\"comment\">#The padding on the bottom dock edge, in tenths of a percent of IconSize.</span></span><br><span class=\"line\">BottomPadding=30</span><br><span class=\"line\"><span class=\"comment\">#The padding between items on the dock, in tenths of a percent of IconSize.</span></span><br><span class=\"line\">ItemPadding=6</span><br><span class=\"line\"><span class=\"comment\">#The size of item indicators, in tenths of a percent of IconSize.</span></span><br><span class=\"line\">IndicatorSize=0</span><br><span class=\"line\"><span class=\"comment\">#The size of the icon-shadow behind every item, in tenths of a percent of IconSize.</span></span><br><span class=\"line\">IconShadowSize=10</span><br><span class=\"line\"><span class=\"comment\">#The height (in percent of IconSize) to bounce an icon when the application sets urgent.</span></span><br><span class=\"line\">UrgentBounceHeight=1.6666666666666667</span><br><span class=\"line\"><span class=\"comment\">#The height (in percent of IconSize) to bounce an icon when launching an application.</span></span><br><span class=\"line\">LaunchBounceHeight=0.625</span><br><span class=\"line\"><span class=\"comment\">#The opacity value (0 to 1) to fade the dock to when hiding it.</span></span><br><span class=\"line\">FadeOpacity=1</span><br><span class=\"line\"><span class=\"comment\">#The amount of time (in ms) for click animations.</span></span><br><span class=\"line\">ClickTime=300</span><br><span class=\"line\"><span class=\"comment\">#The amount of time (in ms) to bounce an urgent icon.</span></span><br><span class=\"line\">UrgentBounceTime=600</span><br><span class=\"line\"><span class=\"comment\">#The amount of time (in ms) to bounce an icon when launching an application.</span></span><br><span class=\"line\">LaunchBounceTime=600</span><br><span class=\"line\"><span class=\"comment\">#The amount of time (in ms) for active window indicator animations.</span></span><br><span class=\"line\">ActiveTime=300</span><br><span class=\"line\"><span class=\"comment\">#The amount of time (in ms) to slide icons into/out of the dock.</span></span><br><span class=\"line\">SlideTime=300</span><br><span class=\"line\"><span class=\"comment\">#The time (in ms) to fade the dock in/out on a hide (if FadeOpacity is &lt; 1).</span></span><br><span class=\"line\">FadeTime=250</span><br><span class=\"line\"><span class=\"comment\">#The time (in ms) to slide the dock in/out on a hide (if FadeOpacity is 1).</span></span><br><span class=\"line\">HideTime=250</span><br><span class=\"line\"><span class=\"comment\">#The size of the urgent glow (shown when dock is hidden), in tenths of a percent of IconSize.</span></span><br><span class=\"line\">GlowSize=30</span><br><span class=\"line\"><span class=\"comment\">#The total time (in ms) to show the hidden-dock urgent glow.</span></span><br><span class=\"line\">GlowTime=10000</span><br><span class=\"line\"><span class=\"comment\">#The time (in ms) of each pulse of the hidden-dock urgent glow.</span></span><br><span class=\"line\">GlowPulseTime=2000</span><br><span class=\"line\"><span class=\"comment\">#The hue-shift (-180 to 180) of the urgent indicator color.</span></span><br><span class=\"line\">UrgentHueShift=150</span><br><span class=\"line\"><span class=\"comment\">#The time (in ms) to move an item to its new position or its addition/removal to/from the dock.</span></span><br><span class=\"line\">ItemMoveTime=450</span><br><span class=\"line\"><span class=\"comment\">#Whether background and icons will unhide/hide with different speeds. The top-border of both will leave/hit the screen-edge at the same time.</span></span><br><span class=\"line\">CascadeHide=flase</span><br></pre></td></tr></table></figure>\n<p>4.添加底部应用程序<br>配置文件在：/home/fqf/.config/plank</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">▶ <span class=\"built_in\">cd</span> ~/.config/plank </span><br><span class=\"line\">▶ ls      <span class=\"comment\"># 查看创建的plank主题，这里选择默认的 dock1 来作为解释</span></span><br><span class=\"line\">dock1</span><br><span class=\"line\">▶ <span class=\"built_in\">cd</span> ldock1/launchers </span><br><span class=\"line\">▶ ls     <span class=\"comment\"># 添加应用程序的格式  name.dockitem</span></span><br><span class=\"line\">electronic-wechat.dockitem  google-chrome.dockitem  org.kde.dragonplayer.dockitem</span><br><span class=\"line\">firefox.dockitem            nohup.out               org.kde.konsole.dockitem</span><br><span class=\"line\">▶ cat firefox.dockitem      <span class=\"comment\"># name.dockitem内容如下：</span></span><br><span class=\"line\">[PlankDockItemPreferences]</span><br><span class=\"line\">Launcher=file:///usr/share/applications/firefox.desktop</span><br><span class=\"line\"><span class=\"comment\">#------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># 所以我们只需要 cp 其中的一个name.dockitem</span></span><br><span class=\"line\"><span class=\"comment\"># 在目录 /usr/share/applications/ 找到你需要添加的应用程序名字</span></span><br><span class=\"line\"><span class=\"comment\"># Launcher=file:///usr/share/applications/firefox.desktop</span></span><br><span class=\"line\"><span class=\"comment\"># 并在最后替换掉即可</span></span><br><span class=\"line\"><span class=\"comment\"># Launcher=file:///usr/share/applications/google-chrome.desktop</span></span><br></pre></td></tr></table></figure>\n<p>最后来一张效果图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7237812-e307596ee62bf8f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"plank配置效果图\"><br>linux 小知识：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">一般在终端执行程序时，当你关掉终端之后，之前打开的程序也随着关掉了，那么可以使用：</span><br><span class=\"line\">nohup 命令 &amp;      <span class=\"comment\">#这句命令意思是当前执行的 程序/命令 不挂起并放置后台运行。</span></span><br><span class=\"line\">eg：</span><br><span class=\"line\">▶ nohup plank &amp;</span><br><span class=\"line\">[1] 14524</span><br><span class=\"line\">nohup: 忽略输入并把输出追加到<span class=\"string\">&#x27;nohup.out&#x27;</span> </span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Linux","Plank"]},{"title":"树莓派编译安装python3.6","url":"/2018/05/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python3-6/","content":"<p>一、更新树莓派系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo  apt-get  update</span><br><span class=\"line\">$ sudo  apt-get  upgrade</span><br></pre></td></tr></table></figure>\n<p>二、安装python依赖环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev</span><br></pre></td></tr></table></figure>\n<p>三、下载python3.6版本源码并解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz</span><br><span class=\"line\">$ tar zxvf Python-3.6.1.tgz</span><br></pre></td></tr></table></figure>\n<p>四、编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> Python-3.6.1</span><br><span class=\"line\">$ sudo ./configure</span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n<p>五、检查安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ls -al /usr/<span class=\"built_in\">local</span>/bin/python*</span><br><span class=\"line\">lrwxrwxrwx 1 root staff       9 May 15 14:53 /usr/<span class=\"built_in\">local</span>/bin/python3 -&gt; python3.6</span><br><span class=\"line\">-rwxr-xr-x 2 root staff 9840168 May 15 14:51 /usr/<span class=\"built_in\">local</span>/bin/python3.6</span><br><span class=\"line\">lrwxrwxrwx 1 root staff      17 May 15 14:53 /usr/<span class=\"built_in\">local</span>/bin/python3.6-config -&gt; python3.6m-config</span><br><span class=\"line\">-rwxr-xr-x 2 root staff 9840168 May 15 14:51 /usr/<span class=\"built_in\">local</span>/bin/python3.6m</span><br><span class=\"line\">-rwxr-xr-x 1 root staff    3103 May 15 14:53 /usr/<span class=\"built_in\">local</span>/bin/python3.6m-config</span><br><span class=\"line\">lrwxrwxrwx 1 root staff      16 May 15 14:53 /usr/<span class=\"built_in\">local</span>/bin/python3-config -&gt; python3.6-config</span><br></pre></td></tr></table></figure>\n<p>小知识点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. usr 是指 Unix System Resource，而不是User；</span><br><span class=\"line\">2. &#x2F;usr&#x2F;bin：系统预装的可执行程序，会随着系统升级而改变；</span><br><span class=\"line\">3. &#x2F;usr&#x2F;local&#x2F;bin：用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件；</span><br><span class=\"line\">如果两个目录下有相同的可执行程序，谁优先执行受到PATH环境变量的影响，比如我的一台服务器的PATH变量为：</span><br><span class=\"line\">$ echo $PATH </span><br><span class=\"line\">&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;home&#x2F;dean&#x2F;bin </span><br><span class=\"line\">这里&#x2F;usr&#x2F;local&#x2F;bin优先于&#x2F;usr&#x2F;bin.</span><br></pre></td></tr></table></figure>\n<p>参考资料：<br><a href=\"https://www.aliyun.com/jiaocheng/118743.html\">https://www.aliyun.com/jiaocheng/118743.html</a><br><a href=\"https://blog.csdn.net/lina_acm/article/details/78224656\">https://blog.csdn.net/lina_acm/article/details/78224656</a></p>\n","categories":["Technology"],"tags":["Python","树莓派"]},{"title":"根据Gentoo handbook安装——KDE桌面+NVIDIA显卡","url":"/2018/09/24/%E6%A0%B9%E6%8D%AEGentoo-handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94KDE%E6%A1%8C%E9%9D%A2+NVIDIA%E6%98%BE%E5%8D%A1/","content":"<p>在上一篇中<a href=\"https://www.jianshu.com/p/27564e1d860b\">根据Gentoo handbook安装——gentoo基本系统+UEFI引导</a>，已经装好了gentoo基本系统，这一篇开始安装KDE桌面，同时安装NVIDIA的显卡驱动。</p>\n<ul>\n<li>切换语言<br>因为在命令行下，中文有可能会乱码，所以先临时切换回英文方便安装软件：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure></li>\n<li>配置网络<br>根据上一篇中的内容，如果是台式机那么此时已经可以联网了则跳过此步骤，如果是笔记本则需要配置无线网络<br>步骤如下：<br><code>创建 WIFI配置文件 /etc/wpa_supplicant/wpa_supplicant.conf 内容如下</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># The below line not be changed otherwise wpa_supplicant refuses to work</span><br><span class=\"line\">ctrl_interface&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant</span><br><span class=\"line\">  </span><br><span class=\"line\"># Ensure that only root can read the WPA configuration</span><br><span class=\"line\">ctrl_interface_group&#x3D;0</span><br><span class=\"line\">  </span><br><span class=\"line\"># Let wpa_supplicant take care of scanning and AP selection</span><br><span class=\"line\">ap_scan&#x3D;1</span><br><span class=\"line\">  </span><br><span class=\"line\"># Simple case: WPA-PSK, PSK as an ASCII passphrase, allow all valid ciphers</span><br><span class=\"line\">network&#x3D;&#123;</span><br><span class=\"line\">  ssid&#x3D;&quot;这里填写WIFI名称&quot;</span><br><span class=\"line\">  psk&#x3D;&quot;这里填写WIFI密码&quot;</span><br><span class=\"line\">  # The higher the priority the sooner we are matched</span><br><span class=\"line\">  priority&#x3D;5</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<code>解锁WIFI并启用WIFI</code><br><code>注意：wlp0s20f3为本机wifi端口，具体名称以自己的笔记本为主，查看 ls /sys/class/net</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rfkill unblock all</span><br><span class=\"line\">ip link set dev wlp0s20f3 up</span><br></pre></td></tr></table></figure>\n<code>连接 WIFI 并自动分配 IP</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wpa_supplicant -B -i wlp0s20f3 -c &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</span><br><span class=\"line\">dhcpcd wlp0s20f3 </span><br></pre></td></tr></table></figure>\n<code>检测网络连接</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>安装编辑软件<br>开始之前先装一个**<code>vim</code><strong>，方便后续修改配置(当然用</strong><code>nano</code>**也是一样的，看个人喜好)：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge app-editors/vim</span><br></pre></td></tr></table></figure></li>\n<li>创一个普通用户：<br>登录kde(sddm)时不能用root帐号<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradd -m -G users,wheel,audio,lp,cdrom,portage,cron -s /bin/bash skillf</span><br><span class=\"line\">passwd skillf　＃设置用户密码</span><br></pre></td></tr></table></figure>\n####1. 选择桌面配置文件<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eselect profile list</span><br></pre></td></tr></table></figure>\n<img src=\"https://upload-images.jianshu.io/upload_images/7237812-1b6bdb82b46b84f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桌面配置文件列表\"><br>选择kde的配置文件，即后面带有**<code>plasma</code>**的：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eselect profile <span class=\"built_in\">set</span> 19</span><br></pre></td></tr></table></figure>\n####2. 启用相关服务<br>如果使用桌面等 <a href=\"https://wiki.gentoo.org/wiki/Profile_(Portage)\" title=\"简介（Portage）\">配置文件</a>，则会自动安装其中一部分，但仍需要正确设置。这些服务基本信息是：</li>\n</ul>\n<ul>\n<li><p>  <a href=\"https://wiki.gentoo.org/wiki/D-Bus\" title=\"d总线\">D-Bus</a>：允许使用D-Bus消息总线系统。</p>\n</li>\n<li><p>  <a href=\"https://wiki.gentoo.org/wiki/Polkit\" title=\"Polkit\">polkit</a>：启用polkit框架以控制系统范围服务的权限。</p>\n</li>\n<li><p>  <a href=\"https://wiki.gentoo.org/wiki/Udisks\" title=\"Udisks\">udisks</a>：支持某些与存储相关的服务。</p>\n</li>\n<li><p>  <a href=\"https://wiki.gentoo.org/wiki/Eudev\" title=\"Eudev\">eudev</a>：Gentoo的udev分支，旨在获得更好的兼容性。它是桌面/等离子配置文件的默认设置。</p>\n</li>\n<li><p>  <a href=\"https://wiki.gentoo.org/wiki/ConsoleKit\" title=\"ConsoleKit的\">ConsoleKit</a>：用于定义和跟踪用户，登录会话和席位的框架。它是桌面/等离子配置文件的默认设置。</p>\n</li>\n</ul>\n<p><code>至于怎么启用上述服务，请接着往下看！</code><br>#####2.1 修改 USE flags</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/portage/make.conf</span><br><span class=\"line\">＃打开make.conf文件之后，找到 USE 变量，</span><br><span class=\"line\">＃如果没有USE，则在最后一行添加USE，并添加以下标志</span><br><span class=\"line\">USE=<span class=\"string\">&quot;dbus policykit udisks  eudev consolekit&quot;</span></span><br></pre></td></tr></table></figure>\n<p>顺便确认一下编译时用的cpu核心数，根据个人电脑修改：**<code>CPU核心数+1</code>**，<br>我这里是： <strong><code>MAKEOPTS=&quot;-j9&quot;</code></strong><br>如果文件<code> /etc/portage/make.conf</code> 中不存在该变量，则需要手动输入。<br>#####2.2 确保内核开启了对udisks的支持</p>\n<ul>\n<li>查看并修改内核的方法：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src/linux</span><br><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure>\n执行完上述命令后，此时将出现一个kernel图形界面，按照下面的格式进行启用内核服务：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># KERNEL udisks2</span></span><br><span class=\"line\">General setup  ---&gt;</span><br><span class=\"line\">    [*] Support <span class=\"keyword\">for</span> paging of anonymous memory (swap)</span><br><span class=\"line\">Device Drivers  ---&gt;</span><br><span class=\"line\">    &lt; &gt; ATA/ATAPI/MFM/RLL support (DEPRECATED)  ---&gt;</span><br><span class=\"line\">File Systems --&gt;</span><br><span class=\"line\">    Native Language Support --&gt;</span><br><span class=\"line\">        &lt;*&gt; NLS UTF8</span><br><span class=\"line\">    Pseudo filesystems  ---&gt;</span><br><span class=\"line\">        -*- Tmpfs virtual memory file system support (former shm fs)</span><br><span class=\"line\">        [*]   Tmpfs POSIX Access Control Lists</span><br></pre></td></tr></table></figure></li>\n<li>修改完成并退出之后，需要重新编译内核：<br><code>make -j9 加快编译速度，9为CPU核心数+1</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make -j9 &amp;&amp; make modules_install</span><br></pre></td></tr></table></figure></li>\n<li>内核完成编译后，将内核映像复制到 /boot/。这由<code>make install</code>命令自动处理：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>重新引导一下：<br><code>注意： 在此之前需要确保引导分区挂载成功，上一篇文章中，引导分区挂载在 /boot/efi 目录，执行 mount 命令查看 /boot/efi 是否被挂载，如果不存在挂载，则需要重新挂载引导分区。</code></li>\n</ul>\n<p>确保引导分区已成功挂载之后，重新配置引导：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grub-mkconfig -o /boot/efi/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-36c4fd5d8c719416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"确认挂载引导分区\"></p>\n<p>一切都确认好了之后，开始更新系统以使更改生效，这需要点时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet --changed-use --deep @world</span><br></pre></td></tr></table></figure>\n<p>#####2.3 设置相关服务默认启动<br>至此相关系统服务已安装完，接下来需要设置默认启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rc-update add dbus default</span><br><span class=\"line\">rc-update add udev default</span><br><span class=\"line\">rc-update add consolekit default</span><br></pre></td></tr></table></figure>\n<p>####3. 安装X server<br>添加USE flags</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/portage/make.conf</span><br><span class=\"line\">＃在USE最后面添加一个 X</span><br><span class=\"line\">USE=<span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\">＃ 鼠标键盘触摸板标志</span><br><span class=\"line\">INPUT_DEVICES=<span class=\"string\">&quot;libinput&quot;</span>  ＃ 笔记本用户需添加：synaptics </span><br><span class=\"line\">＃NVIDIA显卡：将安装正确版本的驱动 x11-drivers/nvidia-drivers</span><br><span class=\"line\">VIDEO_CARDS=<span class=\"string\">&quot;nvidia&quot;</span></span><br></pre></td></tr></table></figure>\n<p>检查kernel：</p>\n<ul>\n<li>输入驱动支持<br>需要通过更改内核配置来激活对事件接口（CONFIG_INPUT_EVDEV）的支持。如果您不知道如何设置内核，请阅读“ <a href=\"https://wiki.gentoo.org/wiki/Kernel/Gentoo_Kernel_Configuration_Guide\" title=\"内核/ Gentoo内核配置指南\">内核配置指南”</a>。<br>进入内核界面：**<code>cd /usr/src/linux</code>**  -&gt; <strong><code>make menuconfig</code></strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃Enabling evdev <span class=\"keyword\">in</span> the kernel</span><br><span class=\"line\">Device Drivers ---&gt;</span><br><span class=\"line\">  Input device support ---&gt;</span><br><span class=\"line\">  &lt;*&gt;  Event interface</span><br></pre></td></tr></table></figure></li>\n<li>内核模式设置<br>现代开源视频驱动程序依赖于内核模式设置（KMS）。KMS提供了改进的图形启动，闪烁更少，用户切换速度更快，内置帧缓冲控制台，从控制台到Xorg的无缝切换以及其他功能。</li>\n</ul>\n<p><strong><code>注意：KMS与传统帧缓冲驱动程序冲突，必须在内核配置中保持禁用状态。</code></strong><br>首先为KMS准备内核。无论使用哪个Xorg视频驱动程序，此步骤均为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Device Drivers ---&gt;</span><br><span class=\"line\">   Graphics support ---&gt;</span><br><span class=\"line\">      Frame Buffer Devices ---&gt;</span><br><span class=\"line\">         &lt;*&gt; Support <span class=\"keyword\">for</span> frame buffer devices ---&gt;</span><br><span class=\"line\">         <span class=\"comment\">## (Disable all drivers, including VGA, Intel, nVidia, and ATI, except EFI-based Framebuffer Support, only if you are using UEFI)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">## (Further down, enable basic console support. KMS uses this.)</span></span><br><span class=\"line\">    Console display driver support ---&gt;</span><br><span class=\"line\">      &lt;*&gt;  Framebuffer Console Support</span><br></pre></td></tr></table></figure>\n<p>接下来，配置内核以使用适当的视频卡KMS驱动程序。英特尔，nVidia和AMD / ATI是最常用的卡，因此请按照以下每张卡的代码列表进行操作。</p>\n<p>对于Intel卡，请参阅<a href=\"https://wiki.gentoo.org/wiki/Intel#Kernel\" title=\"英特尔\">Intel文章</a>的<a href=\"https://wiki.gentoo.org/wiki/Intel#Kernel\" title=\"英特尔\">内核部分</a>。</p>\n<p><strong>对于nVidia卡：</strong><br>这里用的闭源驱动nvidia<br>进入内核界面：**<code>cd /usr/src/linux</code>**  -&gt; <strong><code>make menuconfig</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] Enable loadable module support ---&gt; ＃开启可加载模块支持</span><br><span class=\"line\">Processor <span class=\"built_in\">type</span> and features ---&gt;　＃开启 MTRR 支持</span><br><span class=\"line\">    [*] MTRR (Memory Type Range Register) support</span><br><span class=\"line\">Device Drivers ---&gt;</span><br><span class=\"line\">   Graphics support ---&gt;　</span><br><span class=\"line\">　　　 -*- /dev/agpgart (AGP Support) ---&gt;　＃启用agpgart支持</span><br><span class=\"line\">      &lt; &gt; Nouveau (nVidia) cards　＃确保禁用nouveau驱动程序：</span><br><span class=\"line\">      Frame buffer Devices ---&gt; ＃禁用对内核驱动程序的支持</span><br><span class=\"line\">            &lt;*&gt; Support <span class=\"keyword\">for</span> frame buffer devices ---&gt;</span><br><span class=\"line\">            &lt; &gt;   nVidia Framebuffer Support</span><br><span class=\"line\">            &lt; &gt;   nVidia Riva support</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改之后的内核需要重新编译！<br>退出配置并开始编译过程：<br><code>make -j9 加快编译速度，9为CPU核心数+1</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make -j9 &amp;&amp; make modules_install</span><br></pre></td></tr></table></figure></li>\n<li>内核完成编译后，将内核映像复制到 /boot/。这由<code>make install</code>命令自动处理：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>重新引导一下：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grub-mkconfig -o /boot/efi/grub/grub.cfg</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>一切就绪，开始安装 X server</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet x11-base/xorg-server</span><br></pre></td></tr></table></figure>\n<p>安装完成后，需要重新初始化一些环境变量才能继续。使用此命令获取配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">env-update</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NVidia用户：<br>NVidia驱动程序仅在重新启动后才能工作，因此请确保在运行nvidia-xconfig后重新启动系统：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvidia-xconfig</span><br></pre></td></tr></table></figure></li>\n<li>可以并且建议将OpenGL渲染器设置为硬件渲染器而不是软件渲染器：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eselect opengl <span class=\"built_in\">set</span> nvidia</span><br></pre></td></tr></table></figure></li>\n<li>将需要访问视频卡的用户skillf(开始前创建的用户)添加到视频组：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gpasswd -a skillf video</span><br></pre></td></tr></table></figure></li>\n<li>为防止nouveau 与 nvidia冲突，需要将nouveau禁止加载，将nouveau模块列入黑名单：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/modprobe.d/nouveau-blacklist.conf</span><br><span class=\"line\">＃在文件中加入以下语句即可</span><br><span class=\"line\">blacklist nouveau</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>####4. 安装kde<br>这将安全全部plasma套件，会需要相当长的时间，可以休息一下，或者放到睡觉前操作~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet kde-plasma/plasma-meta</span><br></pre></td></tr></table></figure>\n<p>####5. 配置桌面显示管理器SDDM<br>sddm已经包含在plasma套件里面了，但需要指定一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/conf.d/xdm</span><br><span class=\"line\">DISPLAYMANAGER=<span class=\"string\">&quot;sddm&quot;</span></span><br></pre></td></tr></table></figure>\n<p>修改完之后，需要设置开机默认开启sddm，否则会直接进入命令行ttys，然后需要手动打开登录界面，才能进入KDE。<br>这并不是我们想要的，此时需要自动打开：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rc-update add xdm default</span><br></pre></td></tr></table></figure>\n\n<p>####6.KDE工具包<br><a href=\"https://packages.gentoo.org/packages/kde-apps/kde-apps-meta\">KDE-应用/ KDE的应用程式的元</a>包提供了完整的应用程序包：</p>\n<p>如果对于KDE比较了解，则可以装一些常用的工具即可，这里了为方便，使用懒人法全套安装啦~<br>温馨提示：<br>如果手头上没事做的话，这里建议不要使用 <code>--quiet</code>选项，或者放在睡前执行，否则会让你的觉得卡半天都没有动静，事实上它在疯狂编译中！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet kde-apps/kde-apps-meta</span><br></pre></td></tr></table></figure>\n<p>####7. 安装字体<br>默认的字体会导致中文乱码，此时应该装支持中文的字体即可解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask media-fonts/wqy-zenhei wqy-bitmapfont wqy-microhei wqy-unibit</span><br></pre></td></tr></table></figure>\n<p>获取安装所有字体的配置文件列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eselect fontconfig list</span><br></pre></td></tr></table></figure>\n<p>选择刚才安装的带有**<code>wqy</code>**的字体左边的序号（以自己电脑为准）启用它们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eselect fontconfig <span class=\"built_in\">enable</span> 23 24 43</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-84bbc71980727d9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"字体列表\"></p>\n<p>####8. 安装 fcitx 输入法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask app-i18n/fcitx kcm-fcitx</span><br><span class=\"line\">＃前者是软件，后者是桌面配置工具，不安装配置工具，则在桌面环境下不能使用输入法图形化设置。</span><br></pre></td></tr></table></figure>\n<p>配置输入法，在用户目录下添加**<code>.xprofile</code>**文件，并添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /home/skillf/.xprofile</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(dbus-launch --sh-syntax --exit-with-session)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx&quot;</span> </span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=<span class=\"string\">&quot;fcitx&quot;</span> </span><br><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=<span class=\"string\">&quot;fcitx&quot;</span></span><br></pre></td></tr></table></figure>\n<p>####9. 重启之后的一些设置与检查<br>完成之后重启，即可进入KDE啦！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>重启后，输入开头新创建的用户密码登录系统，打开konsole终端并安装一个<code>sudo</code>，方便以后获取管理员权限：<br><code>su</code>进入root用户（管理员用户）<br><code>exit</code>退出root用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 sudo<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask sudo</span><br></pre></td></tr></table></figure></li>\n<li>配置sudo<br>sudo的配置文件是 <code>/etc/sudoers</code>，但是该文件规定必须在root下使用<code>visudo</code>命令编辑：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n这里会打开/etc/sudoers文件，找到下面这行<br><code># %wheel ALL=(ALL) ALL</code><br>去掉开头的<code>#</code>保存文件退出即可！<br>意思是：<code>允许wheel用户组中的用户执行所有命令  </code>（我们开头新建的用户skillf是属于wheel组的），但是需要输入密码。</li>\n</ul>\n<blockquote>\n<p>当然也可以设置不需要输入密码：<code># %wheel ALL=(ALL) NOPASSWD: ALL</code>，只是为了安全起见不建议使<br>用！<br>具体更多的配置内容可以去看：<code>/etc/sudoers</code></p>\n</blockquote>\n<p>设置完之后就退出root用户：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>显示系统信息：<br>需要安装<code>screenfetch</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo emerge --ask screenfetch</span><br><span class=\"line\">screenfetch</span><br></pre></td></tr></table></figure>\n<code>sudo提示的密码是指当前用户的密码，例如我在skillf用户下运行的sudo，那么密码就是skillf用户的密码，输入并回车即可。在输入密码之后，短时间内不需要再次输入密码，可直接运行sudo。</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-b846251bfaca8c86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置图\"></li>\n<li>显卡测试<br>检查OpenGL渲染器设置为硬件渲染器是否成功：<br>需要安装 <code>x11-apps/mesa-progs</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo emerge --ask x11-apps/mesa-progs</span><br><span class=\"line\">glxinfo | grep rendering</span><br></pre></td></tr></table></figure>\n<code>提示：direct rendering: Yes 表明启动正常</code><br>显卡FPS测试 <strong><code>glxgears</code></strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo glxgears</span><br></pre></td></tr></table></figure>\n<img src=\"https://upload-images.jianshu.io/upload_images/7237812-9cc1384afc7afacb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显卡测试\"><br>最后来一张KDE桌面图～</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-f2fb6d254631340e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"KDE桌面\"></p>\n<p>至此，gentoo的KDE桌面+nvidia显卡已安装完成！</p>\n<p><strong><code>温馨提示：如果出现 kde 登录界面输入密码之后重新回到登录界面，此时不要慌，可以按快捷键 Ctrl+Alt+F1 进入tty1 命令行界面</code></strong></p>\n<p>在tty1下会提示登录，直接用 <code>root</code> 用户登录，之后先查看一下 sddm 的登录历史：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim &#x2F;var&#x2F;log&#x2F;sddm.log</span><br></pre></td></tr></table></figure>\n<p>或者直接用 <code>grep</code>查看带<code>(EE)</code>的行即可明白哪里出现了错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &#x2F;var&#x2F;log&#x2F;sddm.log |grep &quot;(EE)&quot;</span><br></pre></td></tr></table></figure>\n<p>错误提示例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">[03:36:24.762] (EE) HELPER: chdir( &#x2F;home&#x2F;skillf ) failed for user: &quot;skillf&quot;</span><br><span class=\"line\">[03:36:24.762] (EE) HELPER: verify directory exist and has sufficient permissions</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这里提示的是切换skillf用户的家目录时出现了问题，<br>那么我们可以直接去到家目录的上一级目录并查看情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &#x2F;home</span><br><span class=\"line\">ls -al </span><br></pre></td></tr></table></figure>\n<p>此时可能出现的情况：</p>\n<p>1、skillf的家目录不存在，自然切换失败</p>\n<p>查看家用户的名字：<code>cat /etc/passwd |grep &quot;skillf&quot;</code>，找到 /home 后面的目录既是家目录，<br>例如 ：/home/skillf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;# 此时可以切换到skilf用户，并创建家目录，这样的好处是，创建的目录拥有者就是skillf用户</span><br><span class=\"line\">su skillf</span><br><span class=\"line\">mkdir .&#x2F;skillf</span><br></pre></td></tr></table></figure>\n<p>2、家目录的权限不是skillf用户，所以没有权限进去家目录</p>\n<p>因此可以直接更改家目录的拥有者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;# skillf:skillf 拥有者和群体的使用者均设为 skillf，最后的 skillf 是家目录</span><br><span class=\"line\">chown skillf:skillf skillf</span><br></pre></td></tr></table></figure>\n<p>最后切换回root用户重启即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>重启完成之后，输入密码，此时即可进入熟悉的kde桌面啦~</p>\n<p>遇事不慌，多去 /var/log目录下，查看各种问题的历史慢慢分析~</p>\n<p>谢谢阅读～</p>\n<p>上一篇：<a href=\"https://www.jianshu.com/p/27564e1d860b\">根据Gentoo handbook安装——gentoo基本系统+UEFI引导</a></p>\n","categories":["Technology"],"tags":["Gentoo","KDE"]},{"title":"百度语音合成模块","url":"/2018/04/04/%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A8%A1%E5%9D%97/","content":"<p>使用 python版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜   python3 -V</span><br><span class=\"line\">Python 3.6.4</span><br></pre></td></tr></table></figure>\n<p>测试平台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ArchLinux</span><br></pre></td></tr></table></figure>\n<p>Source code：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> aip <span class=\"keyword\">import</span> AipSpeech</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess,time,tempfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduTTS</span>():</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.APP_ID = <span class=\"string\">&#x27;此处填入个人 ID&#x27;</span></span><br><span class=\"line\">        self.API_KEY = <span class=\"string\">&#x27;此处填入个人 KEY&#x27;</span></span><br><span class=\"line\">        self.SECRET_KEY = <span class=\"string\">&#x27;此处填入个人 SECRET KEY&#x27;</span></span><br><span class=\"line\">        self.client = AipSpeech(self.APP_ID, self.API_KEY, self.SECRET_KEY)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_request</span>(<span class=\"params\">self,words</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        result  = self.client.synthesis(words, <span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"number\">1</span>, &#123;<span class=\"string\">&#x27;vol&#x27;</span> : <span class=\"number\">5</span>, <span class=\"string\">&#x27;per&#x27;</span> : <span class=\"number\">4</span>&#125; )</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(result, <span class=\"built_in\">dict</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> tempfile.NamedTemporaryFile(suffix=<span class=\"string\">&#x27;.mp3&#x27;</span>,delete=<span class=\"literal\">False</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(result)</span><br><span class=\"line\">                tmpfile = f.name</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tmpfile</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span>(<span class=\"params\">self,words</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        tmpfile = self.send_request(words)</span><br><span class=\"line\">        <span class=\"comment\">#time.sleep(0.5)</span></span><br><span class=\"line\">        subprocess.call(<span class=\"string\">&quot;play -q %s&quot;</span>%tmpfile,shell=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    b = BaiduTTS()</span><br><span class=\"line\">    b.say(<span class=\"string\">&#x27;我们去打羽毛球吧！&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>获得文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /tmp;ls</span><br><span class=\"line\">tmpuew_6sy9.mp3</span><br><span class=\"line\">$ file tmpuew_6sy9.mp3</span><br><span class=\"line\">tmpuew_6sy9.mp3: MPEG ADTS, layer III, v2,  16 kbps, 16 kHz, Monaural</span><br></pre></td></tr></table></figure>\n<p> 语音合成方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">synthesis(self, text, lang=<span class=\"string\">&#x27;zh&#x27;</span>, ctp=<span class=\"number\">1</span>, options=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">类型</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">是否必须</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">text</td>\n<td align=\"center\">String</td>\n<td align=\"center\">合成的文本，使用UTF-8编码，请注意文本长度必须小于1024字节</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">lang</td>\n<td align=\"center\">String</td>\n<td align=\"center\">语言选择,填写zh</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">ctp</td>\n<td align=\"center\">String</td>\n<td align=\"center\">客户端类型选择，web端填写1</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">cuid</td>\n<td align=\"center\">String</td>\n<td align=\"center\">用户唯一标识，用来区分用户，填写机器 MAC 地址或 IMEI 码，长度为60以内</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">spd</td>\n<td align=\"center\">String</td>\n<td align=\"center\">语速，取值0-9，默认为5中语速</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">pit</td>\n<td align=\"center\">String</td>\n<td align=\"center\">音调，取值0-9，默认为5中语调</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">vol</td>\n<td align=\"center\">String</td>\n<td align=\"center\">音量，取值0-15，默认为5中音量</td>\n<td align=\"center\">否</td>\n</tr>\n<tr>\n<td align=\"center\">per</td>\n<td align=\"center\">String</td>\n<td align=\"center\">发音人选择, 0为女声，1为男声，3为情感合成-度逍遥，4为情感合成-度丫丫，默认为 0 普通女声</td>\n<td align=\"center\">否</td>\n</tr>\n</tbody></table>\n","categories":["Technology"],"tags":["Python"]},{"title":"通过开源项目配置高大上的vim","url":"/2017/09/03/%E9%80%9A%E8%BF%87%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84vim/","content":"<p>老铁告诉我一个开源的vim项目！<br>首先请看一条shell命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/liuchengxu/space-vim/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>执行之后，不需要任何操作：<br><img src=\"http://upload-images.jianshu.io/upload_images/7237812-67d614b501ee1b6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"vim自动执行安装插件\"><br>需要经过一段时间，安装完成之后：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7237812-fe599cdea64170bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装完成\"><br>里面有各种高大上操作等你挖掘：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7237812-e07ff616a1754d7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果图\"></p>\n<p>有兴趣的可以去github看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;liuchengxu&#x2F;space-vim</span><br></pre></td></tr></table></figure>\n\n<p>另外：<br>1.关于简单的实现python的语法高亮问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd &#x2F;usr&#x2F;share&#x2F;vim&#x2F;vim80&#x2F;syntax&#x2F;</span><br><span class=\"line\">$ sudo vim python.vim</span><br></pre></td></tr></table></figure>\n<p>将    “    let python_highlight_all = 1   前的 “ 去掉，将会支持内置函数，数字，空格，异常的语法高亮。</p>\n<p>2.一键运行python程序.vimrc的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">map &lt;F2&gt; &lt;ESC&gt;:w&lt;cr&gt;:!python2 %&lt;cr&gt;   <span class=\"comment\"># 一键运行python2  </span></span><br><span class=\"line\">map &lt;F3&gt; &lt;ESC&gt;:w&lt;cr&gt;:!python3 %&lt;cr&gt;   <span class=\"comment\"># 一键运行python3</span></span><br></pre></td></tr></table></figure>\n<p>3.vim打开多窗口小知识：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:sp     &#x2F;&#x2F;或者split ：水平切分窗口</span><br><span class=\"line\">:vsplit    &#x2F;&#x2F;垂直切分窗口</span><br><span class=\"line\">:open  filename    &#x2F;&#x2F;打开一个文件</span><br><span class=\"line\">ctrl+w   &#x2F;&#x2F;窗口间的切换</span><br></pre></td></tr></table></figure>\n<p>4.新建文件时，自动加载模板：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以 Python 为例</span></span><br><span class=\"line\"><span class=\"comment\"># 首先新建一个文件夹用于放置模板文件</span></span><br><span class=\"line\">~/.vim                                                                                 </span><br><span class=\"line\">▶ mkdir Template                                                                      </span><br><span class=\"line\">▶ cd Template                                                                      </span><br><span class=\"line\">▶ pwd</span><br><span class=\"line\">/home/fqf/.vim/Template                                                               </span><br><span class=\"line\">▶ vim python.tlp</span><br></pre></td></tr></table></figure>\n<p>5.vim文件建立时的自动导入模板：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">▶ cat ~/.vimrc</span><br><span class=\"line\"><span class=\"string\">&quot;   auto template</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>autocmd BufNewFile *.py 0r ~/.vim/Template/python.tl</span><br><span class=\"line\">function AddshTitle()</span><br><span class=\"line\">        call setline(<span class=\"number\">1</span>,<span class=\"string\">&quot;#!/bin/bash&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">2</span>,<span class=\"string\">&quot;#File   : &quot;</span> . expand(<span class=\"string\">&quot;%&quot;</span>))</span><br><span class=\"line\">        call setline(<span class=\"number\">3</span>,<span class=\"string\">&quot;#Project:&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">4</span>,<span class=\"string\">&quot;#Author : name&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">5</span>,<span class=\"string\">&quot;#Email  : emailaddr&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">6</span>,<span class=\"string\">&quot;#Date   : &quot;</span> . strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>))</span><br><span class=\"line\">        call setline(<span class=\"number\">7</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">8</span>,<span class=\"string\">&quot;#----------------------------------------------------------------------------&quot;</span>)</span><br><span class=\"line\">endf</span><br><span class=\"line\">function AddCTitle()</span><br><span class=\"line\">        call setline(<span class=\"number\">1</span>,<span class=\"string\">&quot; /*&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">2</span>,<span class=\"string\">&quot;  * File    : &quot;</span> . expand(<span class=\"string\">&quot;%&quot;</span>))</span><br><span class=\"line\">        call setline(<span class=\"number\">3</span>,<span class=\"string\">&quot;  * Project :&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">4</span>,<span class=\"string\">&quot;  * Author  : name&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">5</span>,<span class=\"string\">&quot;  * Email   : emailaddr&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">6</span>,<span class=\"string\">&quot;  * Date    : &quot;</span> . strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>))</span><br><span class=\"line\">        call setline(<span class=\"number\">7</span>,<span class=\"string\">&quot;  */&quot;</span>)</span><br><span class=\"line\">  call setline(<span class=\"number\">8</span>,<span class=\"string\">&quot;#----------------------------------------------------------------------------&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">9</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">endf</span><br><span class=\"line\">function AddpyTitle()</span><br><span class=\"line\">        call setline(<span class=\"number\">1</span>,<span class=\"string\">&quot;#!/usr/bin/env python&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">2</span>,<span class=\"string\">&quot;#-*- coding:utf-8 -*-&quot;</span>)</span><br><span class=\"line\">  call setline(<span class=\"number\">3</span>,<span class=\"string\">&quot;#File   : &quot;</span> . expand(<span class=\"string\">&quot;%&quot;</span>))</span><br><span class=\"line\">        call setline(<span class=\"number\">4</span>,<span class=\"string\">&quot;#Project:&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">5</span>,<span class=\"string\">&quot;#Author : name&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">6</span>,<span class=\"string\">&quot;#Email  : emailaddr&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">7</span>,<span class=\"string\">&quot;#Date   : &quot;</span> . strftime(<span class=\"string\">&quot;%Y-%m-%d-%H:%M&quot;</span>))</span><br><span class=\"line\">        call setline(<span class=\"number\">8</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        call setline(<span class=\"number\">9</span>,<span class=\"string\">&quot;#----------------------------------------------------------------------------&quot;</span>)</span><br><span class=\"line\">endf</span><br><span class=\"line\"></span><br><span class=\"line\">autocmd BufNewFile *.sh <span class=\"built_in\">exec</span> <span class=\"string\">&quot;:call AddshTitle()&quot;</span></span><br><span class=\"line\">autocmd BufNewFile *.c,*.cc,*.cpp <span class=\"built_in\">exec</span> <span class=\"string\">&quot;:call AddCTitle()&quot;</span></span><br><span class=\"line\">autocmd BufNewFile *.py <span class=\"built_in\">exec</span> <span class=\"string\">&quot;:call AddpyTitle()&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Linux","Vim"]},{"title":"阿里云语音合成API鉴权与语音合成实现","url":"/2018/03/25/%E9%98%BF%E9%87%8C%E4%BA%91%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90API%E9%89%B4%E6%9D%83%E4%B8%8E%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E5%AE%9E%E7%8E%B0/","content":"<p>使用 python版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜   python3 -V</span><br><span class=\"line\">Python 3.6.4</span><br></pre></td></tr></table></figure>\n<p>Source code：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> hmac</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> tempfile</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alibaba</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        self.__ak_id = <span class=\"string\">&quot;&quot;</span> <span class=\"comment\"># 替换个人用户 id</span></span><br><span class=\"line\">        self.__ak_secret = <span class=\"string\">&quot;&quot;</span> <span class=\"comment\"># 替换个人用户 secret</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__current_gmt_time</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        date = datetime.datetime.strftime(datetime.datetime.utcnow(), <span class=\"string\">&quot;%a, %d %b %Y %H:%M:%S GMT&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__md5_base64</span>(<span class=\"params\">self, body</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">hash</span> = hashlib.md5()</span><br><span class=\"line\">        <span class=\"built_in\">hash</span>.update(body)</span><br><span class=\"line\">        str_hex = <span class=\"built_in\">hash</span>.digest()            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64encode(str_hex)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__sha1_base64</span>(<span class=\"params\">self, str_to_sign, secret</span>):</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        hmacsha1 = hmac.new(secret.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>), str_to_sign.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>), hashlib.sha1)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64encode(hmacsha1.digest()).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_request</span>(<span class=\"params\">self,phrase</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        options = &#123; <span class=\"string\">&#x27;method&#x27;</span>:<span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;url&#x27;</span>:<span class=\"string\">&#x27;http://nlsapi.aliyun.com/speak?encode_type=mp3&amp;voice_name=xiaoyun&amp;volume=50&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;body&#x27;</span>:phrase.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Authorization&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-type&#x27;</span>:<span class=\"string\">&#x27;text/plain&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Accept&#x27;</span>:<span class=\"string\">&#x27;audio/mp3,application/json&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Date&#x27;</span>:self.__current_gmt_time()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        bodyMd5 = self.__md5_base64(options[<span class=\"string\">&#x27;body&#x27;</span>]).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        feature = options[<span class=\"string\">&#x27;method&#x27;</span>]+<span class=\"string\">&#x27;\\n&#x27;</span>+headers[<span class=\"string\">&#x27;Accept&#x27;</span>]+<span class=\"string\">&#x27;\\n&#x27;</span>+bodyMd5+<span class=\"string\">&#x27;\\n&#x27;</span>\\</span><br><span class=\"line\">                                    +headers[<span class=\"string\">&#x27;Content-type&#x27;</span>]+<span class=\"string\">&#x27;\\n&#x27;</span>+headers[<span class=\"string\">&#x27;Date&#x27;</span>]</span><br><span class=\"line\">        signature = self.__sha1_base64(feature,self.__ak_secret)</span><br><span class=\"line\">              </span><br><span class=\"line\">        headers[<span class=\"string\">&#x27;Authorization&#x27;</span>] = <span class=\"string\">&quot;Dataplus &quot;</span> + self.__ak_id + <span class=\"string\">&quot;:&quot;</span> + signature</span><br><span class=\"line\">       </span><br><span class=\"line\">        req = requests.post(options[<span class=\"string\">&#x27;url&#x27;</span>], data=options[<span class=\"string\">&#x27;body&#x27;</span>], headers=headers)</span><br><span class=\"line\">        <span class=\"comment\">#print(req.json())</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> tempfile.NamedTemporaryFile(suffix=<span class=\"string\">&#x27;.mp3&#x27;</span>,delete=<span class=\"literal\">False</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(req.content)</span><br><span class=\"line\">            tmpfile = f.name</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tmpfile</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    a = Alibaba()</span><br><span class=\"line\">    a.send_request(<span class=\"string\">&#x27;今天天气怎么样?&#x27;</span>) <span class=\"comment\"># 输入要合成语音的文字</span></span><br></pre></td></tr></table></figure>\n<p>获得文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmp91s93ebe.mp3</span><br></pre></td></tr></table></figure>\n","categories":["Technology"],"tags":["Python"]},{"title":"根据Gentoo handbook安装——gentoo基本系统+UEFI引导","url":"/2018/09/23/%E6%A0%B9%E6%8D%AEGentoo-handbook%E5%AE%89%E8%A3%85%E2%80%94%E2%80%94gentoo%E5%9F%BA%E6%9C%AC%E7%B3%BB%E7%BB%9F+UEFI%E5%BC%95%E5%AF%BC/","content":"<ul>\n<li>折腾gentoo有段时间， 趁着放假，做做笔记；根据官网的 <a href=\"https://wiki.gentoo.org/wiki/Handbook:AMD64\">Gentoo Handbook</a> 来一步步记录装gentoo的详细过程。<br>####A.安装前的一些准备</li>\n</ul>\n<p><strong><code>注意：最小CD镜像的安装，必须要在联网下进行！！！</code></strong><br><strong><code>另外：安装过程中提示 需要添加 USE 时，请按照提示在 /etc/protage/make.conf 文件中添加 USE=“ 提示的USE关键字 ” 即可。</code></strong></p>\n<p>如果提示**<code>needs updating</code>**<br>则运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">etc-update</span><br></pre></td></tr></table></figure>\n<p>然后输入**<code>-3</code>** -&gt; 回车 -&gt; yes ,之后在重新装一次即可。<br>######1.本次安装使用台式机电脑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CPU: Intel Core i7-7700 @ 8x 4.2GHz</span><br><span class=\"line\">GPU: GeForce GTX 1060 6GB </span><br></pre></td></tr></table></figure>\n<p>######2.下载镜像(amd64)<br><strong>gentoo的安装使用了最小镜像+stage3的方式</strong><br>这里只下载最小镜像 <a href=\"http://distfiles.gentoo.org/releases/amd64/autobuilds/20180920T214502Z/install-amd64-minimal-20180920T214502Z.iso\">install-amd64-minimal-20180920T214502Z.iso</a> 即可，文件网址可能失效，建议去<a href=\"https://gentoo.org/\">Gentoo官网</a><br>下载。<br><strong><code>最小CD镜像：Minimal Installation CD 2018-09-20</code></strong><br><strong><code>stage archives: Stage3 2018-09-20</code></strong></p>\n<p>默认镜像源是国外的服务器，所以下载镜像时，需要选择国内镜像源来下载，否则奇慢无比！</p>\n<ul>\n<li>进入官网下载页面<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-dcb890316d351579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"进入下载页面.png\"></li>\n<li>选择国内镜像源目录<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-b2c98ae71ab63773.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"镜像源目录.png\"></li>\n<li>选择镜像源<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-3a19479ee692a076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择镜像源.png\"><br>点击镜像源之后进入文件下载网站。然后依次点击：</li>\n</ul>\n<p><strong><code>releases -&gt; amd64 -&gt; autobuilds -&gt; current-install-amd64-minimal </code></strong><br>最后来到下面这个页面，点击如图所示文件，即可下载最新镜像文件：<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e57d23fd978d6638.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"镜像下载\"></p>\n<p>######3.刻录优盘<br>下载完镜像文件后，在linux下可以采用dd镜像写入方式，在win下可以使用一些常见的优盘启动制作软件，比如：rufus等。</p>\n<ul>\n<li><p>Linux下使用**<code>dd</code>**命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃linux 下</span><br><span class=\"line\">$ sudo <span class=\"keyword\">if</span>=iospath of=usb</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-e3b756f57e8dc597.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"dd\"></p>\n</li>\n<li><p>windows下使用 rufus 软件：<br>选择分区方案： <code>&#39;用于UEFI 计算机的GPT分区方案&#39;</code></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4e5c8432de71ef4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择分区方案\"></p>\n</li>\n</ul>\n<p>选择下载好的镜像文件</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-534fc7d404641906.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择镜像文件\"><br>底部会提示使用的镜像文件，然后点击 开始<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-fe3cd23a23060015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开始制作\"><br>选择镜像写入方式<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-d9f09fbf7ac6c245.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择镜像写入方式\"><br>写入中<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6fb6e18407bf4dad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"写入中\"><br>写入完成后提示准备就绪，关闭软件即可<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-9f7efd1fec989bf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"写入完成\"></p>\n<p>####B. 开始安装<br>将刻录的优盘插入待安装的电脑，然后使用默认gentoo内核启动，<code>由于版本更新，启动方式可能不同。</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6b344afc7b0ace48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gentoo内核启动\"><br>启动之后<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-93af51db916d5514.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"启动之后\"><br>######1.检查网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n<p>执行之后，能ping通的话，说明可以正常连上网络：<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ef6a3de1ab6caa58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ping\"></p>\n<p>如果是台式机用的有线网，所有基本上不用怎么配置，<br>但如果是笔记本的话，则要配置一下无线网络，具体的配置方式请看 <a href=\"https://wiki.gentoo.org/wiki/Handbook:AMD64\">Gentoo Handbook</a> ，这里仅作参考：<br><code>系统安装优盘启动之后默认是锁定wifi的，以我的笔记本为例：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rfkill list all</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-92c545bbdc8f5ea7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wifi锁定\"></p>\n<p><code>此时需要解锁:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rfkill unblock all</span><br><span class=\"line\">rfkill list all</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-f084e4d8944d5671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wifi解锁\"></p>\n<p><code>然后启用wifi端口:</code><br><code>注意：wlp0s20f3 为本机WiFi网卡名称，具体的名称以自己的为主，查看网卡名称的命令： ls /sys/class/net</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip link set dev wlp0s20f3 up</span><br></pre></td></tr></table></figure>\n\n<p><code>最后连接wifi：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net-setup wlp0s20f3</span><br></pre></td></tr></table></figure>\n<p><code>根据提示输入wifi 名称和密码即可。</code><br><code>检查是否连上wifi:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">iw dev wlp0s20f3 link</span><br></pre></td></tr></table></figure>\n<p><code>如果没连上会提示 No connect,否则会出现连上的wifi信息。</code></p>\n<p>######2.磁盘分区<br><strong>关于磁盘分区，需要根据自己的硬盘做出调整，以下的分区方式仅供参考！</strong><br>此时的电脑上有一个M.2的固态，和两个机械硬盘，一个优盘<br>  磁盘               |说明|分区列表<br> —                   |:-:|:-:|<br>/dev/nvme0n1 |   M.2固态    | /grub、/boot、/<br>/dev/sda          |机械硬盘1    | /home、swap<br>/dev/sdb          | 机械硬盘2   |未分区<br>/dev/sdc          | 优盘            |未分区</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-062f9c0af680f98d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"磁盘分区\"></p>\n<p><strong>2.1 针对 /dev/nvme0n1 固态的分区(分区工具有fdisk、cfdisk、parted等)：</strong></p>\n<ul>\n<li><strong><code>使用 UEFI 做引导时，可以同时识别 MBR 和 GPT 分区</code></strong></li>\n<li><strong><code>但是在 Windows 系统下只能使用 GPT 分区类型</code></strong></li>\n<li><strong><code>为方便以后装双系统，这里使用 GPT 分区类型</code></strong></li>\n</ul>\n<p>分区数量：/grub、/boot、/</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃使用 parted 分区工具</span><br><span class=\"line\">parted /dev/nvme0n1</span><br></pre></td></tr></table></figure>\n<p><em><strong>parted基本操作</strong></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃查看操作说明</span><br><span class=\"line\">(parted) <span class=\"built_in\">help</span></span><br><span class=\"line\">＃设置 gpt 分区类型 注意：这个设置会格式化整个磁盘</span><br><span class=\"line\">(parted) mklabe gpt</span><br><span class=\"line\">＃容量查看 MB</span><br><span class=\"line\">(parted) unit mib</span><br><span class=\"line\">＃分区大小 start：起始容量 end：结束容量，分区大小：end - start</span><br><span class=\"line\">(parted) mkpart primary start end</span><br><span class=\"line\">＃打印整个磁盘分区</span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span></span><br></pre></td></tr></table></figure>\n<p>######a. 启动分区：10MB</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 1 11</span><br><span class=\"line\">(parted) name 1 grub</span><br><span class=\"line\">(parted) <span class=\"built_in\">set</span> 1 bios_grub on</span><br></pre></td></tr></table></figure>\n<p>######b. 引导分区：128MB<br><strong><code>注意：如果你是在 win10（举例） 下安装的 gentoo ,想组双系统的话，那么你需要保证已有一个 EFI分区（这个分区在你安装 win10 时会自动生成），此时直接跳过 ‘引导分区’ 这一步。</code></strong><br>使用UEFI接口引导系统（而不是BIOS）时，将引导分区标记为EFI系统分区。当在分区上设置引导选项时，Parted会自动执行此操作，完成后会有一个esp标志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 11 139</span><br><span class=\"line\">(parted) name 2 boot</span><br><span class=\"line\">(parted) <span class=\"built_in\">set</span> 2 boot on</span><br></pre></td></tr></table></figure>\n<p>######c. 根分区：110GB</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 139 112779</span><br><span class=\"line\">(parted) name 3 root</span><br></pre></td></tr></table></figure>\n<p>######d. M.2固态分区过程图<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-dfb767bddea167e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"M.2固态分区\"><br><strong>2.2 针对 /dev/sda机械硬盘1的分区(分区工具有fdisk、cfdisk、parted等)：</strong></p>\n<p>分区数量：/home、swap</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃使用 parted 分区工具</span><br><span class=\"line\">parted /dev/sda</span><br></pre></td></tr></table></figure>\n<p><em><strong>parted基本操作</strong></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃查看操作说明</span><br><span class=\"line\">(parted) <span class=\"built_in\">help</span></span><br><span class=\"line\">＃容量查看 GB</span><br><span class=\"line\">(parted) unit Gib</span><br><span class=\"line\">＃分区大小 start：起始容量 end：结束容量，分区大小：end - start</span><br><span class=\"line\">(parted) mkpart primary start end</span><br><span class=\"line\">＃打印整个磁盘空闲分区</span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span> free</span><br></pre></td></tr></table></figure>\n<p>######a. swap分区：10GB</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 0 10</span><br></pre></td></tr></table></figure>\n<p>######b. home分区：290GB</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parted) mkpart primary 10 300</span><br></pre></td></tr></table></figure>\n<p>######c. 机械硬盘1分区过程图<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-fa74055827bddb65.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"机械硬盘1分区\"></p>\n<p>#####3. 格式化分区<br>分区|格式<br>—|:-:|<br>/boot|fat32<br>/|ext4<br>/home|ext4<br>swap|none<br>######a. 格式化启动分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkfs.ext2 /dev/nvme0n1p</span><br></pre></td></tr></table></figure>\n<p>######b. 格式化引导分区<br>官方<a href=\"http://www.uefi.org/sites/default/files/resources/UEFI%202_5.pdf\">UEFI规范</a>表示UEFI固件将识别FAT12,16或32文件系统，但建议ESP使用FAT32。继续将ESP格式化为FAT32：<br><strong><code>注意：如果你是在 win10（举例） 下安装的 gentoo ,想组双系统的话，那么你需要保证已有一个 EFI分区（这个分区在你安装 win10 时会自动生成），此时直接跳过 ‘格式化引导分区’ 这一步。</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkfs.fat -F 32 &#x2F;dev&#x2F;nvme0n1p2</span><br></pre></td></tr></table></figure>\n<p>######c. 格式化根分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/nvme0n1p3</span><br></pre></td></tr></table></figure>\n<p>######d. 格式化home分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure>\n<p>######e. 格式化并启用swap</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkswap /dev/sda2</span><br><span class=\"line\">swapon /dev/sda2</span><br></pre></td></tr></table></figure>\n<p>#####4. 挂载分区<br>所有分区格式化完成之后，挂载分区到/mnt/gentoo下：<br><strong><code>注意：EFI 引导需要在 boot 下创建一个 efi 目录</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃创建boot home目录</span><br><span class=\"line\">mkdir -p /mnt/gentoo/boot/efi </span><br><span class=\"line\">mkdir /mnt/gentoo/home</span><br><span class=\"line\">mount /dev/nvme0n1p3 /mnt/gentoo</span><br><span class=\"line\">mount /dev/nvme0n1p2 /mnt/gentoo/boot/efi</span><br><span class=\"line\">mount /dev/sda3 /mnt/gentoo/home</span><br></pre></td></tr></table></figure>\n<p>挂载完之后可以使用<code>mount 命令</code>检查一下挂载是否成功，没有挂载成功的需要重新挂载一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount</span><br></pre></td></tr></table></figure>\n<p>#####5.下载stage3<br>######a. 验证时间<br>当前时间：9月22日 17:08 2018</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">date</span><br><span class=\"line\">＃Sat Sep 22 09:12:08 UTC 2018</span><br></pre></td></tr></table></figure>\n<p>时间显示应与当前日期为准<br>举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃本地时间：9月22日 17:08 2018</span><br><span class=\"line\">＃设置时间： 9月22日 17:08 2018</span><br><span class=\"line\">date 092217082018</span><br></pre></td></tr></table></figure>\n<p>######b. 下载stage3<br>官方源默认是国外服务器，所以需要在国内源中下载stage3文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/gentoo</span><br><span class=\"line\">links https://mirrors.163.com/gentoo/releases/amd64/autobuilds/current-install-amd64-minimal/</span><br></pre></td></tr></table></figure>\n<p>此时出现一个命令行网页浏览器，选择stage3下载即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-d2d8ab39524e3181.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"下载stage3\"><br>下载完之后，按 <strong><code>ESC -&gt; 回车 -&gt; Exit -&gt; 回车</code></strong> 退出<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-b895a1de2f5d52c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"退出\"></p>\n<p>######c. 解压stage3<br>文件名按自己下载的为准</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time tar xvf stage3-amd64-20180920T214502Z.tar.xz</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4dc6a7a2eaf3d585.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"解压stage3\"><br>######d. 配置 /etc/portage/make.conf<br>首先，要知道自己的电脑cpu核心数<br><strong>然后设置变量 ：MAKEOPTS=”-j核心数+1”</strong><br>检查电脑核心数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /proc/cpuinfo | grep processor</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-f4d0cac3b6735ad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"cpu核心数\"><br>还有一种比较简单的方法，使用**<code>top</code><strong>命令，然后按数字键 1，就会出现所有cpu的数量 : <strong><code>%Cpu0 - %Cpun 核心数就是 n+1</code></strong><br>所以我的电脑设置是：</strong><code>MAKEOPTS=&quot;-j9&quot;</code>**<br>执行以下命令在最后一行添加配置变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;MAKEOPTS=&quot;-j9&quot;&#x27;</span> &gt;&gt; /etc/portage/make.conf</span><br></pre></td></tr></table></figure>\n\n\n<p>######e. 选择镜像<br>将光标移至所有国内镜像地址，然后按**<code>空格键</code><strong>确认，所有选完后，按</strong><code>回车</code>**即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/portage/make.conf</span><br></pre></td></tr></table></figure>\n<p>配置Gentoo ebuild存储库：此文件包含更新软件包存储库所需的同步信息（包含Portage下载和安装软件包所需的所有信息的ebuild和相关文件的集合）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir --parents /mnt/gentoo/etc/portage/repos.conf</span><br></pre></td></tr></table></figure>\n<p>接下来，将Portage提供的Gentoo存储库配置文件复制到（新创建的）repos.conf目录中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf</span><br></pre></td></tr></table></figure>\n<p>######f. 复制DNS信息<br>确保在接下来chroot之后依然能连上网络<br>**<code>--dereference</code>**：确保复制的是文件本身而不是符号链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp --dereference /etc/resolv.conf /mnt/gentoo/etc/</span><br></pre></td></tr></table></figure>\n<p>######g. 挂载文件系统<br>gentoo默认的init系统是OpenRC类型，所有要挂载相关系统文件，不然有些命令无法使用，在以后修复系统的时候，也要记得挂载一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount --types proc /proc /mnt/gentoo/proc</span><br><span class=\"line\">mount --rbind /sys /mnt/gentoo/sys</span><br><span class=\"line\">mount --rbind /dev /mnt/gentoo/dev</span><br></pre></td></tr></table></figure>\n<p>如果是安装init系统为systemd的，则需要加 <strong><code>--make-rslave</code></strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount --types proc /proc /mnt/gentoo/proc</span><br><span class=\"line\">mount --rbind /sys /mnt/gentoo/sys</span><br><span class=\"line\">mount --make-rslave /mnt/gentoo/sys</span><br><span class=\"line\">mount --rbind /dev /mnt/gentoo/dev</span><br><span class=\"line\">mount --make-rslave /mnt/gentoo/dev</span><br></pre></td></tr></table></figure>\n<p>######h. 进入新环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chroot /mnt/gentoo /bin/bash</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> PS1=<span class=\"string\">&quot;(chroot) <span class=\"variable\">$&#123;PS1&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>######i. 从Web安装ebuild存储库快照</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge-webrsync</span><br></pre></td></tr></table></figure>\n<p>注意：这一步跟上面的选择镜像有关，如果发现一直处于执行状态，那么检查一下文件  <strong><code>/mnt/gentoo/etc/portage/make.conf</code></strong> 是否正确。<br>######j. 选择配置<br>配置列表是实时更新的，所以需要根据实际做出选择，这里选择默认12即可，如果是systemd，则需要选择带systemd字样的配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eselect profile list</span><br><span class=\"line\">eselect profile <span class=\"built_in\">set</span> 12</span><br></pre></td></tr></table></figure>\n<p>配置列表<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-cf8e63e025a3eedc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择配置\"><br>######k. 更新@world集<br>因为没有选择桌面环境，所有更新时间会短一些。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet --update --deep --newuse @world</span><br></pre></td></tr></table></figure>\n<p>这里使用了 <strong>–quiet</strong> 静默安装，不会输出安装过程。<br>安装过程图<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-68e22c2b2c094e06.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更新@world集\"></p>\n<p>######l. 时区<br>选择本地时区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls /usr/share/zoneinfo/Asia</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span><br></pre></td></tr></table></figure>\n<p>更新时区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --config sys-libs/timezone-data</span><br></pre></td></tr></table></figure>\n<p>######m. 配置语言环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/locale.gen</span><br></pre></td></tr></table></figure>\n<p>根据如下修改，这里需要注意，gentoo默认不支持zh_CN.UTF-8，需要<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-3c5e6f0a2e0eeb36.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置语言环境\"></p>\n<p>下一步是运行locale-gen。它将生成/etc/locale.gen文件中指定的所有语言环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">locale-gen</span><br><span class=\"line\">eselect locale list</span><br><span class=\"line\">eselect locale <span class=\"built_in\">set</span> 8</span><br></pre></td></tr></table></figure>\n<p>这里设置中文语言<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-4050e0c8bac79266.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择语言.png\"></p>\n<p>确保设置了区域设置，否则系统会在内核构建期间以及安装后期的其他软件部署中显示警告和错误。</p>\n<p>######n. 重新加载环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">env-update &amp;&amp; <span class=\"built_in\">source</span> /etc/profile &amp;&amp; <span class=\"built_in\">export</span> PS1=<span class=\"string\">&quot;(chroot) <span class=\"variable\">$PS1</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>######o. 安装内核源码<br>对于基于amd64的系统，Gentoo推荐使用<a href=\"https://packages.gentoo.org/packages/sys-kernel/gentoo-sources\">sys-kernel / gentoo-sources</a>包。</p>\n<p>选择适当的内核源并使用emerge安装它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask sys-kernel/gentoo-sources</span><br></pre></td></tr></table></figure>\n<p>如果提示**<code>needs updating</code>**<br>则运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">etc-update</span><br></pre></td></tr></table></figure>\n<p>然后输入**<code>-3</code>** -&gt; 回车 -&gt; yes ,之后在重新装一次即可。</p>\n<p>######p. 配置kernel<br>这里使用自动配置方式，需要手动配置的请看Gentoo Wiki。</p>\n<p>安装kernel自动配置工具genkernel</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet sys-kernel/genkernel</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-d0650087ab604a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装genkernel\"><br>安装时如果提示 **<code>USE changes</code>**，则运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">etc-update</span><br></pre></td></tr></table></figure>\n<p>然后输入**<code>-3</code>** -&gt; 回车 -&gt; yes ,之后在重新执行 **<code>time emerge --ask --quiet sys-kernel/genkernel</code>**即可。</p>\n<p>安装完成之后，编辑 <strong><code>/etc/fstab</code></strong> 系统的挂载点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>添加如下挂载点：<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-7be4cf0fa42f6141.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"挂载点\"></p>\n<p>然后开始编译kernel：<br>这需要不少的时间，可以喝杯茶放松一下~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time genkernel all</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-9881db2d3a844763.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编译内核\"><br>编译完成之后，检查一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls /boot/kernel* /boot/initramfs*</span><br><span class=\"line\">＃会显示两个文件　　</span><br></pre></td></tr></table></figure>\n<p>######q. 安装固件</p>\n<p>某些驱动程序在工作之前需要在系统上安装其他固件。这通常是网络接口的情况，尤其是无线网络接口。此外，在使用开源驱动程序时，来自AMD，Nvidia和Intel等供应商的现代视频芯片通常需要外部固件文件。大多数固件都封装在<a href=\"https://packages.gentoo.org/packages/sys-kernel/linux-firmware\">sys-kernel / linux-firmware</a>中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask --quiet sys-kernel/linux-firmware</span><br></pre></td></tr></table></figure>\n<p>######r. 修改主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/conf.d/hostname</span><br><span class=\"line\">＃将hostname变量设置为自己取的主机名字</span><br><span class=\"line\">hostname =“Guard”</span><br></pre></td></tr></table></figure>\n<p>其次，如果需要域名，请在/etc/conf.d/net中设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/conf.d/net</span><br><span class=\"line\">＃将dns_domain_lo变量设置为所选域名</span><br><span class=\"line\">dns_domain_lo =“homenetwork”</span><br></pre></td></tr></table></figure>\n<p>如果设置域名，登录屏幕会显示**<code>This is hostname.(none)</code>**<br>想要将它去掉，只需要修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/issue</span><br><span class=\"line\">＃将 .\\O 删掉即可</span><br></pre></td></tr></table></figure>\n<p>######s. 配置网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">time emerge --ask  --quiet --noreplace net-misc/netifrc</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-6242984fc368980a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置网络\"></p>\n<p>######t. 设置启动时自动启动网络<br>要在引导时激活网络接口，需要将它们添加到默认运行级别。<br>首先需要知道网络接口名称：<br>使用 **<code>ifconfig</code>**查看是 **<code>eth0</code>**，还是 <strong><code>enp3s0</code></strong><br>这里使用 enp3s0：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/init.d</span><br><span class=\"line\">ln -s net.lo net.enp3s0</span><br><span class=\"line\">rc-update add net.enp3s0 default</span><br></pre></td></tr></table></figure>\n<p>如果在启动系统后我们发现有关网络接口名称（当前记录为eth0）的假设是错误的，那么执行以下步骤来纠正这个问题：</p>\n<ul>\n<li>使用正确的接口名称更新/etc/conf.d/net文件（enp3s0而不是eth0）。</li>\n<li>创建新的符号链接（如/etc/init.d/net.enp3s0）。</li>\n<li>删除旧的符号链接（rm /etc/init.d/net.eth0）。</li>\n<li>将新的添加到默认运行级别。</li>\n<li>使用rc-update del net.eth0 default删除旧的。</li>\n</ul>\n<p>######u. 设置主机hosts</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/hosts</span><br></pre></td></tr></table></figure>\n<p>按如下设置hosts文件，这里以**<code>Guard</code>**为主机名<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-0669db325bc83ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hosts\"></p>\n<p>######v. 设置root密码<br>使用passwd命令设置root密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n<p>######w. 设置时钟</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/conf.d/hwclock</span><br><span class=\"line\">＃修改：clock=<span class=\"string\">&quot;local&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果硬件时钟未使用UTC，则必须**<code>clock=&quot;local&quot;</code>**在文件中进行设置。否则系统可能会显示时钟偏差行为。</p>\n<p>######x. 安装工具</p>\n<ol>\n<li>系统日志记录<br>提供传统的系统日志记录守护程序集。默认的日志记录配置可以很好地开箱即用，这使得这个软件包成为初学者的一个很好的选择。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask app-admin/sysklogd</span><br><span class=\"line\">rc-update add sysklogd default</span><br></pre></td></tr></table></figure></li>\n<li>Cron守护程序<br>cron守护程序执行计划的命令。如果需要定期执行某些命令（例如每天，每周或每月），则非常方便。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask sys-process/cronie</span><br><span class=\"line\">rc-update add cronie default</span><br></pre></td></tr></table></figure></li>\n<li>文件索引<br>要索引文件系统以提供更快的文件位置功能，请安装<a href=\"https://packages.gentoo.org/packages/sys-apps/mlocate\">sys-apps / mlocate</a>。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask sys-apps/mlocate</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>远程访问<br>要在安装后远程访问系统，请将sshd init脚本添加到默认运行级别：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rc-update add sshd default</span><br></pre></td></tr></table></figure></li>\n<li>如果需要串行控制台访问（在远程服务器的情况下可以访问），请取消注释/ etc / inittab中的串行控制台部分：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano -w /etc/inittab</span><br><span class=\"line\">＃SERIAL CONSOLES</span><br><span class=\"line\">s0：12345：respawn：/ sbin / agetty 9600 ttyS0 vt100</span><br><span class=\"line\">s1：12345：respawn：/ sbin / agetty 9600 ttyS1 vt100</span><br></pre></td></tr></table></figure></li>\n<li>网络工具</li>\n</ol>\n<ul>\n<li>6.1 安装DHCP客户端<br>为了使系统能够使用netifrc脚本自动获取一个或多个网络接口的IP地址，必须安装DHCP客户端。我们建议使用<a href=\"https://packages.gentoo.org/packages/net-misc/dhcpcd\">net-misc / dhcpcd，</a>尽管通过Gentoo存储库可以获得许多其他DHCP客户端：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask net-misc/dhcpcd</span><br></pre></td></tr></table></figure>\n<ul>\n<li>6.2安装无线网络工具<br><code>如果不需要无线可以跳过此步骤</code><br>如果系统将连接到无线网络，请为Open或WEP网络安装：<a href=\"https://packages.gentoo.org/packages/net-wireless/iw\">net-wireless / iw</a>；<br>WPA或WPA2网络安装：<a href=\"https://packages.gentoo.org/packages/net-wireless/wpa_supplicant\">net-wireless / wpa_supplicant</a>；<br>iw也是用于扫描无线网络的有用的基本诊断工具。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask net-wireless/iw </span><br><span class=\"line\">emerge --ask net-wireless/wpa_supplicant</span><br></pre></td></tr></table></figure>\n######y. 配置引导加载程序</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>合并GRUB2 软件到系统中</li>\n</ol>\n<ul>\n<li>UEFI用户注意事项：</li>\n</ul>\n<p>用户需要确保<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>已启用（默认情况下是这种情况）。如果不是设置的情况，<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>则需要在出现GRUB2 之前将其添加到<code>/etc/portage/make.conf</code>文件中，然后在安装GRUB2 ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;GRUB_PLATFORMS=&quot;efi-64&quot;&#x27;</span> &gt;&gt; /etc/portage/make.conf</span><br><span class=\"line\">emerge --ask sys-boot/grub:2</span><br></pre></td></tr></table></figure>\n<p>如果GRUB2以某种方式出现而没有启用<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>，则可以将该行（<code>GRUB_PLATFORMS=&quot;efi-64&quot;</code>）添加到make.conf中，然后通过将选项传递给emerge来重新计算<a href=\"https://wiki.gentoo.org/wiki/World_set_(Portage)\" title=\"世界集（波蒂奇）\">世界包集的</a>依赖关系：<code>--update --newuse</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask --update --newuse --verbose sys-boot/grub:2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用仅支持MBR分区表的旧BIOS系统时，不需要其他配置就能显示GRUB：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask --verbose sys-boot/grub:2</span><br></pre></td></tr></table></figure>\nGRUB2软件现已合并到系统中，但尚未安装。</li>\n</ul>\n<ol start=\"2\">\n<li>安装GRUB2软件</li>\n</ol>\n<p>接下来，通过<code>grub-install</code>命令将必要的GRUB2文件安装到**<code>/boot/grub</code><strong>目录。假定第一个磁盘（系统从中引导的磁盘）是</strong><code>/dev/sda</code>**，以下命令之一将执行：</p>\n<ul>\n<li>UEFI用户：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grub-install --target=x86_64-efi --efi-directory=/boot/efi</span><br></pre></td></tr></table></figure>\n如果grub_install返回类似的错误<code>Could not prepare Boot variable: Read-only file system</code>，可能需要将efivars特殊挂载重新安装为读写才能成功：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount -o remount,rw /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>**<code>另外需要注意</code>**：<br>一些主板制造商似乎只支持EFI系统分区（ESP）中的.EFI文件的 /boot/efi 目录位置(挂载的引导分区目录)。GRUB安装程序可以使用该<code>--removable</code>选项自动执行此操作。在运行以下命令之前验证是否已安装ESP。假设ESP安装在/boot/efi（如前所述），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable</span><br></pre></td></tr></table></figure>\n<p>这将创建由UEFI规范定义的默认目录，然后自动将 grubx64.efi 文件复制到由相同规范定义的“默认”EFI文件位置。<br>我的电脑主板是华硕的，只支持EFI系统分区（ESP）中的.EFI文件的 /boot/efi 目录位置(挂载的引导分区目录)。所以得加  <strong><code>--removable</code></strong><br>如果发现自己的系统引导不了，出现 GRUB 字样，则尝试加 <strong><code>--removable</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-ad9e622ed7bbe1dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装EFI引导\"></p>\n<ul>\n<li>BIOS用户：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grub-install /dev/sda </span><br><span class=\"line\">＃/dev/sda 为 /boot 挂载分区</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>GRUB2配置</li>\n</ol>\n<p>注意：如果是安装win10 与gentoo 双系统，需要另外安装 <code>os-prober</code> 用以检测 win10 的引导：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emerge --ask os-prober</span><br></pre></td></tr></table></figure>\n<p>然后执行 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">os-prober</span><br></pre></td></tr></table></figure>\n\n<p>接下来，根据 /etc/default/grub 文件和 /etc/grub.d 脚本中指定的用户配置生成GRUB2配置。<br>在大多数情况下，用户不需要配置，因为GRUB2将自动检测要引导的内核来生成最终的GRUB2配置，<br>请运行 grub-mkconfig 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">grub-mkconfig -o /boot/efi/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n\n<p>如果是win10与gentoo双系统则：<br><code>如果检测不到win系统，则可以先继续执行下一步，等全部安装完毕之后，重启系统，再执行 os-prober -&gt; grub-mkconfig -o /boot/grub/grub.cfg 即可。</code><br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-d68c500639730983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"win10与gentoo双系统配置引导\"></p>\n<p>假如没有出现**<code>Found</code>**开头的文字，则表明检测不到系统，此时：</p>\n<ul>\n<li>运行 **<code>ls /boot/kernel* /boot/initramfs*</code>**查看是否会输出两个文件；<pre><code>如果没有，则运行**`ls /boot/efi/kernel* /boot/efi/initramfs*`**，查看是否会输出两个文件，如果有输出，则将两个文件复制到**`/boot`**目录下，之后重新**`grub-mkconfig -o /boot/efi/grub/grub.cfg`**即可。\n</code></pre>\n如果都没有输出，则重新**<code>genkernel all</code>**一下，然后在自动生成GRUB2配置。</li>\n</ul>\n<p>######z. 重新启动系统</p>\n<p>退出chroot环境并卸载所有已安装的分区。<br>然后重新启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>不要忘记拔掉优盘，否则可能会再次引导CD而不是新的Gentoo系统。</p>\n<p>win10与gentoo双系统引导界面:<br><img src=\"https://upload-images.jianshu.io/upload_images/7237812-cf37fe96c1b02139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"win10与gentoo双系统引导界面\"><br>gentoo命令行登录，此时输入 <code>root -&gt; 回车 -&gt; 输入密码</code>，即可进入gentoo系统。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7237812-92a6e2f7aa61aade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"命令行登录界面\"></p>\n<p>至此，Gentoo的基本系统已安装完成！</p>\n<p>感慨一下：Gentoo确实是一个挺折腾的系统，同时需要更多的耐心！不过折腾完，就会发现对Linux更熟悉了一点！<br>谢谢阅读～</p>\n<p>下一篇：<a href=\"https://www.jianshu.com/p/31f7ff6ee3d4\">根据Gentoo handbook安装——KDE桌面+NVIDIA显卡</a></p>\n","categories":["Technology"],"tags":["Gentoo","UEFI"]}]